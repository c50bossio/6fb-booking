#!/bin/bash

# =============================================================================
# BookedBarber V2 - Staging Credentials Setup Script
# =============================================================================
# This script uses CLI tools to set up test/staging credentials for:
# - Stripe (webhooks and test keys)
# - Twilio (test account credentials)  
# - Google Cloud (OAuth client and Calendar API)
# - SendGrid (API key creation)
# - Facebook (manual instructions provided)
#
# Prerequisites:
# - brew install stripe/stripe-cli/stripe
# - brew install --cask google-cloud-sdk
# - brew tap twilio/brew && brew install twilio
# - npm install -g @sendgrid/cli (optional)
#
# Usage: ./scripts/setup-staging-credentials.sh
# =============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Output files
BACKEND_ENV="backend-v2/.env.staging.populated"
FRONTEND_ENV="backend-v2/frontend-v2/.env.staging.populated"
CREDENTIALS_OUTPUT="staging-credentials-$(date +%Y%m%d-%H%M%S).txt"

echo -e "${BLUE}🚀 BookedBarber V2 - Staging Credentials Setup${NC}"
echo "=================================================="
echo ""

# Check if we're in the right directory
if [ ! -f "backend-v2/main.py" ]; then
    echo -e "${RED}❌ Error: Please run this script from the 6fb-booking root directory${NC}"
    exit 1
fi

# Create credentials output file
echo "# BookedBarber V2 Staging Credentials - $(date)" > "$CREDENTIALS_OUTPUT"
echo "# Generated by setup-staging-credentials.sh" >> "$CREDENTIALS_OUTPUT"
echo "" >> "$CREDENTIALS_OUTPUT"

echo -e "${YELLOW}📋 Step 1: Checking Prerequisites...${NC}"

# Check for required CLI tools
check_cli_tool() {
    if command -v "$1" &> /dev/null; then
        echo -e "✅ $1 is installed"
        return 0
    else
        echo -e "❌ $1 is not installed"
        return 1
    fi
}

MISSING_TOOLS=0

echo "Checking CLI tools:"
check_cli_tool "stripe" || MISSING_TOOLS=$((MISSING_TOOLS + 1))
check_cli_tool "gcloud" || MISSING_TOOLS=$((MISSING_TOOLS + 1))
check_cli_tool "twilio" || MISSING_TOOLS=$((MISSING_TOOLS + 1))

if [ $MISSING_TOOLS -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}⚠️  Missing CLI tools detected. Install commands:${NC}"
    if ! command -v stripe &> /dev/null; then
        echo "  brew install stripe/stripe-cli/stripe"
    fi
    if ! command -v gcloud &> /dev/null; then
        echo "  brew install --cask google-cloud-sdk"
    fi
    if ! command -v twilio &> /dev/null; then
        echo "  brew tap twilio/brew && brew install twilio"
    fi
    echo ""
    read -p "Install missing tools and press Enter to continue, or Ctrl+C to exit..."
fi

echo ""
echo -e "${YELLOW}📋 Step 2: Stripe Setup (Test Mode)${NC}"
echo "Setting up Stripe test credentials and webhook..."

# Stripe login check
if ! stripe --version &> /dev/null; then
    echo -e "${RED}❌ Stripe CLI not found${NC}"
    exit 1
fi

# Check if already logged in
if ! stripe config --list &> /dev/null; then
    echo "🔐 Please login to Stripe:"
    stripe login
fi

echo "🔄 Creating Stripe webhook endpoint..."

# Create webhook with all required events
WEBHOOK_OUTPUT=$(stripe webhooks create \
    --url "https://sixfb-backend-v2-staging.onrender.com/api/v1/webhooks/stripe" \
    --events "payment_intent.succeeded,payment_intent.payment_failed,checkout.session.completed,invoice.payment_succeeded,invoice.payment_failed" \
    --description "BookedBarber Staging Webhook" \
    --format json 2>/dev/null || echo "")

if [ -n "$WEBHOOK_OUTPUT" ]; then
    WEBHOOK_SECRET=$(echo "$WEBHOOK_OUTPUT" | grep -o 'whsec_[a-zA-Z0-9_]*' | head -1)
    echo -e "✅ Webhook created successfully"
    echo "STRIPE_WEBHOOK_SECRET=$WEBHOOK_SECRET" >> "$CREDENTIALS_OUTPUT"
    
    # Update backend env file
    if [ -f "$BACKEND_ENV" ]; then
        sed -i.bak "s/STRIPE_WEBHOOK_SECRET=whsec_YOUR_TEST_WEBHOOK_SECRET_HERE/STRIPE_WEBHOOK_SECRET=$WEBHOOK_SECRET/" "$BACKEND_ENV"
        echo -e "✅ Updated $BACKEND_ENV with webhook secret"
    fi
else
    echo -e "${YELLOW}⚠️  Webhook creation failed or you may already have one. Check Stripe dashboard.${NC}"
fi

# Get test API keys
echo "🔄 Retrieving Stripe test keys..."
STRIPE_KEYS=$(stripe config --list | grep -E "(publishable_key|secret_key)")
if [ -n "$STRIPE_KEYS" ]; then
    echo "$STRIPE_KEYS" >> "$CREDENTIALS_OUTPUT"
    echo -e "✅ Stripe test keys retrieved"
else
    echo -e "${YELLOW}⚠️  Could not retrieve Stripe keys automatically. Get them from dashboard.stripe.com${NC}"
fi

echo ""
echo -e "${YELLOW}📋 Step 3: Twilio Setup (Test Account)${NC}"
echo "Setting up Twilio test credentials..."

# Check if Twilio is logged in
if ! twilio profiles:list &> /dev/null; then
    echo "🔐 Please login to Twilio:"
    twilio login
fi

echo "🔄 Getting Twilio test account info..."

# Get test account SID and auth token
TWILIO_ACCOUNT_SID=$(twilio api:accounts:v1:accounts:list --properties=sid --no-header | head -1 | tr -d ' ')
if [ -n "$TWILIO_ACCOUNT_SID" ]; then
    echo "TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID" >> "$CREDENTIALS_OUTPUT"
    echo -e "✅ Twilio Account SID: $TWILIO_ACCOUNT_SID"
    
    # Update backend env file
    if [ -f "$BACKEND_ENV" ]; then
        sed -i.bak "s/TWILIO_ACCOUNT_SID=ACe5b803b2dee8cfeffbfc19330838d25f/TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID/" "$BACKEND_ENV"
    fi
fi

# Note: Auth token needs to be retrieved from dashboard as CLI doesn't expose it
echo -e "${YELLOW}📋 Manual Step Required:${NC}"
echo "   1. Go to https://console.twilio.com"
echo "   2. Copy your Auth Token"
echo "   3. Update TWILIO_AUTH_TOKEN in $BACKEND_ENV"

echo ""
echo -e "${YELLOW}📋 Step 4: Google Cloud Setup (OAuth & Calendar API)${NC}"
echo "Setting up Google OAuth client and Calendar API..."

# Check if gcloud is authenticated
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" &> /dev/null; then
    echo "🔐 Please login to Google Cloud:"
    gcloud auth login
fi

echo "🔄 Setting up Google Cloud project..."

# Create or use existing project
PROJECT_ID="bookedbarber-staging-$(date +%s)"
echo "Creating project: $PROJECT_ID"

if gcloud projects create "$PROJECT_ID" --name="BookedBarber Staging" 2>/dev/null; then
    echo -e "✅ Created Google Cloud project: $PROJECT_ID"
else
    echo -e "${YELLOW}⚠️  Project creation failed. Using existing project or manual setup required.${NC}"
fi

# Set project and enable APIs
gcloud config set project "$PROJECT_ID" 2>/dev/null || true
gcloud services enable calendar.googleapis.com --quiet 2>/dev/null || true
gcloud services enable oauth2.googleapis.com --quiet 2>/dev/null || true

echo "GOOGLE_CLOUD_PROJECT=$PROJECT_ID" >> "$CREDENTIALS_OUTPUT"

echo -e "${YELLOW}📋 Manual Steps Required:${NC}"
echo "   1. Go to https://console.cloud.google.com"
echo "   2. Select project: $PROJECT_ID"
echo "   3. Go to APIs & Services → Credentials"
echo "   4. Create OAuth 2.0 Client ID"
echo "   5. Add these redirect URIs:"
echo "      - https://sixfb-backend-v2-staging.onrender.com/api/v1/google-calendar/oauth/callback"
echo "      - http://localhost:8001/api/v1/google-calendar/oauth/callback"
echo "   6. Copy Client ID and Secret to $BACKEND_ENV and $FRONTEND_ENV"

echo ""
echo -e "${YELLOW}📋 Step 5: SendGrid Setup${NC}"
echo "Setting up SendGrid API key for staging..."

echo -e "${YELLOW}📋 Manual Steps Required:${NC}"
echo "   1. Go to https://app.sendgrid.com"
echo "   2. Settings → API Keys"
echo "   3. Create API Key → Name: 'BookedBarber Staging'"
echo "   4. Permissions: Mail Send (or Full Access)"
echo "   5. Copy API key to SENDGRID_API_KEY in $BACKEND_ENV"

echo ""
echo -e "${YELLOW}📋 Step 6: Facebook OAuth Setup${NC}"
echo "Setting up Facebook test app..."

echo -e "${YELLOW}📋 Manual Steps Required:${NC}"
echo "   1. Go to https://developers.facebook.com"
echo "   2. My Apps → Create App"
echo "   3. Select 'Business' use case"
echo "   4. App Name: 'BookedBarber Staging'"
echo "   5. Add Facebook Login product"
echo "   6. Settings → Basic: Copy App ID and App Secret"
echo "   7. Facebook Login → Settings → Add redirect URIs:"
echo "      - https://sixfb-frontend-v2-staging.onrender.com/auth/callback/facebook"
echo "      - http://localhost:3001/auth/callback/facebook"
echo "   8. Update FACEBOOK_APP_ID and FACEBOOK_APP_SECRET in $BACKEND_ENV and $FRONTEND_ENV"

echo ""
echo -e "${GREEN}🎉 Staging Credentials Setup Complete!${NC}"
echo "=================================================="
echo ""
echo -e "${BLUE}📄 Summary:${NC}"
echo "✅ Stripe webhook created and configured"
echo "✅ Twilio account SID retrieved"
echo "✅ Google Cloud project created: $PROJECT_ID"
echo "📋 Manual steps required for: Twilio Auth Token, Google OAuth, SendGrid, Facebook"
echo ""
echo -e "${BLUE}📁 Files Updated:${NC}"
echo "- $BACKEND_ENV (partial updates)"
echo "- $CREDENTIALS_OUTPUT (credential reference)"
echo ""
echo -e "${BLUE}🔐 Security Notes:${NC}"
echo "- All credentials saved to: $CREDENTIALS_OUTPUT"
echo "- Keep this file secure and don't commit to git"
echo "- Complete manual steps for remaining services"
echo ""
echo -e "${YELLOW}📋 Next Steps:${NC}"
echo "1. Complete the manual steps outlined above"
echo "2. Test your staging environment: cd backend-v2 && uvicorn main:app --reload --port 8001 --env-file .env.staging"
echo "3. Update Render dashboard with these credentials for cloud staging deployment"
echo ""
echo -e "${GREEN}🚀 Happy staging development!${NC}"