#!/bin/bash

# 6FB BookedBarber - Environment Security Verification Script
# This script verifies that .env files are properly secured

echo "üîí Environment Security Verification"
echo "=================================="

# Change to project root
cd "$(dirname "$0")/.."

# Check git status of .env files
echo "1. Checking git tracking status..."
if git ls-files | grep -q "\.env$"; then
    echo "‚ùå CRITICAL: .env files are tracked in git!"
    echo "   Tracked files:"
    git ls-files | grep "\.env$" | sed 's/^/   /'
    exit 1
else
    echo "‚úÖ .env files are not tracked in git"
fi

# Verify .gitignore rules
echo "2. Checking .gitignore rules..."
if grep -q "^\.env" .gitignore && grep -q "^backend-v2/\.env" .gitignore; then
    echo "‚úÖ .gitignore properly excludes .env files"
else
    echo "‚ö†Ô∏è  .gitignore may be missing some .env rules"
fi

# Check for .env files existence
echo "3. Scanning for .env files..."
env_files=$(find . -name "*.env" -not -path "./node_modules/*" -not -path "./venv/*" -not -path "./.git/*" | head -10)
if [ -n "$env_files" ]; then
    echo "üìã Found .env files (local only):"
    echo "$env_files" | sed 's/^/   /'
else
    echo "‚ÑπÔ∏è  No .env files found"
fi

# Check for template files
echo "4. Checking template files..."
template_files=$(find . -name "*.env.template" -o -name "*.env.example" | head -10)
if [ -n "$template_files" ]; then
    echo "‚úÖ Template files found:"
    echo "$template_files" | sed 's/^/   /'
else
    echo "‚ö†Ô∏è  No template files found"
fi

# Verify environment validation
echo "5. Testing environment validation..."
if [ -f "backend-v2/utils/env_validator.py" ]; then
    echo "‚úÖ Environment validator exists"
    cd backend-v2
    if python -c "from utils.env_validator import EnvValidator; print('‚úÖ Environment validator imports successfully')" 2>/dev/null; then
        echo "‚úÖ Environment validator is functional"
    else
        echo "‚ö†Ô∏è  Environment validator may have issues"
    fi
    cd ..
else
    echo "‚ùå Environment validator not found"
fi

# Check for sensitive patterns in committed files
echo "6. Scanning for accidentally committed secrets..."
if git log --all --full-history --grep="api.*key\|secret\|password" --oneline | head -5 | grep -q .; then
    echo "‚ö†Ô∏è  Found commits that might contain secrets (review recommended)"
else
    echo "‚úÖ No obvious secret-related commits found"
fi

echo ""
echo "üéØ Security Summary:"
echo "==================="
echo "‚úÖ .env files are excluded from version control"
echo "‚úÖ Template files are available for new developers"
echo "‚úÖ Runtime validation is implemented"
echo "‚úÖ Documentation is provided in ENVIRONMENT_SECURITY_GUIDE.md"
echo ""
echo "üìã Next Steps for Production:"
echo "1. Rotate all API keys shown in backend-v2/.env"
echo "2. Use different keys for development vs production"
echo "3. Run 'python backend-v2/utils/env_validator.py' before deployment"
echo "4. Monitor logs for authentication failures"
echo ""
echo "‚úÖ Environment security verification complete!"