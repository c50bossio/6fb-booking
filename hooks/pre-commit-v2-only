#!/bin/bash

# BookedBarber V2 - V2-Only Architecture Hook
# Prevents modifications to deprecated V1 directories
# Ensures all development happens in V2 architecture
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEPRECATED_PATHS="^(backend/|frontend/)"
ALLOWED_V2_PATHS="^(backend-v2/|scripts/|docs/|monitoring/|hooks/|\\.)"
ALLOWED_GLOBAL_FILES="^(README\\.md|CHANGELOG\\.md|LICENSE|\\.gitignore|package\\.json|docker-compose\\.yml|Dockerfile)"

# Log function
log() {
    echo -e "${BLUE}[V2-ONLY]${NC} $1"
}

error() {
    echo -e "${RED}[V2-ONLY ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[V2-ONLY SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[V2-ONLY WARNING]${NC} $1"
}

log "Checking for V2-only architecture compliance..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [[ -z "$STAGED_FILES" ]]; then
    log "No staged files to check"
    exit 0
fi

VIOLATIONS=0
DEPRECATED_FILES=()
ALLOWED_FILES=()

# Check each staged file
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    log "Checking: $file"
    
    # Check if file is in deprecated V1 directories
    if [[ "$file" =~ $DEPRECATED_PATHS ]]; then
        VIOLATIONS=$((VIOLATIONS + 1))
        DEPRECATED_FILES+=("$file")
        continue
    fi
    
    # Check if file is in allowed locations
    if [[ "$file" =~ $ALLOWED_V2_PATHS ]] || [[ "$file" =~ $ALLOWED_GLOBAL_FILES ]]; then
        ALLOWED_FILES+=("$file")
        continue
    fi
    
    # File is in root or other location - check if it's allowed
    if [[ ! "$file" =~ / ]]; then
        # Root level file - check if it's in allowed list
        if [[ "$file" =~ $ALLOWED_GLOBAL_FILES ]]; then
            ALLOWED_FILES+=("$file")
        else
            warning "Root level file modification detected: $file"
        fi
    else
        # Other directory - might be okay
        ALLOWED_FILES+=("$file")
    fi
    
done <<< "$STAGED_FILES"

# Report results
if [[ $VIOLATIONS -gt 0 ]]; then
    error "V1 directory modifications detected!"
    echo
    echo -e "${RED}The following files are in deprecated V1 directories:${NC}"
    for file in "${DEPRECATED_FILES[@]}"; do
        echo "  ❌ $file"
    done
    echo
    echo -e "${YELLOW}BookedBarber V2 Architecture Policy:${NC}"
    echo "  ✅ ALLOWED: backend-v2/          (V2 Backend - FastAPI)"
    echo "  ✅ ALLOWED: backend-v2/frontend-v2/  (V2 Frontend - Next.js)"
    echo "  ✅ ALLOWED: scripts/             (Automation scripts)"
    echo "  ✅ ALLOWED: docs/                (Documentation)"
    echo "  ✅ ALLOWED: monitoring/          (Monitoring config)"
    echo "  ✅ ALLOWED: hooks/               (Git hooks)"
    echo "  ❌ BLOCKED: backend/             (V1 Backend - DEPRECATED)"
    echo "  ❌ BLOCKED: frontend/            (V1 Frontend - DEPRECATED)"
    echo
    echo -e "${YELLOW}Why this policy exists:${NC}"
    echo "  • V1 codebase is deprecated and no longer maintained"
    echo "  • All new features must be implemented in V2"
    echo "  • V2 uses modern tech stack (FastAPI + Next.js 14)"
    echo "  • Prevents accidental modifications to legacy code"
    echo "  • Ensures consistent development practices"
    echo
    echo -e "${YELLOW}How to fix this:${NC}"
    echo "  1. Unstage the deprecated files:"
    for file in "${DEPRECATED_FILES[@]}"; do
        echo "     git reset HEAD $file"
    done
    echo
    echo "  2. If you need to make similar changes in V2:"
    echo "     • Look for equivalent files in backend-v2/"
    echo "     • Check backend-v2/frontend-v2/ for frontend changes"
    echo "     • Create new files in V2 structure if needed"
    echo
    echo "  3. If this is a legitimate V1 fix (rare):"
    echo "     • Discuss with team lead first"
    echo "     • Use: git commit --no-verify (not recommended)"
    echo
    echo -e "${RED}Migration Guide:${NC}"
    echo "  V1 backend/   → V2 backend-v2/"
    echo "  V1 frontend/  → V2 backend-v2/frontend-v2/"
    echo
    exit 1
fi

# Success message
if [[ ${#ALLOWED_FILES[@]} -gt 0 ]]; then
    success "All staged files comply with V2-only architecture!"
    log "Approved files:"
    for file in "${ALLOWED_FILES[@]}"; do
        echo "  ✅ $file"
    done
else
    log "No files to validate"
fi

exit 0