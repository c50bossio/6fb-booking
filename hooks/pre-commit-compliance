#!/bin/bash

# BookedBarber V2 - GDPR/PCI Compliance Hook
# Validates data protection compliance for barber booking platform
# Checks PII handling, encryption usage, audit logging, and compliance patterns
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify (NOT RECOMMENDED)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BACKEND_DIR="backend-v2"
FRONTEND_DIR="backend-v2/frontend-v2"
COMPLIANCE_LOG="logs/compliance_audit.log"
PII_FIELDS=("email" "phone" "name" "address" "ssn" "credit_card" "customer_id" "user_id")
SENSITIVE_TABLES=("users" "clients" "payments" "appointments" "client_notes")

# Log function
log() {
    echo -e "${BLUE}[COMPLIANCE]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [COMPLIANCE] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

error() {
    echo -e "${RED}[COMPLIANCE ERROR]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [COMPLIANCE ERROR] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

success() {
    echo -e "${GREEN}[COMPLIANCE SUCCESS]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [COMPLIANCE SUCCESS] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

warning() {
    echo -e "${YELLOW}[COMPLIANCE WARNING]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [COMPLIANCE WARNING] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

compliance_alert() {
    echo -e "${PURPLE}[COMPLIANCE ALERT]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [COMPLIANCE ALERT] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

gdpr_violation() {
    echo -e "${CYAN}[GDPR VIOLATION]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [GDPR VIOLATION] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

pci_violation() {
    echo -e "${PURPLE}[PCI VIOLATION]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [PCI VIOLATION] $1" >> "$COMPLIANCE_LOG" 2>/dev/null || true
}

# Create logs directory if it doesn't exist
mkdir -p logs

# Check PII logging violations
check_pii_logging() {
    local file="$1"
    local violations=0
    
    # Check for PII in log statements
    local log_patterns=("logger\." "log\." "print(" "console\." "debug(" "info(" "warn(" "error(")
    
    for pattern in "${log_patterns[@]}"; do
        if grep -q "$pattern" "$file" 2>/dev/null; then
            # Check if PII fields are being logged
            for pii_field in "${PII_FIELDS[@]}"; do
                if grep -E "$pattern.*$pii_field" "$file" 2>/dev/null; then
                    gdpr_violation "PII field '$pii_field' found in logging statement in $file"
                    violations=$((violations + 1))
                fi
            done
        fi
    done
    
    # Check for email addresses in logs
    if grep -E "(logger\.|log\.|print\(|console\.).*@.*\." "$file" 2>/dev/null; then
        gdpr_violation "Email address found in logging statement in $file"
        violations=$((violations + 1))
    fi
    
    # Check for phone numbers in logs
    if grep -E "(logger\.|log\.|print\(|console\.).*[0-9]{3}[.-]?[0-9]{3}[.-]?[0-9]{4}" "$file" 2>/dev/null; then
        gdpr_violation "Phone number found in logging statement in $file"
        violations=$((violations + 1))
    fi
    
    return $violations
}

# Check data encryption compliance
check_encryption_usage() {
    local file="$1"
    local violations=0
    
    # Check for password storage without hashing
    if grep -qE "(\.password\s*=|password.*=.*['\"][^'\"]*['\"])" "$file" 2>/dev/null; then
        if ! grep -qE "(bcrypt|scrypt|argon2|pbkdf2|hash)" "$file" 2>/dev/null; then
            pci_violation "Password storage without proper hashing in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for credit card data handling
    if grep -qE "(credit_card|card_number|cvv|cvc)" "$file" 2>/dev/null; then
        if ! grep -qE "(encrypt|stripe|tokenize)" "$file" 2>/dev/null; then
            pci_violation "Credit card data handling without encryption/tokenization in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for sensitive data in database models
    if echo "$file" | grep -q "models" && grep -qE "(ssn|social_security|credit_card|bank_account)" "$file" 2>/dev/null; then
        if ! grep -qE "(encrypted|encrypt_field|crypto)" "$file" 2>/dev/null; then
            pci_violation "Sensitive data field without encryption in model: $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for API keys in plain text
    if grep -qE "(api_key|secret_key|private_key)" "$file" 2>/dev/null; then
        if ! grep -qE "(encrypt|hash|secure)" "$file" 2>/dev/null; then
            warning "API key handling without encryption in $file"
            violations=$((violations + 1))
        fi
    fi
    
    return $violations
}

# Check audit logging compliance
check_audit_logging() {
    local file="$1"
    local violations=0
    
    # Check for sensitive operations without audit logging
    local sensitive_operations=("delete" "update.*user" "update.*client" "payment" "refund" "cancel")
    
    for operation in "${sensitive_operations[@]}"; do
        if grep -qiE "$operation" "$file" 2>/dev/null; then
            if ! grep -qE "(audit|log|track|record)" "$file" 2>/dev/null; then
                compliance_alert "Sensitive operation '$operation' without audit logging in $file"
                violations=$((violations + 1))
            fi
        fi
    done
    
    # Check for authentication events
    if grep -qE "(login|logout|auth|register)" "$file" 2>/dev/null; then
        if ! grep -qE "(audit|log)" "$file" 2>/dev/null; then
            compliance_alert "Authentication event without audit logging in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for data access logging
    if grep -qE "(SELECT.*users|SELECT.*clients|SELECT.*payments)" "$file" 2>/dev/null; then
        if ! grep -qE "(audit|log)" "$file" 2>/dev/null; then
            compliance_alert "Sensitive data access without audit logging in $file"
            violations=$((violations + 1))
        fi
    fi
    
    return $violations
}

# Check GDPR compliance patterns
check_gdpr_compliance() {
    local file="$1"
    local violations=0
    
    # Check for data collection without consent
    if grep -qE "(collect.*data|store.*information|save.*user)" "$file" 2>/dev/null; then
        if ! grep -qE "(consent|agree|opt.*in|permission)" "$file" 2>/dev/null; then
            gdpr_violation "Data collection without consent mechanism in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for data retention policies
    if echo "$file" | grep -qE "(model|schema)" && grep -qE "(created_at|timestamp)" "$file" 2>/dev/null; then
        if ! grep -qE "(delete|retention|expire|cleanup)" "$file" 2>/dev/null; then
            gdpr_violation "Data model without retention/deletion policy in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for data export functionality (Right to Portability)
    if echo "$file" | grep -qE "(export|download)" && grep -qE "(user.*data|client.*data)" "$file" 2>/dev/null; then
        if ! grep -qE "(json|csv|xml|format)" "$file" 2>/dev/null; then
            gdpr_violation "Data export without structured format in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for data deletion (Right to Erasure)
    if grep -qE "(delete.*user|remove.*client|erase.*data)" "$file" 2>/dev/null; then
        if ! grep -qE "(cascade|related|complete)" "$file" 2>/dev/null; then
            gdpr_violation "User deletion without cascading data removal in $file"
            violations=$((violations + 1))
        fi
    fi
    
    return $violations
}

# Check data minimization principles
check_data_minimization() {
    local file="$1"
    local violations=0
    
    # Check for excessive data collection
    if grep -qE "(SELECT \*|\.all\(\))" "$file" 2>/dev/null; then
        if grep -qE "(users|clients|payments)" "$file" 2>/dev/null; then
            gdpr_violation "Excessive data selection (SELECT *) from sensitive tables in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for unnecessary personal data fields
    local unnecessary_fields=("mother_maiden_name" "full_ssn" "birth_certificate" "passport_number")
    for field in "${unnecessary_fields[@]}"; do
        if grep -q "$field" "$file" 2>/dev/null; then
            gdpr_violation "Unnecessary personal data field '$field' in $file"
            violations=$((violations + 1))
        fi
    done
    
    return $violations
}

# Check PCI DSS compliance
check_pci_compliance() {
    local file="$1"
    local violations=0
    
    # Check for card data storage
    if grep -qE "(card_number|credit_card|debit_card|cvv|cvc|expiry)" "$file" 2>/dev/null; then
        if ! grep -qE "(stripe|tokenize|encrypt)" "$file" 2>/dev/null; then
            pci_violation "Card data handling without proper tokenization in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for payment logging
    if grep -qE "(payment|transaction|charge)" "$file" 2>/dev/null && grep -qE "(log|print|debug)" "$file" 2>/dev/null; then
        pci_violation "Payment data in logs detected in $file"
        violations=$((violations + 1))
    fi
    
    # Check for secure transmission
    if grep -qE "(http://.*payment|http://.*card)" "$file" 2>/dev/null; then
        pci_violation "Insecure payment data transmission (HTTP) in $file"
        violations=$((violations + 1))
    fi
    
    return $violations
}

# Check for proper access controls
check_access_controls() {
    local file="$1"
    local violations=0
    
    # Check for role-based access
    if grep -qE "(admin|user|client)" "$file" 2>/dev/null && grep -qE "(permission|auth|access)" "$file" 2>/dev/null; then
        if ! grep -qE "(role|rbac|authorize)" "$file" 2>/dev/null; then
            compliance_alert "Access control without role validation in $file"
            violations=$((violations + 1))
        fi
    fi
    
    # Check for API endpoint protection
    if grep -qE "(@app\.route|@router\.|def.*endpoint)" "$file" 2>/dev/null; then
        if ! grep -qE "(require_auth|login_required|authenticate)" "$file" 2>/dev/null; then
            compliance_alert "API endpoint without authentication in $file"
            violations=$((violations + 1))
        fi
    fi
    
    return $violations
}

# Check for data breach notification compliance
check_breach_notification() {
    local file="$1"
    local violations=0
    
    # Check for error handling that might expose data
    if grep -qE "(except|catch|error)" "$file" 2>/dev/null; then
        if grep -qE "(user|client|email|phone)" "$file" 2>/dev/null; then
            if ! grep -qE "(sanitize|clean|mask)" "$file" 2>/dev/null; then
                gdpr_violation "Error handling may expose personal data in $file"
                violations=$((violations + 1))
            fi
        fi
    fi
    
    return $violations
}

# Main compliance scanning function
scan_file_for_compliance() {
    local file="$1"
    local total_violations=0
    
    # Skip binary files
    if ! file "$file" | grep -q "text"; then
        return 0
    fi
    
    # Skip certain file types
    case "$file" in
        *.jpg|*.jpeg|*.png|*.gif|*.ico|*.svg|*.pdf|*.zip|*.tar|*.gz)
            return 0
            ;;
        */node_modules/*|*/venv/*|*/.git/*|*/dist/*|*/build/*)
            return 0
            ;;
        *.log|*.db|*.sqlite)
            return 0
            ;;
    esac
    
    # Run all compliance checks
    check_pii_logging "$file"
    total_violations=$((total_violations + $?))
    
    check_encryption_usage "$file"
    total_violations=$((total_violations + $?))
    
    check_audit_logging "$file"
    total_violations=$((total_violations + $?))
    
    check_gdpr_compliance "$file"
    total_violations=$((total_violations + $?))
    
    check_data_minimization "$file"
    total_violations=$((total_violations + $?))
    
    check_pci_compliance "$file"
    total_violations=$((total_violations + $?))
    
    check_access_controls "$file"
    total_violations=$((total_violations + $?))
    
    check_breach_notification "$file"
    total_violations=$((total_violations + $?))
    
    return $total_violations
}

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [[ -z "$STAGED_FILES" ]]; then
    log "No files staged for commit, skipping compliance scan"
    exit 0
fi

log "Starting GDPR/PCI compliance scan..."
log "Checking for: PII logging, encryption usage, audit logging, data protection"

TOTAL_VIOLATIONS=0
GDPR_VIOLATIONS=0
PCI_VIOLATIONS=0
FILES_SCANNED=0
CRITICAL_VIOLATIONS=()

# Scan each staged file
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    # Skip deleted files
    if [[ ! -f "$file" ]]; then
        continue
    fi
    
    log "Scanning: $file"
    FILES_SCANNED=$((FILES_SCANNED + 1))
    
    file_violations=0
    scan_file_for_compliance "$file"
    file_violations=$?
    
    if [[ $file_violations -gt 0 ]]; then
        TOTAL_VIOLATIONS=$((TOTAL_VIOLATIONS + file_violations))
        
        # Count specific violation types
        if grep -qE "GDPR VIOLATION" <<< "$(cat "$COMPLIANCE_LOG" 2>/dev/null | tail -10)"; then
            GDPR_VIOLATIONS=$((GDPR_VIOLATIONS + 1))
        fi
        
        if grep -qE "PCI VIOLATION" <<< "$(cat "$COMPLIANCE_LOG" 2>/dev/null | tail -10)"; then
            PCI_VIOLATIONS=$((PCI_VIOLATIONS + 1))
            CRITICAL_VIOLATIONS+=("$file: PCI DSS compliance violation")
        fi
    fi
done <<< "$STAGED_FILES"

# Report results
log "Compliance scan completed. Files scanned: $FILES_SCANNED"

if [[ $TOTAL_VIOLATIONS -eq 0 ]]; then
    success "No compliance violations detected!"
    success "Code meets GDPR and PCI DSS requirements"
    exit 0
fi

# Display violations found
echo
error "Compliance violations detected in staged files!"
echo -e "${RED}═══════════════════════════════════════════════════════════════════════════════${NC}"
echo -e "${RED}                           COMPLIANCE VIOLATIONS                               ${NC}"
echo -e "${RED}═══════════════════════════════════════════════════════════════════════════════${NC}"
echo
echo -e "${YELLOW}Total Violations: ${RED}$TOTAL_VIOLATIONS${NC}"
echo -e "${YELLOW}GDPR Violations: ${CYAN}$GDPR_VIOLATIONS${NC}"
echo -e "${YELLOW}PCI DSS Violations: ${PURPLE}$PCI_VIOLATIONS${NC}"
echo -e "${YELLOW}Files Scanned: ${BLUE}$FILES_SCANNED${NC}"
echo

if [[ ${#CRITICAL_VIOLATIONS[@]} -gt 0 ]]; then
    echo -e "${RED}Critical Compliance Violations:${NC}"
    for violation in "${CRITICAL_VIOLATIONS[@]}"; do
        echo -e "  ${RED}❌ $violation${NC}"
    done
    echo
fi

echo -e "${YELLOW}Compliance Categories Checked:${NC}"
echo -e "  ${CYAN}•${NC} GDPR - General Data Protection Regulation"
echo -e "  ${PURPLE}•${NC} PCI DSS - Payment Card Industry Data Security Standard"
echo -e "  ${BLUE}•${NC} Data Minimization and Privacy by Design"
echo -e "  ${GREEN}•${NC} Audit Logging and Access Controls"
echo -e "  ${YELLOW}•${NC} Encryption and Data Protection"
echo

echo -e "${YELLOW}Compliance Remediation Guide:${NC}"
echo
echo -e "${CYAN}GDPR Compliance Fixes:${NC}"
echo "  1. Remove PII from logging statements"
echo "  2. Implement data retention policies"
echo "  3. Add consent mechanisms for data collection"
echo "  4. Ensure data portability (export functionality)"
echo "  5. Implement right to erasure (complete deletion)"
echo "  6. Use data minimization (avoid SELECT *)"
echo
echo -e "${PURPLE}PCI DSS Compliance Fixes:${NC}"
echo "  1. Never store credit card data directly"
echo "  2. Use Stripe tokenization for payment processing"
echo "  3. Encrypt sensitive payment information"
echo "  4. Remove payment data from logs"
echo "  5. Use HTTPS for all payment communications"
echo "  6. Implement proper access controls"
echo
echo -e "${YELLOW}BookedBarber Specific Compliance:${NC}"
echo
echo -e "${YELLOW}Customer Data Protection:${NC}"
echo "  • Encrypt client notes and personal information"
echo "  • Hash/salt all passwords with bcrypt"
echo "  • Implement session timeout for sensitive operations"
echo "  • Add consent checkboxes for data collection"
echo
echo -e "${YELLOW}Payment Processing:${NC}"
echo "  • Use Stripe Connect for payment processing"
echo "  • Never log payment details or card numbers"
echo "  • Implement secure webhook handling"
echo "  • Add payment audit logging"
echo
echo -e "${YELLOW}Appointment Data:${NC}"
echo "  • Encrypt appointment notes if sensitive"
echo "  • Implement data retention for appointments"
echo "  • Add client consent for service records"
echo "  • Audit all appointment modifications"
echo
echo -e "${YELLOW}Code Examples:${NC}"
echo
echo -e "${YELLOW}Bad - PII in logs:${NC}"
echo "  logger.info(f'User {user.email} logged in')  # GDPR violation"
echo
echo -e "${YELLOW}Good - Sanitized logging:${NC}"
echo "  logger.info(f'User {user.id} logged in')  # Safe"
echo
echo -e "${YELLOW}Bad - Plain text passwords:${NC}"
echo "  user.password = request.form['password']  # PCI violation"
echo
echo -e "${YELLOW}Good - Hashed passwords:${NC}"
echo "  user.password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())"
echo
echo -e "${YELLOW}Bad - Card data storage:${NC}"
echo "  payment.card_number = card_number  # PCI violation"
echo
echo -e "${YELLOW}Good - Tokenized payments:${NC}"
echo "  payment.stripe_token = stripe_token  # Compliant"
echo

echo -e "${YELLOW}Compliance Tools and Resources:${NC}"
echo "  • GDPR Compliance Checker: https://gdpr.eu/checklist/"
echo "  • PCI DSS Self-Assessment: https://www.pcisecuritystandards.org/"
echo "  • Privacy by Design: https://iapp.org/resources/article/privacy-by-design/"
echo "  • Data Protection Impact Assessment (DPIA) templates"
echo

echo -e "${YELLOW}Emergency bypass (HIGH RISK):${NC}"
echo "  git commit --no-verify -m 'Compliance fix needed'"
echo
echo -e "${YELLOW}For compliance support:${NC}"
echo "  • Review: hooks/pre-commit-compliance"
echo "  • Contact: Legal/Compliance team"
echo "  • Documentation: COMPLIANCE.md"
echo

compliance_alert "Compliance scan completed with $TOTAL_VIOLATIONS violations (GDPR: $GDPR_VIOLATIONS, PCI: $PCI_VIOLATIONS)"

# Fail the commit if PCI violations found (critical for payment processing)
if [[ $PCI_VIOLATIONS -gt 0 ]]; then
    error "PCI DSS violations detected - commit blocked for payment security"
    exit 1
fi

# Warn but allow commit for GDPR issues (can be fixed in follow-up)
if [[ $GDPR_VIOLATIONS -gt 0 ]]; then
    warning "GDPR violations detected - please address in follow-up commit"
fi

# Allow commit for minor compliance issues
if [[ $TOTAL_VIOLATIONS -gt 0 ]]; then
    warning "Compliance issues detected but allowing commit"
    warning "Address these issues promptly to maintain compliance"
fi

exit 0