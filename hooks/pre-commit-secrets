#!/bin/bash

# BookedBarber V2 - Advanced Secrets Detection Hook
# Enhanced secrets detection with custom patterns for barber booking platform
# Detects PII, API keys, passwords, tokens, and security vulnerabilities
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify (NOT RECOMMENDED)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
BACKEND_DIR="backend-v2"
FRONTEND_DIR="backend-v2/frontend-v2"
SECRETS_LOG="logs/secrets_audit.log"
MAX_FILE_SIZE="1000000"  # 1MB max file size to scan

# Log function
log() {
    echo -e "${BLUE}[SECRETS]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SECRETS] $1" >> "$SECRETS_LOG" 2>/dev/null || true
}

error() {
    echo -e "${RED}[SECRETS ERROR]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SECRETS ERROR] $1" >> "$SECRETS_LOG" 2>/dev/null || true
}

success() {
    echo -e "${GREEN}[SECRETS SUCCESS]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SECRETS SUCCESS] $1" >> "$SECRETS_LOG" 2>/dev/null || true
}

warning() {
    echo -e "${YELLOW}[SECRETS WARNING]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SECRETS WARNING] $1" >> "$SECRETS_LOG" 2>/dev/null || true
}

security_alert() {
    echo -e "${PURPLE}[SECURITY ALERT]${NC} $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SECURITY ALERT] $1" >> "$SECRETS_LOG" 2>/dev/null || true
}

# Create logs directory if it doesn't exist
mkdir -p logs

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Advanced secret patterns for barber booking platform
check_stripe_secrets() {
    local file="$1"
    local issues=0
    
    # Stripe API keys
    if grep -q "sk_test_[a-zA-Z0-9]{99}" "$file" 2>/dev/null; then
        error "Stripe test secret key found in $file"
        issues=$((issues + 1))
    fi
    
    if grep -q "sk_live_[a-zA-Z0-9]{99}" "$file" 2>/dev/null; then
        error "Stripe LIVE secret key found in $file (CRITICAL)"
        issues=$((issues + 1))
    fi
    
    if grep -q "pk_test_[a-zA-Z0-9]{99}" "$file" 2>/dev/null; then
        warning "Stripe test publishable key found in $file (should be in env)"
        issues=$((issues + 1))
    fi
    
    if grep -q "pk_live_[a-zA-Z0-9]{99}" "$file" 2>/dev/null; then
        warning "Stripe live publishable key found in $file (should be in env)"
        issues=$((issues + 1))
    fi
    
    # Stripe webhook secrets
    if grep -q "whsec_[a-zA-Z0-9]{32,}" "$file" 2>/dev/null; then
        error "Stripe webhook secret found in $file"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_google_secrets() {
    local file="$1"
    local issues=0
    
    # Google API keys
    if grep -q "AIza[0-9A-Za-z_-]{35}" "$file" 2>/dev/null; then
        error "Google API key found in $file"
        issues=$((issues + 1))
    fi
    
    # Google OAuth client secrets
    if grep -qE "client_secret.*['\"][a-zA-Z0-9_-]{24}['\"]" "$file" 2>/dev/null; then
        error "Google OAuth client secret found in $file"
        issues=$((issues + 1))
    fi
    
    # Google service account keys (JSON structure)
    if grep -q '"private_key"' "$file" 2>/dev/null && grep -q '"client_email"' "$file" 2>/dev/null; then
        error "Google service account private key found in $file"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_twilio_sendgrid_secrets() {
    local file="$1"
    local issues=0
    
    # Twilio API keys
    if grep -qE "AC[a-zA-Z0-9]{32}" "$file" 2>/dev/null; then
        error "Twilio Account SID found in $file"
        issues=$((issues + 1))
    fi
    
    if grep -qE "SK[a-zA-Z0-9]{32}" "$file" 2>/dev/null; then
        error "Twilio API Key SID found in $file"
        issues=$((issues + 1))
    fi
    
    # SendGrid API keys
    if grep -qE "SG\.[a-zA-Z0-9_-]{22}\.[a-zA-Z0-9_-]{43}" "$file" 2>/dev/null; then
        error "SendGrid API key found in $file"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_jwt_database_secrets() {
    local file="$1"
    local issues=0
    
    # JWT secrets (common patterns)
    if grep -qiE "(jwt_secret|jwt_key|secret_key).*['\"][a-zA-Z0-9_-]{32,}['\"]" "$file" 2>/dev/null; then
        error "JWT secret key found in $file"
        issues=$((issues + 1))
    fi
    
    # Database URLs with credentials
    if grep -qE "postgres://[^:]+:[^@]+@" "$file" 2>/dev/null; then
        error "PostgreSQL URL with credentials found in $file"
        issues=$((issues + 1))
    fi
    
    if grep -qE "mysql://[^:]+:[^@]+@" "$file" 2>/dev/null; then
        error "MySQL URL with credentials found in $file"
        issues=$((issues + 1))
    fi
    
    # Generic password patterns
    if grep -qiE "(password|passwd|pwd).*['\"][^'\"]{8,}['\"]" "$file" 2>/dev/null; then
        warning "Potential hardcoded password found in $file"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_pii_patterns() {
    local file="$1"
    local issues=0
    
    # Social Security Numbers
    if grep -qE "[0-9]{3}-[0-9]{2}-[0-9]{4}" "$file" 2>/dev/null; then
        error "Potential SSN found in $file (PII violation)"
        issues=$((issues + 1))
    fi
    
    # Credit card numbers (basic pattern)
    if grep -qE "[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}" "$file" 2>/dev/null; then
        error "Potential credit card number found in $file (PCI violation)"
        issues=$((issues + 1))
    fi
    
    # Phone numbers in logs/debug (GDPR concern)
    if grep -qE "phone.*['\"][0-9]{10,}['\"]" "$file" 2>/dev/null; then
        warning "Phone number in code/logs found in $file (GDPR concern)"
        issues=$((issues + 1))
    fi
    
    # Email addresses in logs/debug (GDPR concern)
    if grep -qE "email.*['\"][^'\"]*@[^'\"]*['\"]" "$file" 2>/dev/null; then
        warning "Email address in code/logs found in $file (GDPR concern)"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_environment_validation() {
    local file="$1"
    local issues=0
    
    # Check for improper environment variable usage
    if grep -qE "os\.environ\[.*\]" "$file" 2>/dev/null && ! grep -q "os.environ.get" "$file" 2>/dev/null; then
        warning "Direct os.environ access without default in $file (use os.environ.get)"
        issues=$((issues + 1))
    fi
    
    # Check for localhost in production-like configs
    if echo "$file" | grep -qE "(prod|production|deploy)" && grep -q "localhost" "$file" 2>/dev/null; then
        error "localhost URL found in production config: $file"
        issues=$((issues + 1))
    fi
    
    # Check for debug mode in production
    if echo "$file" | grep -qE "(prod|production)" && grep -qi "debug.*true" "$file" 2>/dev/null; then
        error "Debug mode enabled in production config: $file"
        issues=$((issues + 1))
    fi
    
    return $issues
}

check_placeholder_secrets() {
    local file="$1"
    local issues=0
    
    # Common placeholder patterns
    local placeholders=(
        "your_api_key_here"
        "replace_me"
        "changeme"
        "example_key"
        "test_key_123"
        "dummy_secret"
        "placeholder"
        "sk_test_123456789"
        "pk_test_123456789"
    )
    
    for placeholder in "${placeholders[@]}"; do
        if grep -qi "$placeholder" "$file" 2>/dev/null; then
            warning "Placeholder secret '$placeholder' found in $file"
            issues=$((issues + 1))
        fi
    done
    
    return $issues
}

# Main scanning function
scan_file_for_secrets() {
    local file="$1"
    local total_issues=0
    local file_size
    
    # Skip binary files and large files
    if ! file "$file" | grep -q "text"; then
        return 0
    fi
    
    file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
    if [[ $file_size -gt $MAX_FILE_SIZE ]]; then
        warning "Skipping large file: $file (${file_size} bytes)"
        return 0
    fi
    
    # Run all checks
    check_stripe_secrets "$file"
    total_issues=$((total_issues + $?))
    
    check_google_secrets "$file"
    total_issues=$((total_issues + $?))
    
    check_twilio_sendgrid_secrets "$file"
    total_issues=$((total_issues + $?))
    
    check_jwt_database_secrets "$file"
    total_issues=$((total_issues + $?))
    
    check_pii_patterns "$file"
    total_issues=$((total_issues + $?))
    
    check_environment_validation "$file"
    total_issues=$((total_issues + $?))
    
    check_placeholder_secrets "$file"
    total_issues=$((total_issues + $?))
    
    return $total_issues
}

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [[ -z "$STAGED_FILES" ]]; then
    log "No files staged for commit, skipping secrets scan"
    exit 0
fi

log "Starting advanced secrets detection scan..."
log "Scanning for: API keys, PII, passwords, tokens, database URLs, environment issues"

TOTAL_ISSUES=0
CRITICAL_ISSUES=0
FILES_SCANNED=0
SECURITY_VIOLATIONS=()

# Scan each staged file
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    # Skip deleted files
    if [[ ! -f "$file" ]]; then
        continue
    fi
    
    # Skip certain file types
    case "$file" in
        *.jpg|*.jpeg|*.png|*.gif|*.ico|*.svg|*.pdf|*.zip|*.tar|*.gz)
            continue
            ;;
        */node_modules/*|*/venv/*|*/.git/*|*/dist/*|*/build/*)
            continue
            ;;
        *.log|*.db|*.sqlite|*.db-shm|*.db-wal)
            continue
            ;;
    esac
    
    log "Scanning: $file"
    FILES_SCANNED=$((FILES_SCANNED + 1))
    
    file_issues=0
    scan_file_for_secrets "$file"
    file_issues=$?
    
    if [[ $file_issues -gt 0 ]]; then
        TOTAL_ISSUES=$((TOTAL_ISSUES + file_issues))
        
        # Check for critical issues (production keys, PII, etc.)
        if grep -qE "(sk_live_|PII|SSN|credit.card)" <<< "$(cat "$file" 2>/dev/null)"; then
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
            SECURITY_VIOLATIONS+=("$file: Critical security violation detected")
        fi
    fi
done <<< "$STAGED_FILES"

# Additional check for .env files in staged changes
if echo "$STAGED_FILES" | grep -qE "\.env"; then
    error "Environment files (.env) should not be committed!"
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
    SECURITY_VIOLATIONS+=(".env files: Should never be committed to repository")
fi

# Report results
log "Secrets scan completed. Files scanned: $FILES_SCANNED"

if [[ $TOTAL_ISSUES -eq 0 ]]; then
    success "No secrets or security issues detected!"
    exit 0
fi

# Display issues found
echo
error "Security violations detected in staged files!"
echo -e "${RED}═══════════════════════════════════════════════════════════════════════════════${NC}"
echo -e "${RED}                              SECURITY ALERT                                   ${NC}"
echo -e "${RED}═══════════════════════════════════════════════════════════════════════════════${NC}"
echo
echo -e "${YELLOW}Total Issues Found: ${RED}$TOTAL_ISSUES${NC}"
echo -e "${YELLOW}Critical Issues: ${RED}$CRITICAL_ISSUES${NC}"
echo -e "${YELLOW}Files Scanned: ${BLUE}$FILES_SCANNED${NC}"
echo

if [[ ${#SECURITY_VIOLATIONS[@]} -gt 0 ]]; then
    echo -e "${RED}Critical Security Violations:${NC}"
    for violation in "${SECURITY_VIOLATIONS[@]}"; do
        echo -e "  ${RED}❌ $violation${NC}"
    done
    echo
fi

echo -e "${YELLOW}Security Issue Categories Detected:${NC}"
echo -e "  ${RED}•${NC} API Keys and Tokens (Stripe, Google, Twilio, SendGrid)"
echo -e "  ${RED}•${NC} Database Connection Strings with Credentials"
echo -e "  ${RED}•${NC} JWT Secrets and Authentication Keys"
echo -e "  ${RED}•${NC} Personally Identifiable Information (PII)"
echo -e "  ${RED}•${NC} Environment Configuration Issues"
echo -e "  ${RED}•${NC} Placeholder or Test Credentials"
echo

echo -e "${YELLOW}Immediate Actions Required:${NC}"
echo
echo -e "${YELLOW}1. Remove Secrets from Code:${NC}"
echo "   • Move all API keys to environment variables"
echo "   • Use .env files (never commit them)"
echo "   • Update code to use os.environ.get() or process.env"
echo
echo -e "${YELLOW}2. For BookedBarber Specific Secrets:${NC}"
echo "   • Stripe keys: Use STRIPE_SECRET_KEY environment variable"
echo "   • Google Calendar: Store OAuth tokens in secure database fields"
echo "   • Database URL: Use DATABASE_URL environment variable"
echo "   • JWT Secret: Generate secure random key, store in JWT_SECRET"
echo
echo -e "${YELLOW}3. Clean Git History (if secrets already committed):${NC}"
echo "   • git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <file>'"
echo "   • Or use git-secrets or BFG Repo-Cleaner"
echo "   • Rotate any exposed credentials immediately"
echo
echo -e "${YELLOW}4. Environment Setup Example:${NC}"
echo "   # In .env file (never commit this)"
echo "   STRIPE_SECRET_KEY=sk_test_your_actual_key"
echo "   DATABASE_URL=postgresql://user:password@localhost/dbname"
echo "   JWT_SECRET=your_secure_random_string_here"
echo
echo -e "${YELLOW}5. Code Example - Before:${NC}"
echo "   # BAD - hardcoded secret"
echo "   stripe.api_key = 'sk_test_123456789'"
echo
echo -e "${YELLOW}   Code Example - After:${NC}"
echo "   # GOOD - environment variable"
echo "   stripe.api_key = os.environ.get('STRIPE_SECRET_KEY')"
echo

if [[ $CRITICAL_ISSUES -gt 0 ]]; then
    echo -e "${RED}⚠️  CRITICAL SECURITY VIOLATIONS DETECTED ⚠️${NC}"
    echo -e "${RED}This commit contains critical security issues that could expose customer data,${NC}"
    echo -e "${RED}payment information, or compromise the booking platform's security.${NC}"
    echo
    echo -e "${RED}COMMIT BLOCKED - Fix these issues before proceeding.${NC}"
    echo
fi

echo -e "${YELLOW}Security Tools for BookedBarber:${NC}"
echo "  • git-secrets: brew install git-secrets"
echo "  • detect-secrets: pip install detect-secrets"
echo "  • truffleHog: GitHub security scanning"
echo "  • Environment management: python-dotenv, node-env"
echo
echo -e "${YELLOW}Emergency bypass (NOT RECOMMENDED):${NC}"
echo "  git commit --no-verify -m 'Emergency fix'"
echo
echo -e "${YELLOW}For help:${NC}"
echo "  • Review: hooks/pre-commit-secrets"
echo "  • Contact: Security team"
echo "  • Docs: SECURITY.md in repository"
echo

security_alert "Secrets scan completed with $TOTAL_ISSUES issues ($CRITICAL_ISSUES critical)"

# Fail the commit if critical issues found
if [[ $CRITICAL_ISSUES -gt 0 ]]; then
    exit 1
fi

# Warn but allow commit for minor issues
if [[ $TOTAL_ISSUES -gt 0 ]]; then
    warning "Non-critical security issues detected but allowing commit"
    warning "Please address these issues in a follow-up commit"
fi

exit 0