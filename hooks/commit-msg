#!/bin/bash

# BookedBarber V2 - Commit Message Validation Hook
# Enforces conventional commits format: type(scope): description
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Log function
log() {
    echo -e "${BLUE}[COMMIT-MSG]${NC} $1"
}

error() {
    echo -e "${RED}[COMMIT-MSG ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[COMMIT-MSG SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[COMMIT-MSG WARNING]${NC} $1"
}

# Skip validation for merge commits, revert commits, and fixup commits
if [[ "$COMMIT_MSG" =~ ^(Merge|Revert|fixup!|squash!) ]]; then
    log "Skipping validation for special commit type"
    exit 0
fi

# Valid types and scopes for BookedBarber V2
VALID_TYPES="feat|fix|docs|style|refactor|test|chore"
VALID_SCOPES="auth|booking|payment|calendar|analytics|integration|review|marketing|ui|api|db|config|ci|security"

# Conventional commit pattern: type(scope): description
# Optional scope: type: description
PATTERN="^(${VALID_TYPES})(\(($VALID_SCOPES)\))?: .{1,72}$"

log "Validating commit message format..."
log "Message: '$COMMIT_MSG'"

# Validate commit message format
if [[ ! "$COMMIT_MSG" =~ $PATTERN ]]; then
    error "Invalid commit message format!"
    echo
    echo -e "${RED}Your commit message:${NC}"
    echo "  $COMMIT_MSG"
    echo
    echo -e "${YELLOW}Required format:${NC}"
    echo "  type(scope): description"
    echo "  type: description"
    echo
    echo -e "${YELLOW}Valid types:${NC}"
    echo "  feat     - New feature"
    echo "  fix      - Bug fix"
    echo "  docs     - Documentation changes"
    echo "  style    - Code style changes (formatting, etc.)"
    echo "  refactor - Code refactoring"
    echo "  test     - Adding or updating tests"
    echo "  chore    - Maintenance tasks"
    echo
    echo -e "${YELLOW}Valid scopes (optional):${NC}"
    echo "  auth        - Authentication & authorization"
    echo "  booking     - Appointment booking system"
    echo "  payment     - Payment processing & Stripe"
    echo "  calendar    - Calendar integration"
    echo "  analytics   - Business analytics & metrics"
    echo "  integration - Third-party integrations"
    echo "  review      - Review management system"
    echo "  marketing   - Marketing features & campaigns"
    echo "  ui          - User interface components"
    echo "  api         - API endpoints & routes"
    echo "  db          - Database & migrations"
    echo "  config      - Configuration changes"
    echo "  ci          - CI/CD pipeline"
    echo "  security    - Security improvements"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  ✅ feat(booking): add real-time availability check"
    echo "  ✅ fix(payment): resolve Stripe webhook validation"
    echo "  ✅ docs: update API documentation"
    echo "  ✅ chore(ci): update GitHub Actions workflow"
    echo
    echo -e "${RED}To bypass this check (not recommended):${NC}"
    echo "  git commit --no-verify"
    echo
    exit 1
fi

# Additional validations
if [[ ${#COMMIT_MSG} -gt 72 ]]; then
    error "Commit message is too long (${#COMMIT_MSG} characters, max 72)"
    echo "  Message: '$COMMIT_MSG'"
    echo "  Consider using a shorter description and add details in the commit body"
    exit 1
fi

if [[ ${#COMMIT_MSG} -lt 10 ]]; then
    error "Commit message is too short (${#COMMIT_MSG} characters, min 10)"
    echo "  Message: '$COMMIT_MSG'"
    echo "  Please provide a more descriptive commit message"
    exit 1
fi

# Check for common mistakes
if [[ "$COMMIT_MSG" =~ \.\s*$ ]]; then
    warning "Commit message ends with a period - consider removing it"
fi

if [[ "$COMMIT_MSG" =~ ^[A-Z] ]] && [[ ! "$COMMIT_MSG" =~ ^(${VALID_TYPES}) ]]; then
    warning "Commit message starts with uppercase - conventional commits should be lowercase"
fi

success "Commit message format is valid!"
exit 0