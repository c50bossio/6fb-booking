#!/bin/bash

# BookedBarber V2 - Integration Health Hook
# Validates third-party service configurations and connectivity
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKEND_DIR="backend-v2"
FRONTEND_DIR="backend-v2/frontend-v2"
MAX_RETRIES=3
TIMEOUT=30

# Critical integrations to check
CRITICAL_INTEGRATIONS=(
    "stripe"
    "google_calendar"
    "sendgrid"
    "twilio"
)

# API key patterns (for format validation only)
# Using functions instead of associative arrays for compatibility
get_api_key_pattern() {
    case "$1" in
        "stripe") echo "^(sk_test_|sk_live_|pk_test_|pk_live_)[a-zA-Z0-9]{20,}" ;;
        "google") echo "^[a-zA-Z0-9_-]{20,}" ;;
        "sendgrid") echo "^SG\.[a-zA-Z0-9_-]{20,}\.[a-zA-Z0-9_-]{20,}" ;;
        "twilio") echo "^[A-Z0-9]{32,34}$" ;;
        *) echo "" ;;
    esac
}

# Integration endpoints for connectivity testing
get_integration_endpoint() {
    case "$1" in
        "stripe") echo "https://api.stripe.com/v1/account" ;;
        "sendgrid") echo "https://api.sendgrid.com/v3/user/profile" ;;
        "google_calendar") echo "https://www.googleapis.com/calendar/v3/users/me/calendarList" ;;
        "twilio") echo "https://api.twilio.com/2010-04-01/Accounts.json" ;;
        *) echo "" ;;
    esac
}

# Log function
log() {
    echo -e "${BLUE}[INTEGRATION]${NC} $1"
}

error() {
    echo -e "${RED}[INTEGRATION ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[INTEGRATION SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[INTEGRATION WARNING]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Run command with timeout and retries
run_with_timeout() {
    local cmd="$1"
    local desc="$2"
    local retries=0
    
    while [[ $retries -lt $MAX_RETRIES ]]; do
        log "Running $desc (attempt $((retries + 1))/$MAX_RETRIES)..."
        
        if timeout $TIMEOUT bash -c "$cmd" 2>/dev/null; then
            return 0
        fi
        
        retries=$((retries + 1))
        if [[ $retries -lt $MAX_RETRIES ]]; then
            warning "$desc failed, retrying in 2 seconds..."
            sleep 2
        fi
    done
    
    return 1
}

# Validate API key format (without exposing the key)
validate_api_key_format() {
    local service="$1"
    local key="$2"
    
    if [[ -z "$key" ]]; then
        echo "MISSING"
        return
    fi
    
    # Don't validate if it's clearly a placeholder
    if [[ "$key" =~ (your_key|placeholder|example|test_key|sk_test_123|CHANGEME) ]]; then
        echo "PLACEHOLDER"
        return
    fi
    
    # Check format based on service
    local pattern=$(get_api_key_pattern "$service")
    
    case "$service" in
        "stripe")
            if [[ "$key" =~ $pattern ]]; then
                echo "VALID_FORMAT"
            else
                echo "INVALID_FORMAT"
            fi
            ;;
        "google"|"google_calendar")
            if [[ ${#key} -ge 20 ]]; then
                echo "VALID_FORMAT"
            else
                echo "INVALID_FORMAT"
            fi
            ;;
        "sendgrid")
            if [[ "$key" =~ $pattern ]]; then
                echo "VALID_FORMAT"
            else
                echo "INVALID_FORMAT"
            fi
            ;;
        "twilio")
            if [[ "$key" =~ $pattern ]]; then
                echo "VALID_FORMAT"
            else
                echo "INVALID_FORMAT"
            fi
            ;;
        *)
            if [[ ${#key} -ge 10 ]]; then
                echo "UNKNOWN_FORMAT_OK"
            else
                echo "TOO_SHORT"
            fi
            ;;
    esac
}

# Test integration endpoint connectivity
test_integration_connectivity() {
    local service="$1"
    local api_key="$2"
    
    local endpoint=$(get_integration_endpoint "$service")
    
    if [[ -z "$endpoint" ]]; then
        echo "NO_ENDPOINT_DEFINED"
        return
    fi
    
    # Don't test with placeholder keys
    if [[ "$api_key" =~ (your_key|placeholder|example|test_key|CHANGEME) ]]; then
        echo "PLACEHOLDER_KEY"
        return
    fi
    
    case "$service" in
        "stripe")
            # Test Stripe API with basic auth
            if command_exists curl; then
                local response=$(curl -s -w "%{http_code}" -u "$api_key:" "$endpoint" 2>/dev/null || echo "000")
                local http_code="${response: -3}"
                
                if [[ "$http_code" == "200" ]]; then
                    echo "CONNECTED"
                elif [[ "$http_code" == "401" ]]; then
                    echo "AUTH_FAILED"
                elif [[ "$http_code" == "000" ]]; then
                    echo "CONNECTION_FAILED"
                else
                    echo "HTTP_$http_code"
                fi
            else
                echo "CURL_NOT_AVAILABLE"
            fi
            ;;
        "sendgrid")
            # Test SendGrid API
            if command_exists curl; then
                local response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $api_key" "$endpoint" 2>/dev/null || echo "000")
                local http_code="${response: -3}"
                
                if [[ "$http_code" == "200" ]]; then
                    echo "CONNECTED"
                elif [[ "$http_code" == "401" ]]; then
                    echo "AUTH_FAILED"
                elif [[ "$http_code" == "000" ]]; then
                    echo "CONNECTION_FAILED"
                else
                    echo "HTTP_$http_code"
                fi
            else
                echo "CURL_NOT_AVAILABLE"
            fi
            ;;
        "google_calendar")
            # Test Google Calendar API (requires OAuth, so just test format)
            echo "FORMAT_CHECK_ONLY"
            ;;
        "twilio")
            # Test Twilio API
            if command_exists curl && [[ -n "$TWILIO_AUTH_TOKEN" ]]; then
                local response=$(curl -s -w "%{http_code}" -u "$api_key:$TWILIO_AUTH_TOKEN" "$endpoint" 2>/dev/null || echo "000")
                local http_code="${response: -3}"
                
                if [[ "$http_code" == "200" ]]; then
                    echo "CONNECTED"
                elif [[ "$http_code" == "401" ]]; then
                    echo "AUTH_FAILED"
                elif [[ "$http_code" == "000" ]]; then
                    echo "CONNECTION_FAILED"
                else
                    echo "HTTP_$http_code"
                fi
            else
                echo "INCOMPLETE_CREDENTIALS"
            fi
            ;;
        *)
            echo "UNKNOWN_SERVICE"
            ;;
    esac
}

# Check environment variables in files
check_env_file() {
    local env_file="$1"
    local env_vars=()
    
    if [[ ! -f "$env_file" ]]; then
        return
    fi
    
    # Extract environment variables
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
            continue
        fi
        
        # Extract variable name and value
        if [[ "$line" =~ ^([A-Z_][A-Z0-9_]*)=(.*)$ ]]; then
            local var_name="${BASH_REMATCH[1]}"
            local var_value="${BASH_REMATCH[2]}"
            
            # Remove quotes
            var_value=$(echo "$var_value" | sed 's/^["\x27]//; s/["\x27]$//')
            
            echo "ENV_VAR:$var_name:$var_value"
        fi
    done < "$env_file"
}

# Get integration-related environment variables
get_integration_env_vars() {
    local backend_env="$BACKEND_DIR/.env"
    local frontend_env="$FRONTEND_DIR/.env.local"
    
    # Create temporary files to simulate associative arrays for compatibility
    local integration_vars_file=$(mktemp)
    
    # Check backend .env file
    if [[ -f "$backend_env" ]]; then
        while IFS= read -r line; do
            if [[ "$line" =~ ^ENV_VAR:([^:]+):(.*)$ ]]; then
                local var_name="${BASH_REMATCH[1]}"
                local var_value="${BASH_REMATCH[2]}"
                echo "$var_name:$var_value" >> "$integration_vars_file"
            fi
        done <<< "$(check_env_file "$backend_env")"
    fi
    
    # Check frontend .env.local file
    if [[ -f "$frontend_env" ]]; then
        while IFS= read -r line; do
            if [[ "$line" =~ ^ENV_VAR:([^:]+):(.*)$ ]]; then
                local var_name="${BASH_REMATCH[1]}"
                local var_value="${BASH_REMATCH[2]}"
                echo "$var_name:$var_value" >> "$integration_vars_file"
            fi
        done <<< "$(check_env_file "$frontend_env")"
    fi
    
    # Output all integration-related variables
    while IFS=: read -r var_name var_value; do
        # Check if it's an integration-related variable
        if [[ "$var_name" =~ (STRIPE|GOOGLE|SENDGRID|TWILIO|CALENDAR|PAYMENT|SMS|EMAIL|API_KEY|SECRET|TOKEN) ]]; then
            echo "INTEGRATION_VAR:$var_name:$var_value"
        fi
    done < "$integration_vars_file"
    
    # Clean up temporary file
    rm -f "$integration_vars_file"
}

# Check for integration configuration files
check_integration_configs() {
    local config_issues=()
    
    # Check for common integration config files
    local config_files=(
        "$BACKEND_DIR/config.py"
        "$BACKEND_DIR/config_enhanced.py"
        "$BACKEND_DIR/services/stripe_integration_service.py"
        "$BACKEND_DIR/services/google_calendar_service.py"
        "$BACKEND_DIR/services/gmb_service.py"
        "$FRONTEND_DIR/lib/api.ts"
    )
    
    for config_file in "${config_files[@]}"; do
        if [[ -f "$config_file" ]]; then
            # Check for hardcoded credentials (security issue)
            if grep -q -E "(api_key|secret|token|password)\s*=\s*['\"][^'\"]{10,}['\"]" "$config_file"; then
                config_issues+=("$config_file: Potential hardcoded credentials detected")
            fi
            
            # Check for localhost URLs in production configs
            if grep -q -E "https?://localhost|127\.0\.0\.1" "$config_file"; then
                config_issues+=("$config_file: Localhost URLs detected in config")
            fi
        fi
    done
    
    for issue in "${config_issues[@]}"; do
        echo "CONFIG_ISSUE:$issue"
    done
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [[ -z "$STAGED_FILES" ]]; then
    log "No staged files to check"
    exit 0
fi

log "Starting integration health check..."

INTEGRATION_ISSUES=0
INTEGRATION_WARNINGS=0
INTEGRATION_FILES_MODIFIED=false

# Check if integration-related files were modified
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    # Check if file is integration-related
    if [[ "$file" =~ (service|integration|config|\.env) ]] || \
       [[ "$file" =~ (stripe|google|sendgrid|twilio|calendar|payment|sms|email) ]]; then
        INTEGRATION_FILES_MODIFIED=true
        log "Integration-related file modified: $file"
    fi
done <<< "$STAGED_FILES"

# If no integration files were modified, still do basic health check
log "Checking integration environment variables..."

# Get integration environment variables
INTEGRATION_ENV_VARS=$(get_integration_env_vars)

if [[ -z "$INTEGRATION_ENV_VARS" ]]; then
    warning "No integration environment variables found"
else
    local found_integrations_file=$(mktemp)
    
    # Process each integration variable
    while IFS= read -r line; do
        if [[ "$line" =~ ^INTEGRATION_VAR:([^:]+):(.*)$ ]]; then
            local var_name="${BASH_REMATCH[1]}"
            local var_value="${BASH_REMATCH[2]}"
            
            # Determine which integration this belongs to
            local service=""
            case "$var_name" in
                *STRIPE*) service="stripe" ;;
                *GOOGLE*|*CALENDAR*) service="google_calendar" ;;
                *SENDGRID*|*EMAIL*) service="sendgrid" ;;
                *TWILIO*|*SMS*) service="twilio" ;;
            esac
            
            if [[ -n "$service" ]]; then
                echo "$service" >> "$found_integrations_file"
                
                # Validate API key format
                if [[ "$var_name" =~ (KEY|SECRET|TOKEN) ]]; then
                    local format_check=$(validate_api_key_format "$service" "$var_value")
                    
                    case "$format_check" in
                        "MISSING")
                            error "$var_name is empty"
                            INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
                            ;;
                        "PLACEHOLDER")
                            warning "$var_name appears to be a placeholder"
                            INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
                            ;;
                        "INVALID_FORMAT")
                            error "$var_name has invalid format"
                            INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
                            ;;
                        "VALID_FORMAT"|"UNKNOWN_FORMAT_OK")
                            log "$var_name format is valid"
                            ;;
                        "TOO_SHORT")
                            warning "$var_name is too short"
                            INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
                            ;;
                    esac
                fi
            fi
        fi
    done <<< "$INTEGRATION_ENV_VARS"
    
    # Check if critical integrations are configured
    for integration in "${CRITICAL_INTEGRATIONS[@]}"; do
        if ! grep -q "^$integration$" "$found_integrations_file" 2>/dev/null; then
            warning "Critical integration '$integration' not configured"
            INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
        fi
    done
    
    # Clean up temporary file
    rm -f "$found_integrations_file"
fi

# Check integration configuration files
log "Checking integration configuration files..."
CONFIG_ISSUES=$(check_integration_configs)

if [[ -n "$CONFIG_ISSUES" ]]; then
    while IFS= read -r line; do
        if [[ "$line" =~ ^CONFIG_ISSUE:(.*)$ ]]; then
            error "${BASH_REMATCH[1]}"
            INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
        fi
    done <<< "$CONFIG_ISSUES"
fi

# Test connectivity for configured integrations (if requested or if integration files modified)
if [[ "$INTEGRATION_FILES_MODIFIED" == true ]] && command_exists curl; then
    log "Testing integration connectivity..."
    
    # Extract API keys for testing
    if [[ -n "$INTEGRATION_ENV_VARS" ]]; then
        local service_keys_file=$(mktemp)
        
        while IFS= read -r line; do
            if [[ "$line" =~ ^INTEGRATION_VAR:([^:]+):(.*)$ ]]; then
                local var_name="${BASH_REMATCH[1]}"
                local var_value="${BASH_REMATCH[2]}"
                
                case "$var_name" in
                    *STRIPE*KEY*) echo "stripe:$var_value" >> "$service_keys_file" ;;
                    *SENDGRID*KEY*) echo "sendgrid:$var_value" >> "$service_keys_file" ;;
                    *TWILIO*SID*) echo "twilio:$var_value" >> "$service_keys_file" ;;
                esac
            fi
        done <<< "$INTEGRATION_ENV_VARS"
        
        # Test each configured service
        while IFS=: read -r service api_key; do
            if [[ -n "$service" && -n "$api_key" ]]; then
                local connectivity_result=$(test_integration_connectivity "$service" "$api_key")
                
                case "$connectivity_result" in
                    "CONNECTED")
                        success "$service integration is healthy"
                        ;;
                    "AUTH_FAILED")
                        error "$service authentication failed"
                        INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
                        ;;
                    "CONNECTION_FAILED")
                        warning "$service connection failed (network issue?)"
                        INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
                        ;;
                    "PLACEHOLDER_KEY")
                        warning "$service using placeholder credentials"
                        INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
                        ;;
                    *)
                        warning "$service connectivity test: $connectivity_result"
                        INTEGRATION_WARNINGS=$((INTEGRATION_WARNINGS + 1))
                        ;;
                esac
            fi
        done < "$service_keys_file"
        
        # Clean up temporary file
        rm -f "$service_keys_file"
    fi
else
    log "Skipping connectivity tests (no integration files modified or curl unavailable)"
fi

# Report results
if [[ $INTEGRATION_ISSUES -gt 0 ]]; then
    error "Integration health issues detected!"
    echo
    echo -e "${YELLOW}How to fix integration issues:${NC}"
    echo
    echo -e "${YELLOW}1. Environment Configuration:${NC}"
    echo "   • Check .env files in backend-v2/ and backend-v2/frontend-v2/"
    echo "   • Ensure all API keys follow the correct format"
    echo "   • Replace placeholder values with real credentials"
    echo "   • Never commit real credentials to version control"
    echo
    echo -e "${YELLOW}2. API Key Formats:${NC}"
    echo "   • Stripe: sk_test_... or sk_live_... (secret keys)"
    echo "   • SendGrid: SG.xxx.xxx format"
    echo "   • Twilio: 32-34 character alphanumeric SID"
    echo "   • Google: Long base64-style strings"
    echo
    echo -e "${YELLOW}3. Testing Integrations:${NC}"
    echo "   • Use test/sandbox keys for development"
    echo "   • Verify credentials in respective service dashboards"
    echo "   • Check service status pages for outages"
    echo "   • Ensure webhook URLs are accessible"
    echo
    echo -e "${YELLOW}4. Security Best Practices:${NC}"
    echo "   • Store credentials in environment variables only"
    echo "   • Use different keys for dev/staging/production"
    echo "   • Rotate keys regularly"
    echo "   • Monitor API usage and rate limits"
    echo
    echo -e "${RED}To bypass this check (not recommended):${NC}"
    echo "   git commit --no-verify"
    echo
    exit 1
fi

# Show warnings but don't block commit
if [[ $INTEGRATION_WARNINGS -gt 0 ]]; then
    warning "Integration health warnings detected ($INTEGRATION_WARNINGS warnings)"
    warning "Consider addressing these issues when possible"
    echo
    echo -e "${YELLOW}Integration Health Checklist:${NC}"
    echo "   ✓ Review placeholder credentials"
    echo "   ✓ Test integrations in staging environment"
    echo "   ✓ Verify webhook endpoints are accessible"
    echo "   ✓ Check service quotas and rate limits"
    echo "   ✓ Monitor integration error rates in production"
    echo
fi

success "Integration health check completed!"
if [[ $INTEGRATION_WARNINGS -eq 0 ]]; then
    log "All integrations appear healthy"
else
    log "Minor warnings detected but not blocking commit"
fi
exit 0