#!/bin/bash

# BookedBarber V2 - Dependency Security Hook
# Scans dependencies for known vulnerabilities before commit
# 
# Usage: This hook runs automatically on git commit
# Can be bypassed with: git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKEND_DIR="backend-v2"
FRONTEND_DIR="backend-v2/frontend-v2"
MAX_RETRIES=3
TIMEOUT=30

# Log function
log() {
    echo -e "${BLUE}[SECURITY]${NC} $1"
}

error() {
    echo -e "${RED}[SECURITY ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SECURITY SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[SECURITY WARNING]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Run command with timeout and retries
run_with_timeout() {
    local cmd="$1"
    local desc="$2"
    local retries=0
    
    while [[ $retries -lt $MAX_RETRIES ]]; do
        log "Running $desc (attempt $((retries + 1))/$MAX_RETRIES)..."
        
        if timeout $TIMEOUT bash -c "$cmd" 2>/dev/null; then
            return 0
        fi
        
        retries=$((retries + 1))
        if [[ $retries -lt $MAX_RETRIES ]]; then
            warning "$desc failed, retrying in 2 seconds..."
            sleep 2
        fi
    done
    
    return 1
}

# Check for staged dependency files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)
NEEDS_PYTHON_CHECK=false
NEEDS_NODE_CHECK=false

# Check if dependency files are staged
while IFS= read -r file; do
    if [[ -z "$file" ]]; then
        continue
    fi
    
    case "$file" in
        "$BACKEND_DIR/requirements.txt"|"$BACKEND_DIR/requirements-dev.txt"|"$BACKEND_DIR/pyproject.toml")
            NEEDS_PYTHON_CHECK=true
            ;;
        "$FRONTEND_DIR/package.json"|"$FRONTEND_DIR/package-lock.json"|"$FRONTEND_DIR/yarn.lock")
            NEEDS_NODE_CHECK=true
            ;;
    esac
done <<< "$STAGED_FILES"

log "Starting dependency security scan..."

SECURITY_ISSUES=0
PYTHON_ISSUES=()
NODE_ISSUES=()

# Python Security Check
if [[ "$NEEDS_PYTHON_CHECK" == true ]] || [[ -f "$BACKEND_DIR/requirements.txt" ]]; then
    log "Checking Python dependencies for security vulnerabilities..."
    
    if [[ ! -f "$BACKEND_DIR/requirements.txt" ]]; then
        warning "Python requirements.txt not found, skipping Python security check"
    else
        # Check if safety is installed
        if command_exists safety; then
            log "Using safety to check Python dependencies..."
            
            if run_with_timeout "cd $BACKEND_DIR && safety check --json" "Python security scan"; then
                success "Python dependencies passed security check"
            else
                # Try basic safety check without JSON
                if cd "$BACKEND_DIR" && safety check --short-report 2>/dev/null; then
                    success "Python dependencies passed basic security check"
                else
                    error "Python dependencies have security vulnerabilities!"
                    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
                    PYTHON_ISSUES+=("Critical vulnerabilities found in Python dependencies")
                fi
            fi
        elif command_exists pip; then
            # Fallback: use pip-audit if available
            if command_exists pip-audit; then
                log "Using pip-audit to check Python dependencies..."
                
                if run_with_timeout "cd $BACKEND_DIR && pip-audit --desc --format=json" "Python pip-audit scan"; then
                    success "Python dependencies passed pip-audit check"
                else
                    warning "pip-audit found potential issues in Python dependencies"
                    # Don't block commit for pip-audit warnings, just warn
                fi
            else
                warning "Neither 'safety' nor 'pip-audit' found, skipping Python security check"
                warning "Install safety: pip install safety"
            fi
        else
            warning "Python/pip not found, skipping Python security check"
        fi
    fi
fi

# Node.js Security Check
if [[ "$NEEDS_NODE_CHECK" == true ]] || [[ -f "$FRONTEND_DIR/package.json" ]]; then
    log "Checking Node.js dependencies for security vulnerabilities..."
    
    if [[ ! -f "$FRONTEND_DIR/package.json" ]]; then
        warning "Frontend package.json not found, skipping Node.js security check"
    else
        if command_exists npm; then
            log "Using npm audit to check Node.js dependencies..."
            
            # Check if node_modules exists
            if [[ ! -d "$FRONTEND_DIR/node_modules" ]]; then
                warning "node_modules not found, installing dependencies first..."
                if ! run_with_timeout "cd $FRONTEND_DIR && npm install --silent" "npm install"; then
                    warning "Failed to install npm dependencies, skipping security check"
                else
                    # Run audit after successful install
                    if run_with_timeout "cd $FRONTEND_DIR && npm audit --audit-level=high --json" "npm audit"; then
                        success "Node.js dependencies passed security check"
                    else
                        # Try basic audit without JSON
                        if cd "$FRONTEND_DIR" && npm audit --audit-level=high 2>/dev/null; then
                            success "Node.js dependencies passed basic security check"
                        else
                            # Check audit level
                            AUDIT_OUTPUT=$(cd "$FRONTEND_DIR" && npm audit --json 2>/dev/null || echo '{}')
                            HIGH_VULNS=$(echo "$AUDIT_OUTPUT" | grep -o '"high":[0-9]*' | cut -d: -f2 | head -1)
                            CRITICAL_VULNS=$(echo "$AUDIT_OUTPUT" | grep -o '"critical":[0-9]*' | cut -d: -f2 | head -1)
                            
                            if [[ -n "$HIGH_VULNS" && "$HIGH_VULNS" -gt 0 ]] || [[ -n "$CRITICAL_VULNS" && "$CRITICAL_VULNS" -gt 0 ]]; then
                                error "Node.js dependencies have high/critical security vulnerabilities!"
                                SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
                                NODE_ISSUES+=("High/critical vulnerabilities found in Node.js dependencies")
                            else
                                warning "Node.js dependencies have minor security warnings (not blocking)"
                            fi
                        fi
                    fi
                fi
            else
                # node_modules exists, run audit
                if run_with_timeout "cd $FRONTEND_DIR && npm audit --audit-level=high --json" "npm audit"; then
                    success "Node.js dependencies passed security check"
                else
                    # Check specific vulnerability levels
                    AUDIT_EXIT_CODE=0
                    cd "$FRONTEND_DIR" && npm audit --audit-level=high >/dev/null 2>&1 || AUDIT_EXIT_CODE=$?
                    
                    if [[ $AUDIT_EXIT_CODE -ne 0 ]]; then
                        error "Node.js dependencies have high/critical security vulnerabilities!"
                        SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
                        NODE_ISSUES+=("High/critical vulnerabilities found in Node.js dependencies")
                    else
                        success "Node.js dependencies passed security check"
                    fi
                fi
            fi
        elif command_exists yarn; then
            log "Using yarn audit to check Node.js dependencies..."
            
            if run_with_timeout "cd $FRONTEND_DIR && yarn audit --level high --json" "yarn audit"; then
                success "Node.js dependencies passed yarn security check"
            else
                warning "yarn audit found potential issues (not blocking commit)"
            fi
        else
            warning "Neither npm nor yarn found, skipping Node.js security check"
        fi
    fi
fi

# Report results
if [[ $SECURITY_ISSUES -gt 0 ]]; then
    error "Security vulnerabilities detected in dependencies!"
    echo
    echo -e "${RED}Security Issues Found:${NC}"
    
    if [[ ${#PYTHON_ISSUES[@]} -gt 0 ]]; then
        echo -e "${RED}Python Dependencies:${NC}"
        for issue in "${PYTHON_ISSUES[@]}"; do
            echo "  ❌ $issue"
        done
    fi
    
    if [[ ${#NODE_ISSUES[@]} -gt 0 ]]; then
        echo -e "${RED}Node.js Dependencies:${NC}"
        for issue in "${NODE_ISSUES[@]}"; do
            echo "  ❌ $issue"
        done
    fi
    
    echo
    echo -e "${YELLOW}How to fix security vulnerabilities:${NC}"
    echo
    
    if [[ ${#PYTHON_ISSUES[@]} -gt 0 ]]; then
        echo -e "${YELLOW}Python fixes:${NC}"
        echo "  1. Review vulnerabilities: cd $BACKEND_DIR && safety check"
        echo "  2. Update packages: pip install --upgrade <package-name>"
        echo "  3. Update requirements.txt with fixed versions"
        echo "  4. Test that application still works"
        echo
    fi
    
    if [[ ${#NODE_ISSUES[@]} -gt 0 ]]; then
        echo -e "${YELLOW}Node.js fixes:${NC}"
        echo "  1. Review vulnerabilities: cd $FRONTEND_DIR && npm audit"
        echo "  2. Auto-fix if possible: npm audit fix"
        echo "  3. Manual fix for major versions: npm install <package>@latest"
        echo "  4. Test that application still works"
        echo
    fi
    
    echo -e "${YELLOW}Security Tools Installation:${NC}"
    echo "  Python: pip install safety pip-audit"
    echo "  Node.js: npm install -g npm@latest (includes audit)"
    echo
    echo -e "${RED}To bypass this check (not recommended):${NC}"
    echo "  git commit --no-verify"
    echo
    echo -e "${YELLOW}Note:${NC} Only high and critical vulnerabilities block commits"
    echo "       Low and moderate vulnerabilities generate warnings only"
    echo
    exit 1
fi

success "All dependency security checks passed!"
log "No high or critical security vulnerabilities detected"
exit 0