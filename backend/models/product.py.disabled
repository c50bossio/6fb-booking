"""
Product Catalog Model

Unified product catalog model that can sync from Square or Shopify
and be used by the POS system for product sales and commission tracking.
"""

from sqlalchemy import (
    Column,
    Integer,
    String,
    Text,
    Boolean,
    DateTime,
    ForeignKey,
    Enum as SQLEnum,
    Numeric,
)
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

from .base import Base


class ProductSource(str, enum.Enum):
    """Source platform for the product"""

    MANUAL = "manual"
    SQUARE = "square"
    SHOPIFY = "shopify"


class ProductStatus(str, enum.Enum):
    """Product status"""

    ACTIVE = "active"
    INACTIVE = "inactive"
    OUT_OF_STOCK = "out_of_stock"
    DISCONTINUED = "discontinued"


class SyncStatus(str, enum.Enum):
    """Sync status with external platforms"""

    PENDING = "pending"
    SYNCED = "synced"
    ERROR = "error"
    MANUAL = "manual"


class Product(Base):
    """
    Unified Product Catalog Model

    This model stores products that can be synced from Square or Shopify
    and used in the POS system for sales and commission tracking.
    """

    __tablename__ = "products"

    # Primary key
    id = Column(Integer, primary_key=True, index=True)

    # Basic product information
    name = Column(String(255), nullable=False, index=True)
    description = Column(Text, nullable=True)
    sku = Column(String(100), nullable=True, unique=True, index=True)

    # Pricing
    price = Column(Numeric(10, 2), nullable=False)
    cost_price = Column(Numeric(10, 2), nullable=True)  # For profit calculations
    compare_at_price = Column(
        Numeric(10, 2), nullable=True
    )  # Original price for discounts

    # Product organization
    category = Column(String(100), nullable=True, index=True)
    subcategory = Column(String(100), nullable=True)
    brand = Column(String(100), nullable=True)
    tags = Column(Text, nullable=True)  # JSON array of tags

    # Inventory management
    track_inventory = Column(Boolean, default=True)
    inventory_quantity = Column(Integer, default=0)
    low_stock_threshold = Column(Integer, default=5)
    allow_oversell = Column(Boolean, default=False)

    # Product status
    status = Column(SQLEnum(ProductStatus), default=ProductStatus.ACTIVE, index=True)
    is_featured = Column(Boolean, default=False)

    # External platform integration
    source = Column(SQLEnum(ProductSource), default=ProductSource.MANUAL, index=True)
    sync_status = Column(SQLEnum(SyncStatus), default=SyncStatus.MANUAL, index=True)

    # Square integration fields
    square_catalog_id = Column(String(100), nullable=True, unique=True, index=True)
    square_variation_id = Column(String(100), nullable=True, unique=True, index=True)
    square_location_id = Column(String(100), nullable=True)
    square_category_id = Column(String(100), nullable=True)

    # Shopify integration fields
    shopify_product_id = Column(String(100), nullable=True, unique=True, index=True)
    shopify_variant_id = Column(String(100), nullable=True, unique=True, index=True)
    shopify_handle = Column(String(255), nullable=True, unique=True, index=True)
    shopify_collection_id = Column(String(100), nullable=True)

    # Sync metadata
    last_sync_at = Column(DateTime, nullable=True)
    last_sync_error = Column(Text, nullable=True)
    sync_attempts = Column(Integer, default=0)
    external_updated_at = Column(
        DateTime, nullable=True
    )  # Last update on external platform

    # Commission settings (can override barber default rates)
    commission_rate = Column(Numeric(5, 4), nullable=True)  # e.g., 0.1500 for 15%
    commission_type = Column(String(20), default="percentage")  # percentage or fixed

    # Audit fields
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False
    )
    created_by = Column(Integer, ForeignKey("users.id"), nullable=True)
    updated_by = Column(Integer, ForeignKey("users.id"), nullable=True)

    # Relationships
    creator = relationship(
        "User", foreign_keys=[created_by], back_populates="created_products"
    )
    updater = relationship(
        "User", foreign_keys=[updated_by], back_populates="updated_products"
    )

    # Sales relationship
    sales = relationship("ProductSale", back_populates="product")

    def __repr__(self):
        return f"<Product(id={self.id}, name='{self.name}', sku='{self.sku}', source='{self.source}')>"

    @property
    def is_in_stock(self) -> bool:
        """Check if product is in stock"""
        if not self.track_inventory:
            return True
        return self.inventory_quantity > 0 or self.allow_oversell

    @property
    def is_low_stock(self) -> bool:
        """Check if product is low in stock"""
        if not self.track_inventory:
            return False
        return self.inventory_quantity <= self.low_stock_threshold

    @property
    def profit_margin(self) -> Decimal:
        """Calculate profit margin if cost price is available"""
        if not self.cost_price or self.cost_price <= 0:
            return Decimal("0")
        return ((self.price - self.cost_price) / self.price) * 100

    @property
    def external_id(self) -> str:
        """Get the external platform ID based on source"""
        if self.source == ProductSource.SQUARE:
            return self.square_catalog_id or ""
        elif self.source == ProductSource.SHOPIFY:
            return self.shopify_product_id or ""
        return ""

    def needs_sync(self) -> bool:
        """Check if product needs to be synced with external platform"""
        if self.source == ProductSource.MANUAL:
            return False
        return self.sync_status in [SyncStatus.PENDING, SyncStatus.ERROR] or (
            self.external_updated_at
            and self.last_sync_at
            and self.external_updated_at > self.last_sync_at
        )

    def update_inventory(self, quantity_delta: int) -> bool:
        """
        Update inventory quantity

        Args:
            quantity_delta: Change in quantity (positive for stock in, negative for sale)

        Returns:
            bool: True if update successful, False if insufficient stock
        """
        if not self.track_inventory:
            return True

        new_quantity = self.inventory_quantity + quantity_delta

        if new_quantity < 0 and not self.allow_oversell:
            return False

        self.inventory_quantity = max(0, new_quantity)
        return True

    def to_pos_dict(self) -> dict:
        """Convert to dictionary format for POS system"""
        return {
            "id": self.id,
            "name": self.name,
            "sku": self.sku,
            "price": float(self.price),
            "category": self.category,
            "subcategory": self.subcategory,
            "brand": self.brand,
            "in_stock": self.is_in_stock,
            "quantity": self.inventory_quantity if self.track_inventory else None,
            "low_stock": self.is_low_stock,
            "commission_rate": (
                float(self.commission_rate) if self.commission_rate else None
            ),
            "image_url": None,  # Could be added later
            "barcode": self.sku,  # Use SKU as barcode for now
        }


class ProductCategory(Base):
    """
    Product Categories for better organization

    Optional table for structured category management
    """

    __tablename__ = "product_categories"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False, unique=True)
    description = Column(Text, nullable=True)
    parent_id = Column(Integer, ForeignKey("product_categories.id"), nullable=True)

    # Display settings
    sort_order = Column(Integer, default=0)
    is_active = Column(Boolean, default=True)

    # Square/Shopify mapping
    square_category_id = Column(String(100), nullable=True)
    shopify_collection_id = Column(String(100), nullable=True)

    # Audit fields
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False
    )

    # Relationships
    parent = relationship("ProductCategory", remote_side=[id], backref="children")

    def __repr__(self):
        return f"<ProductCategory(id={self.id}, name='{self.name}')>"


class ProductSyncLog(Base):
    """
    Log of product synchronization attempts

    Tracks sync history for debugging and monitoring
    """

    __tablename__ = "product_sync_logs"

    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"), nullable=False, index=True)

    # Sync details
    sync_type = Column(String(20), nullable=False)  # full, incremental, single
    source_platform = Column(SQLEnum(ProductSource), nullable=False)
    sync_direction = Column(String(10), nullable=False)  # import, export

    # Results
    status = Column(SQLEnum(SyncStatus), nullable=False)
    records_processed = Column(Integer, default=0)
    records_created = Column(Integer, default=0)
    records_updated = Column(Integer, default=0)
    records_failed = Column(Integer, default=0)

    # Error details
    error_message = Column(Text, nullable=True)
    error_code = Column(String(50), nullable=True)

    # Metadata
    started_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    completed_at = Column(DateTime, nullable=True)
    initiated_by = Column(Integer, ForeignKey("users.id"), nullable=True)

    # Relationships
    product = relationship("Product")
    user = relationship("User")

    def __repr__(self):
        return f"<ProductSyncLog(id={self.id}, product_id={self.product_id}, status='{self.status}')>"

    @property
    def duration_seconds(self) -> int:
        """Calculate sync duration in seconds"""
        if not self.completed_at:
            return 0
        return int((self.completed_at - self.started_at).total_seconds())
