"""
Payout Schedule Models for Automated Commission and Booth Rent Payments
"""

from sqlalchemy import (
    Column,
    Integer,
    String,
    Boolean,
    DateTime,
    DECIMAL,
    Text,
    ForeignKey,
    Enum,
)
from sqlalchemy.orm import relationship
from datetime import datetime
from decimal import Decimal
import enum

from models.base import Base


class PayoutFrequency(enum.Enum):
    DAILY = "daily"
    WEEKLY = "weekly"
    BIWEEKLY = "biweekly"
    MONTHLY = "monthly"
    CUSTOM = "custom"


class PayoutStatus(enum.Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class PayoutType(enum.Enum):
    COMMISSION = "commission"
    BOOTH_RENT_REFUND = "booth_rent_refund"
    BONUS = "bonus"
    ADJUSTMENT = "adjustment"


class PayoutSchedule(Base):
    """
    Defines automated payout schedules for barbers
    """

    __tablename__ = "payout_schedules"

    id = Column(Integer, primary_key=True, index=True)
    barber_id = Column(Integer, ForeignKey("barbers.id"), nullable=False)

    # Schedule Configuration
    frequency = Column(
        Enum(PayoutFrequency), nullable=False, default=PayoutFrequency.WEEKLY
    )
    day_of_week = Column(Integer)  # 0=Monday, 6=Sunday (for weekly)
    day_of_month = Column(Integer)  # 1-31 (for monthly)
    custom_interval_days = Column(Integer)  # For custom frequencies

    # Payout Settings
    minimum_payout_amount = Column(DECIMAL(10, 2), default=25.00)  # $25 minimum
    auto_payout_enabled = Column(Boolean, default=True)

    # Notification Settings
    email_notifications = Column(Boolean, default=True)
    sms_notifications = Column(Boolean, default=False)
    advance_notice_days = Column(Integer, default=1)  # Days before payout to notify

    # Platform Configuration
    preferred_payment_method = Column(
        String(50), default="stripe"
    )  # stripe, square, bank_transfer
    backup_payment_method = Column(String(50))

    # Status and Metadata
    is_active = Column(Boolean, default=True)
    last_payout_date = Column(DateTime)
    next_payout_date = Column(DateTime)
    total_payouts_sent = Column(Integer, default=0)
    total_amount_paid = Column(DECIMAL(12, 2), default=0.00)

    # Relationships
    barber = relationship("Barber", back_populates="payout_schedule")
    payouts = relationship("ScheduledPayout", back_populates="schedule")

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class ScheduledPayout(Base):
    """
    Individual payout instances generated by the scheduler
    """

    __tablename__ = "scheduled_payouts"

    id = Column(Integer, primary_key=True, index=True)
    schedule_id = Column(Integer, ForeignKey("payout_schedules.id"), nullable=False)
    barber_id = Column(Integer, ForeignKey("barbers.id"), nullable=False)

    # Payout Details
    payout_type = Column(
        Enum(PayoutType), nullable=False, default=PayoutType.COMMISSION
    )
    amount = Column(DECIMAL(10, 2), nullable=False)
    currency = Column(String(3), default="USD")

    # Date Range for Earnings
    period_start = Column(DateTime, nullable=False)
    period_end = Column(DateTime, nullable=False)

    # Status and Processing
    status = Column(Enum(PayoutStatus), default=PayoutStatus.PENDING)
    scheduled_date = Column(DateTime, nullable=False)
    processed_date = Column(DateTime)

    # Payment Platform Details
    payment_method = Column(String(50))  # stripe, square, bank_transfer
    platform_payout_id = Column(String(255))  # External payout ID from Stripe/Square
    platform_transfer_id = Column(String(255))  # Transfer ID if applicable

    # Fee Information
    platform_fee = Column(DECIMAL(8, 2), default=0.00)
    net_amount = Column(DECIMAL(10, 2))  # Amount after fees

    # Error Handling
    failure_reason = Column(Text)
    retry_count = Column(Integer, default=0)
    max_retries = Column(Integer, default=3)
    next_retry_date = Column(DateTime)

    # Notifications
    notification_sent = Column(Boolean, default=False)
    notification_sent_date = Column(DateTime)

    # Relationships
    schedule = relationship("PayoutSchedule", back_populates="payouts")
    barber = relationship("Barber")

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class PayoutEarning(Base):
    """
    Individual earnings that contribute to payouts
    """

    __tablename__ = "payout_earnings"

    id = Column(Integer, primary_key=True, index=True)
    scheduled_payout_id = Column(
        Integer, ForeignKey("scheduled_payouts.id"), nullable=False
    )

    # Source of Earning
    appointment_id = Column(Integer, ForeignKey("appointments.id"))
    payment_id = Column(Integer, ForeignKey("payments.id"))

    # Earning Details
    earning_type = Column(
        String(50)
    )  # service_commission, product_commission, tip, bonus
    gross_amount = Column(DECIMAL(10, 2), nullable=False)
    commission_rate = Column(DECIMAL(5, 4))  # e.g., 0.3000 for 30%
    commission_amount = Column(DECIMAL(10, 2), nullable=False)

    # Date and Metadata
    earned_date = Column(DateTime, nullable=False)
    service_name = Column(String(200))
    customer_name = Column(String(200))

    # Relationships
    scheduled_payout = relationship("ScheduledPayout")
    appointment = relationship("Appointment")
    payment = relationship("Payment")

    created_at = Column(DateTime, default=datetime.utcnow)


class PayoutNotification(Base):
    """
    Tracks notifications sent about payouts
    """

    __tablename__ = "payout_notifications"

    id = Column(Integer, primary_key=True, index=True)
    scheduled_payout_id = Column(
        Integer, ForeignKey("scheduled_payouts.id"), nullable=False
    )
    barber_id = Column(Integer, ForeignKey("barbers.id"), nullable=False)

    # Notification Details
    notification_type = Column(
        String(50)
    )  # advance_notice, processing, completed, failed
    channel = Column(String(20))  # email, sms, push
    recipient = Column(String(255))  # email address or phone number

    # Content
    subject = Column(String(255))
    message = Column(Text)
    template_used = Column(String(100))

    # Status
    sent_at = Column(DateTime)
    delivery_status = Column(String(20))  # sent, delivered, failed, bounced
    delivery_error = Column(Text)

    # Engagement
    opened_at = Column(DateTime)
    clicked_at = Column(DateTime)

    # Relationships
    scheduled_payout = relationship("ScheduledPayout")
    barber = relationship("Barber")

    created_at = Column(DateTime, default=datetime.utcnow)
