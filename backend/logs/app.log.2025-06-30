{"timestamp": "2025-06-30T13:28:29.043813", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "BEGIN (implicit)", "module": "base", "function": "_connection_begin_impl", "line": 2701}
{"timestamp": "2025-06-30T13:28:29.043930", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"users\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.043978", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044147", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"user_sessions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044183", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044247", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"user_sessions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044277", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044335", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"user_activities\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044363", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044409", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"user_activities\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044434", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044481", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"locations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044508", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044596", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"location_analytics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044621", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044669", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"location_analytics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044696", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044740", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"barbers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044765", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044807", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"barbers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044833", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044881", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"clients\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044905", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044945", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"clients\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.044968", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045009", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"appointments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045034", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045074", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"appointments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045097", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045138", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"daily_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045162", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045202", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"daily_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045224", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045263", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"weekly_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045286", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045322", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"weekly_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045345", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045383", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"monthly_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045406", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045443", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"monthly_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045464", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045511", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"sixfb_scores\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045535", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045571", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"sixfb_scores\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045594", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045631", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"training_modules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045653", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045690", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"training_modules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045711", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045745", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"training_enrollments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045766", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045800", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"training_enrollments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045822", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045859", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"training_attempts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045880", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045915", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"training_attempts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045937", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045971", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"certifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.045991", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046039", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"user_certifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046069", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046106", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"user_certifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046128", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046167", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"skill_assessments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046189", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046225", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"skill_assessments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046247", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046283", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"training_paths\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046305", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046354", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"training_path_enrollments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046376", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046412", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"training_path_enrollments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046434", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046471", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"notifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046492", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046527", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"notifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046548", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046584", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payment_methods\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046606", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046642", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payment_methods\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046668", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046711", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046732", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046767", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046790", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046827", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"refunds\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046848", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046887", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"refunds\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046909", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046946", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payment_webhook_events\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.046968", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047003", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payment_webhook_events\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047024", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047065", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"stripe_customers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047087", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047125", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"stripe_customers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047221", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047289", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payment_reports\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047328", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047409", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payment_reports\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047447", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047504", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"email_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047536", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047579", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"email_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047604", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047647", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"sms_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047676", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047726", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"sms_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047756", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047814", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"notification_preferences\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047844", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047883", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"notification_preferences\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047910", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047959", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"communication_templates\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.047988", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048047", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"barber_payment_models\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048071", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048111", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"barber_payment_models\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048133", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048173", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"booth_rent_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048200", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048237", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"booth_rent_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048259", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048299", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"product_sales\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048321", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048358", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"product_sales\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048381", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048420", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"commission_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048450", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048491", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"commission_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048521", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048568", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payment_integrations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048598", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048663", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"compensation_plans\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048684", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048718", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"compensation_plans\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048745", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048780", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"commission_calculations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048807", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048850", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"commission_calculations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048881", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048923", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payment_history\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048951", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.048997", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payment_history\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049024", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049064", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"revenue_shares\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049086", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049119", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"revenue_shares\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049144", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049180", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"commissions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049204", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049238", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"commissions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049262", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049297", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"service_categories\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049322", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049367", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"services\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049390", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049424", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"services\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049448", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049492", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"barber_availability\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049529", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049573", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"barber_availability\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049598", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049642", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"booking_rules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049665", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049699", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"booking_rules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049724", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049759", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"reviews\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049784", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049819", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"reviews\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049845", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049881", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"booking_slots\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049905", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049938", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"booking_slots\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.049962", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050002", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"wait_lists\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050026", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050058", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"wait_lists\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050083", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050117", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"google_calendar_settings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050146", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050186", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"google_calendar_settings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050211", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050245", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"google_calendar_sync_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050269", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050302", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"google_calendar_sync_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050326", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050361", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"square_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050387", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050420", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"square_payments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050444", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050492", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"square_accounts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050517", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050550", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"square_accounts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050575", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050610", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"square_payouts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050637", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050669", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"square_payouts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050693", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050727", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"square_webhook_events\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050767", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050817", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"processor_preferences\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050840", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050875", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"processor_preferences\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050898", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050934", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"processor_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050958", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.050991", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"processor_metrics\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051015", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051052", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"revenue_patterns\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051075", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051109", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"revenue_patterns\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051135", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051170", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"revenue_predictions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051194", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051227", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"revenue_predictions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051252", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051287", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"pricing_optimizations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051312", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051345", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"pricing_optimizations\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051371", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051406", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"client_segments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051430", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051463", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"client_segments\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051487", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051522", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"revenue_insights\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051546", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051579", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"revenue_insights\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051603", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051638", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"performance_benchmarks\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051663", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051695", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"performance_benchmarks\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051720", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051762", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"revenue_optimization_goals\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051785", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051820", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"revenue_optimization_goals\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051847", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051892", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"customers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051920", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051963", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"customers\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.051989", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052031", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"customer_payment_methods\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052059", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052100", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"customer_payment_methods\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052127", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052170", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"gift_certificates\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052198", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052237", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"gift_certificates\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052264", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052306", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"gift_certificate_redemptions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052333", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052372", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"gift_certificate_redemptions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052395", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052431", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payout_schedules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052455", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052489", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payout_schedules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052513", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052548", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"scheduled_payouts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052574", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052611", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"scheduled_payouts\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052634", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052671", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payout_earnings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052695", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052728", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payout_earnings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052754", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052789", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"payout_notifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052814", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052848", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"payout_notifications\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052874", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052914", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"appointment_series\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052938", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052973", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"appointment_series\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.052998", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053043", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"series_exclusions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053070", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053107", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"series_exclusions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053133", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053174", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"series_change_log\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053198", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053237", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"series_change_log\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053267", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053309", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"products\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053334", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053368", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"products\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053393", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053430", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"product_categories\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053454", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053488", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"product_categories\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053513", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053550", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"product_sync_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053576", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053611", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"product_sync_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053636", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053671", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"pos_sessions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053697", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053732", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"pos_sessions\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053757", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053794", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"automation_rules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053818", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053855", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"automation_rules\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053880", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053925", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"workflow_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053949", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.053984", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"workflow_logs\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.054010", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.054047", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA main.table_info(\"mfa_settings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.054074", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.054116", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "PRAGMA temp.table_info(\"mfa_settings\")", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.054141", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[raw sql] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055232", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE user_sessions (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tsession_token VARCHAR(255) NOT NULL, \n\tdevice_info VARCHAR(500), \n\tip_address VARCHAR(50), \n\tlocation_id INTEGER, \n\tis_active BOOLEAN, \n\texpires_at DATETIME NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tlast_activity DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tUNIQUE (session_token), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055270", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00005s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055673", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_user_sessions_id ON user_sessions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055708", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055939", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE user_activities (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tlocation_id INTEGER, \n\tactivity_type VARCHAR(100) NOT NULL, \n\tactivity_description VARCHAR(500), \n\tresource_type VARCHAR(100), \n\tresource_id VARCHAR(100), \n\tip_address VARCHAR(50), \n\tuser_agent VARCHAR(500), \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.055985", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00005s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056124", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_user_activities_id ON user_activities (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056159", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056435", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE location_analytics (\n\tid INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\tperiod_type VARCHAR(20) NOT NULL, \n\tperiod_start DATETIME NOT NULL, \n\tperiod_end DATETIME NOT NULL, \n\ttotal_revenue FLOAT, \n\ttotal_appointments INTEGER, \n\ttotal_clients INTEGER, \n\tnew_clients INTEGER, \n\treturning_clients INTEGER, \n\taverage_6fb_score FLOAT, \n\tbooking_utilization FLOAT, \n\tclient_retention_rate FLOAT, \n\taverage_ticket FLOAT, \n\tactive_barbers INTEGER, \n\ttotal_barber_hours FLOAT, \n\trevenue_per_barber FLOAT, \n\tno_show_rate FLOAT, \n\tcancellation_rate FLOAT, \n\twalk_in_percentage FLOAT, \n\trevenue_target_achievement FLOAT, \n\tprofit_margin FLOAT, \n\tcost_per_acquisition FLOAT, \n\trevenue_rank INTEGER, \n\tscore_rank INTEGER, \n\tgrowth_rank INTEGER, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tcalculated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056469", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056593", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_location_analytics_id ON location_analytics (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056624", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056846", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE barbers (\n\temail VARCHAR(255) NOT NULL, \n\tfirst_name VARCHAR(100) NOT NULL, \n\tlast_name VARCHAR(100) NOT NULL, \n\tbusiness_name VARCHAR(200), \n\tphone VARCHAR(20), \n\tis_active BOOLEAN, \n\tis_verified BOOLEAN, \n\tsubscription_tier VARCHAR(50), \n\ttarget_booking_capacity INTEGER, \n\thourly_rate FLOAT, \n\taverage_service_duration INTEGER, \n\tmonthly_revenue_goal FLOAT, \n\tweekly_appointment_goal INTEGER, \n\taverage_ticket_goal FLOAT, \n\tlocation_id INTEGER, \n\tuser_id INTEGER, \n\tstripe_account_id VARCHAR(255), \n\tpin_hash VARCHAR(255), \n\tpin_attempts INTEGER, \n\tpin_locked_until DATETIME, \n\tpin_last_used DATETIME, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056878", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.056993", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_barbers_id ON barbers (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057020", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057103", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_barbers_email ON barbers (email)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057128", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057304", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE training_modules (\n\tid INTEGER NOT NULL, \n\ttitle VARCHAR(255) NOT NULL, \n\tdescription TEXT, \n\tcategory VARCHAR(100) NOT NULL, \n\tdifficulty_level VARCHAR(50) NOT NULL, \n\tcontent_type VARCHAR(50) NOT NULL, \n\tcontent_url VARCHAR(500), \n\testimated_duration INTEGER, \n\tprerequisites JSON, \n\trequired_for_certification VARCHAR(100), \n\tpassing_score FLOAT, \n\tmax_attempts INTEGER, \n\tis_active BOOLEAN, \n\tis_mandatory BOOLEAN, \n\tcreated_by INTEGER, \n\tversion VARCHAR(20), \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(created_by) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057333", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057448", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_training_modules_id ON training_modules (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057473", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057648", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE user_certifications (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tcertification_id INTEGER NOT NULL, \n\tearned_date DATETIME NOT NULL, \n\texpiry_date DATETIME, \n\tfinal_score FLOAT NOT NULL, \n\tmodules_completed JSON, \n\tmentor_id INTEGER, \n\tstatus VARCHAR(50), \n\trenewal_date DATETIME, \n\trenewal_score FLOAT, \n\trenewal_notes TEXT, \n\tcertificate_url VARCHAR(500), \n\tbadge_earned BOOLEAN, \n\tpublic_recognition BOOLEAN, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(certification_id) REFERENCES certifications (id), \n\tFOREIGN KEY(mentor_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057677", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057777", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_user_certifications_id ON user_certifications (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057804", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.057990", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE skill_assessments (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tassessor_id INTEGER NOT NULL, \n\tassessment_type VARCHAR(100) NOT NULL, \n\tskill_category VARCHAR(100) NOT NULL, \n\ttechnical_skill FLOAT, \n\tcustomer_interaction FLOAT, \n\tbusiness_acumen FLOAT, \n\tsixfb_methodology FLOAT, \n\toverall_score FLOAT, \n\tstrengths TEXT, \n\tareas_for_improvement TEXT, \n\trecommendations TEXT, \n\tfollow_up_required BOOLEAN, \n\tassessment_date DATETIME NOT NULL, \n\tlocation_id INTEGER, \n\timprovement_goals JSON, \n\tnext_assessment_date DATETIME, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(assessor_id) REFERENCES users (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058022", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058130", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_skill_assessments_id ON skill_assessments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058158", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058316", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE training_path_enrollments (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tpath_id INTEGER NOT NULL, \n\tcurrent_module_index INTEGER, \n\tcompleted_modules JSON, \n\toverall_progress FLOAT, \n\tenrolled_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\ttarget_completion_date DATETIME, \n\tactual_completion_date DATETIME, \n\tstatus VARCHAR(50), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(path_id) REFERENCES training_paths (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058350", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058452", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_training_path_enrollments_id ON training_path_enrollments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058483", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058647", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE notifications (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\ttype VARCHAR(17) NOT NULL, \n\tpriority VARCHAR(6) NOT NULL, \n\ttitle VARCHAR(200) NOT NULL, \n\tmessage VARCHAR(1000) NOT NULL, \n\tdata JSON, \n\tis_read BOOLEAN, \n\tread_at DATETIME, \n\taction_url VARCHAR(500), \n\tcreated_at DATETIME NOT NULL, \n\texpires_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058681", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058775", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_notifications_id ON notifications (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058812", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058898", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_notifications_user_id ON notifications (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.058925", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059009", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_notifications_is_read ON notifications (is_read)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059033", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059117", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_notifications_type ON notifications (type)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059142", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059291", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payment_methods (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tstripe_payment_method_id VARCHAR(255) NOT NULL, \n\ttype VARCHAR(12) NOT NULL, \n\tlast_four VARCHAR(4), \n\tbrand VARCHAR(50), \n\texp_month INTEGER, \n\texp_year INTEGER, \n\tbank_name VARCHAR(100), \n\taccount_last_four VARCHAR(4), \n\tis_default BOOLEAN, \n\tis_active BOOLEAN, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059319", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059414", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payment_methods_user_active ON payment_methods (user_id, is_active)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059438", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059514", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_methods_id ON payment_methods (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059535", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059612", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_payment_methods_stripe_payment_method_id ON payment_methods (stripe_payment_method_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059636", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059715", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payment_methods_user_default ON payment_methods (user_id, is_default)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059737", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059815", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_methods_user_id ON payment_methods (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.059839", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060008", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payment_reports (\n\tid INTEGER NOT NULL, \n\treport_type VARCHAR(50) NOT NULL, \n\tstart_date DATETIME NOT NULL, \n\tend_date DATETIME NOT NULL, \n\ttotal_revenue INTEGER NOT NULL, \n\ttotal_refunds INTEGER NOT NULL, \n\tnet_revenue INTEGER NOT NULL, \n\ttransaction_count INTEGER NOT NULL, \n\trefund_count INTEGER NOT NULL, \n\tbreakdown_by_barber JSON, \n\tbreakdown_by_service JSON, \n\tbreakdown_by_payment_method JSON, \n\tfile_path VARCHAR(500), \n\tgenerated_by_id INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(generated_by_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060036", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060130", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payment_reports_dates ON payment_reports (start_date, end_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060155", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060229", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_reports_id ON payment_reports (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060252", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060332", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payment_reports_created_at ON payment_reports (created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060356", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060431", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payment_reports_type ON payment_reports (report_type)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060455", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060620", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE email_logs (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER, \n\trecipient VARCHAR(255) NOT NULL, \n\tsubject VARCHAR(500) NOT NULL, \n\ttemplate VARCHAR(100) NOT NULL, \n\tstatus VARCHAR(9) NOT NULL, \n\tsent_at DATETIME, \n\tdelivered_at DATETIME, \n\topened_at DATETIME, \n\tclicked_at DATETIME, \n\tbounced_at DATETIME, \n\terror_message TEXT, \n\temail_metadata JSON, \n\tmessage_id VARCHAR(255), \n\tcreated_at DATETIME NOT NULL, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060647", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060737", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_email_logs_user_id ON email_logs (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060761", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060838", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_email_logs_message_id ON email_logs (message_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060862", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060936", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_email_logs_id ON email_logs (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.060960", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061036", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_email_logs_status ON email_logs (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061057", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061145", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_email_logs_recipient ON email_logs (recipient)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061169", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061326", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE sms_logs (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER, \n\trecipient VARCHAR(20) NOT NULL, \n\tmessage TEXT NOT NULL, \n\tstatus VARCHAR(11) NOT NULL, \n\tsent_at DATETIME, \n\tdelivered_at DATETIME, \n\terror_message TEXT, \n\ttwilio_sid VARCHAR(100), \n\tcost FLOAT, \n\tsms_metadata JSON, \n\tcreated_at DATETIME NOT NULL, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061353", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061466", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sms_logs_status ON sms_logs (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061490", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061571", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sms_logs_id ON sms_logs (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061592", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061674", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sms_logs_recipient ON sms_logs (recipient)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061694", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061771", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sms_logs_user_id ON sms_logs (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061797", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061872", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sms_logs_twilio_sid ON sms_logs (twilio_sid)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.061894", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062109", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE notification_preferences (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\temail_appointment_confirmation BOOLEAN, \n\temail_appointment_reminder BOOLEAN, \n\temail_appointment_cancellation BOOLEAN, \n\temail_payment_receipt BOOLEAN, \n\temail_marketing BOOLEAN, \n\temail_performance_reports BOOLEAN, \n\temail_team_updates BOOLEAN, \n\tsms_appointment_confirmation BOOLEAN, \n\tsms_appointment_reminder BOOLEAN, \n\tsms_appointment_cancellation BOOLEAN, \n\tsms_payment_confirmation BOOLEAN, \n\tsms_marketing BOOLEAN, \n\tpush_enabled BOOLEAN, \n\tpush_appointment_updates BOOLEAN, \n\tpush_performance_alerts BOOLEAN, \n\tpush_team_updates BOOLEAN, \n\treminder_hours_before INTEGER, \n\tsecond_reminder_hours INTEGER, \n\tquiet_hours_enabled BOOLEAN, \n\tquiet_hours_start INTEGER, \n\tquiet_hours_end INTEGER, \n\tcreated_at DATETIME NOT NULL, \n\tupdated_at DATETIME NOT NULL, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062137", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062238", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_notification_preferences_user_id ON notification_preferences (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062261", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062336", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_notification_preferences_id ON notification_preferences (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062358", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062521", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE customers (\n\tid INTEGER NOT NULL, \n\temail VARCHAR(500) NOT NULL, \n\tfirst_name VARCHAR(100) NOT NULL, \n\tlast_name VARCHAR(100) NOT NULL, \n\tphone VARCHAR(20), \n\thashed_password VARCHAR(255) NOT NULL, \n\tis_active BOOLEAN, \n\tis_verified BOOLEAN, \n\tlast_login DATETIME, \n\tnewsletter_subscription BOOLEAN, \n\tpreferred_barber_id INTEGER, \n\tpreferred_location_id INTEGER, \n\tavatar_url VARCHAR(500), \n\tnotes TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(preferred_barber_id) REFERENCES users (id), \n\tFOREIGN KEY(preferred_location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062548", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062655", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_customers_id ON customers (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062682", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062757", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_customers_email ON customers (email)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.062779", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063001", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE gift_certificates (\n\tid INTEGER NOT NULL, \n\tcode VARCHAR(20) NOT NULL, \n\toriginal_amount INTEGER NOT NULL, \n\tremaining_balance INTEGER NOT NULL, \n\tcurrency VARCHAR(3) NOT NULL, \n\tsender_name VARCHAR(200) NOT NULL, \n\tsender_email VARCHAR(255) NOT NULL, \n\tsender_user_id INTEGER, \n\trecipient_name VARCHAR(200) NOT NULL, \n\trecipient_email VARCHAR(255) NOT NULL, \n\trecipient_user_id INTEGER, \n\tmessage TEXT, \n\tstatus VARCHAR(14) NOT NULL, \n\tis_active BOOLEAN NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\texpiry_date DATETIME NOT NULL, \n\tused_date DATETIME, \n\tstripe_payment_intent_id VARCHAR(255), \n\tstripe_charge_id VARCHAR(255), \n\tmeta_data JSON, \n\tPRIMARY KEY (id), \n\tCONSTRAINT check_positive_original_amount CHECK (original_amount > 0), \n\tCONSTRAINT check_non_negative_balance CHECK (remaining_balance >= 0), \n\tCONSTRAINT check_balance_not_exceed_original CHECK (remaining_balance <= original_amount), \n\tFOREIGN KEY(sender_user_id) REFERENCES users (id), \n\tFOREIGN KEY(recipient_user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063034", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063170", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificates_expiry_date ON gift_certificates (expiry_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063196", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063281", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_gift_certificates_stripe_charge_id ON gift_certificates (stripe_charge_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063305", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063387", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificates_status ON gift_certificates (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063415", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063489", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_gift_certificates_code ON gift_certificates (code)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063511", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063588", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_gift_certificates_recipient_email ON gift_certificates (recipient_email)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063611", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063688", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_gift_certificates_stripe_payment_intent_id ON gift_certificates (stripe_payment_intent_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063710", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063797", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_gift_certificates_sender_email ON gift_certificates (sender_email)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063825", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063910", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificates_id ON gift_certificates (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.063936", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064018", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_gift_certificates_status_expiry ON gift_certificates (status, expiry_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064042", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064286", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE products (\n\tid INTEGER NOT NULL, \n\tname VARCHAR(255) NOT NULL, \n\tdescription TEXT, \n\tsku VARCHAR(100), \n\tprice NUMERIC(10, 2) NOT NULL, \n\tcost_price NUMERIC(10, 2), \n\tcompare_at_price NUMERIC(10, 2), \n\tcategory VARCHAR(100), \n\tsubcategory VARCHAR(100), \n\tbrand VARCHAR(100), \n\ttags TEXT, \n\ttrack_inventory BOOLEAN, \n\tinventory_quantity INTEGER, \n\tlow_stock_threshold INTEGER, \n\tallow_oversell BOOLEAN, \n\tstatus VARCHAR(12), \n\tis_featured BOOLEAN, \n\tsource VARCHAR(7), \n\tsync_status VARCHAR(7), \n\tsquare_catalog_id VARCHAR(100), \n\tsquare_variation_id VARCHAR(100), \n\tsquare_location_id VARCHAR(100), \n\tsquare_category_id VARCHAR(100), \n\tshopify_product_id VARCHAR(100), \n\tshopify_variant_id VARCHAR(100), \n\tshopify_handle VARCHAR(255), \n\tshopify_collection_id VARCHAR(100), \n\tlast_sync_at DATETIME, \n\tlast_sync_error TEXT, \n\tsync_attempts INTEGER, \n\texternal_updated_at DATETIME, \n\tcommission_rate NUMERIC(5, 4), \n\tcommission_type VARCHAR(20), \n\tcreated_at DATETIME NOT NULL, \n\tupdated_at DATETIME NOT NULL, \n\tcreated_by INTEGER, \n\tupdated_by INTEGER, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(created_by) REFERENCES users (id), \n\tFOREIGN KEY(updated_by) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064314", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064438", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_shopify_product_id ON products (shopify_product_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064464", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064539", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_id ON products (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064561", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064635", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_shopify_handle ON products (shopify_handle)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064657", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064734", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_status ON products (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064757", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064840", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_source ON products (source)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064862", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064938", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_square_variation_id ON products (square_variation_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.064962", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065039", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_square_catalog_id ON products (square_catalog_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065062", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065143", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_sku ON products (sku)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065167", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065239", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_sync_status ON products (sync_status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065261", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065343", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_products_shopify_variant_id ON products (shopify_variant_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065369", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065445", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_category ON products (category)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065466", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065549", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_products_name ON products (name)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065573", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065715", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE product_categories (\n\tid INTEGER NOT NULL, \n\tname VARCHAR(100) NOT NULL, \n\tdescription TEXT, \n\tparent_id INTEGER, \n\tsort_order INTEGER, \n\tis_active BOOLEAN, \n\tsquare_category_id VARCHAR(100), \n\tshopify_collection_id VARCHAR(100), \n\tcreated_at DATETIME NOT NULL, \n\tupdated_at DATETIME NOT NULL, \n\tPRIMARY KEY (id), \n\tUNIQUE (name), \n\tFOREIGN KEY(parent_id) REFERENCES product_categories (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065742", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065840", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_product_categories_id ON product_categories (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.065863", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066063", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE automation_rules (\n\tid INTEGER NOT NULL, \n\tname VARCHAR(255) NOT NULL, \n\tdescription TEXT, \n\tcategory VARCHAR(50) NOT NULL, \n\tlocation_id INTEGER, \n\tis_global BOOLEAN, \n\ttrigger_type VARCHAR(50) NOT NULL, \n\ttrigger_config JSON NOT NULL, \n\taction_type VARCHAR(50) NOT NULL, \n\taction_config JSON NOT NULL, \n\tconditions JSON, \n\tis_active BOOLEAN, \n\tlast_triggered DATETIME, \n\ttrigger_count INTEGER, \n\tsuccess_count INTEGER, \n\tfailure_count INTEGER, \n\taverage_execution_time FLOAT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tcreated_by INTEGER, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(created_by) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066096", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066214", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_automation_rules_id ON automation_rules (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066240", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066421", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE mfa_settings (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tis_enabled BOOLEAN NOT NULL, \n\tsecret_key VARCHAR(255), \n\tbackup_codes TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tlast_used_at DATETIME, \n\ttrusted_devices JSON, \n\trequire_for_api BOOLEAN, \n\trequire_for_admin BOOLEAN, \n\tbackup_codes_used JSON, \n\tPRIMARY KEY (id), \n\tUNIQUE (user_id), \n\tFOREIGN KEY(user_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066450", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066552", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_mfa_settings_id ON mfa_settings (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066576", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066792", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE clients (\n\tfirst_name VARCHAR(100) NOT NULL, \n\tlast_name VARCHAR(100) NOT NULL, \n\temail VARCHAR(500), \n\tphone VARCHAR(100), \n\tdate_of_birth DATE, \n\tbarber_id INTEGER NOT NULL, \n\tcustomer_type VARCHAR(20), \n\ttotal_visits INTEGER, \n\ttotal_spent FLOAT, \n\taverage_ticket FLOAT, \n\tfirst_visit_date DATE, \n\tlast_visit_date DATE, \n\tvisit_frequency_days INTEGER, \n\tno_show_count INTEGER, \n\tcancellation_count INTEGER, \n\treferral_count INTEGER, \n\tpreferred_services TEXT, \n\tnotes TEXT, \n\ttags VARCHAR(500), \n\tsms_enabled BOOLEAN, \n\temail_enabled BOOLEAN, \n\tmarketing_enabled BOOLEAN, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066819", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066942", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_clients_id ON clients (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.066968", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067052", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_clients_phone ON clients (phone)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067082", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067190", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_clients_email ON clients (email)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067219", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067426", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE daily_metrics (\n\tbarber_id INTEGER NOT NULL, \n\tdate DATE NOT NULL, \n\ttotal_appointments INTEGER, \n\tcompleted_appointments INTEGER, \n\tcancelled_appointments INTEGER, \n\tno_show_appointments INTEGER, \n\ttotal_service_revenue FLOAT, \n\ttotal_tip_amount FLOAT, \n\ttotal_product_revenue FLOAT, \n\ttotal_revenue FLOAT, \n\tnew_customers INTEGER, \n\treturning_customers INTEGER, \n\tnew_customer_revenue FLOAT, \n\treturning_customer_revenue FLOAT, \n\tbooking_capacity INTEGER, \n\tbooking_rate FLOAT, \n\taverage_ticket FLOAT, \n\taverage_service_revenue FLOAT, \n\taverage_tip_percentage FLOAT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067468", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067576", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_daily_metrics_id ON daily_metrics (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067604", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067691", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_daily_metrics_date ON daily_metrics (date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067715", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067912", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE weekly_metrics (\n\tbarber_id INTEGER NOT NULL, \n\tweek_start_date DATE NOT NULL, \n\tyear INTEGER NOT NULL, \n\tweek_number INTEGER NOT NULL, \n\ttotal_appointments INTEGER, \n\tcompleted_appointments INTEGER, \n\tcancelled_appointments INTEGER, \n\tno_show_appointments INTEGER, \n\ttotal_service_revenue FLOAT, \n\ttotal_tip_amount FLOAT, \n\ttotal_product_revenue FLOAT, \n\ttotal_revenue FLOAT, \n\tnew_customers INTEGER, \n\treturning_customers INTEGER, \n\tunique_customers INTEGER, \n\tweekly_capacity INTEGER, \n\tbooking_rate FLOAT, \n\taverage_ticket FLOAT, \n\trevenue_per_hour FLOAT, \n\trevenue_growth_rate FLOAT, \n\tappointment_growth_rate FLOAT, \n\tcustomer_growth_rate FLOAT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.067942", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068050", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_weekly_metrics_id ON weekly_metrics (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068078", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068164", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_weekly_metrics_week_start_date ON weekly_metrics (week_start_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068188", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068380", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE monthly_metrics (\n\tbarber_id INTEGER NOT NULL, \n\tyear INTEGER NOT NULL, \n\tmonth INTEGER NOT NULL, \n\ttotal_appointments INTEGER, \n\tcompleted_appointments INTEGER, \n\tworking_days INTEGER, \n\ttotal_revenue FLOAT, \n\taverage_daily_revenue FLOAT, \n\thighest_day_revenue FLOAT, \n\tlowest_day_revenue FLOAT, \n\ttotal_customers_served INTEGER, \n\tnew_customers_acquired INTEGER, \n\tcustomer_retention_rate FLOAT, \n\taverage_ticket FLOAT, \n\tbooking_rate FLOAT, \n\trevenue_goal FLOAT, \n\trevenue_goal_achievement FLOAT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068413", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068524", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_monthly_metrics_id ON monthly_metrics (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068550", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068711", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE sixfb_scores (\n\tbarber_id INTEGER NOT NULL, \n\tcalculation_date DATE NOT NULL, \n\tperiod_type VARCHAR(20) NOT NULL, \n\tbooking_utilization_score FLOAT, \n\trevenue_growth_score FLOAT, \n\tcustomer_retention_score FLOAT, \n\taverage_ticket_score FLOAT, \n\tservice_quality_score FLOAT, \n\toverall_score FLOAT, \n\tgrade VARCHAR(2), \n\tpeer_percentile FLOAT, \n\timprovement_from_previous FLOAT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068740", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068844", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sixfb_scores_calculation_date ON sixfb_scores (calculation_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068876", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068969", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_sixfb_scores_id ON sixfb_scores (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.068994", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069164", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE training_enrollments (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tmodule_id INTEGER NOT NULL, \n\tstatus VARCHAR(50), \n\tprogress_percentage FLOAT, \n\tattempts INTEGER, \n\tbest_score FLOAT, \n\tlatest_score FLOAT, \n\tenrolled_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tstarted_at DATETIME, \n\tcompleted_at DATETIME, \n\ttime_spent INTEGER, \n\tcontributes_to_certification VARCHAR(100), \n\tcertification_points FLOAT, \n\tinstructor_notes TEXT, \n\tstudent_feedback TEXT, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(module_id) REFERENCES training_modules (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069194", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069310", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_training_enrollments_id ON training_enrollments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069341", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069474", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE stripe_customers (\n\tid INTEGER NOT NULL, \n\tuser_id INTEGER NOT NULL, \n\tstripe_customer_id VARCHAR(255) NOT NULL, \n\tdefault_payment_method_id INTEGER, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(default_payment_method_id) REFERENCES payment_methods (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069503", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069599", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_stripe_customers_id ON stripe_customers (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069624", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069705", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_stripe_customers_user_id ON stripe_customers (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069735", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069815", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_stripe_customers_stripe_customer_id ON stripe_customers (stripe_customer_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.069844", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070064", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE barber_payment_models (\n\tid INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tlocation_id INTEGER, \n\tpayment_type VARCHAR(12) NOT NULL, \n\tbooth_rent_amount NUMERIC(10, 2), \n\trent_frequency VARCHAR(20), \n\trent_due_day INTEGER, \n\tservice_commission_rate FLOAT, \n\tminimum_service_payout NUMERIC(10, 2), \n\tproduct_commission_rate FLOAT, \n\tminimum_product_payout NUMERIC(10, 2), \n\tstripe_connect_account_id VARCHAR(100), \n\tstripe_onboarding_completed BOOLEAN, \n\tstripe_payouts_enabled BOOLEAN, \n\tenable_instant_payouts BOOLEAN, \n\trentredi_tenant_id VARCHAR(100), \n\trentredi_property_id VARCHAR(100), \n\tsquare_location_id VARCHAR(100), \n\tsquare_employee_id VARCHAR(100), \n\tsquare_merchant_id VARCHAR(100), \n\tsquare_access_token VARCHAR(500), \n\tsquare_account_verified BOOLEAN, \n\tactive BOOLEAN, \n\tauto_collect_rent BOOLEAN, \n\tauto_pay_commissions BOOLEAN, \n\tpayout_method VARCHAR(50), \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tnotes TEXT, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070102", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070228", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_barber_payment_models_id ON barber_payment_models (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070263", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070533", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE compensation_plans (\n\tid INTEGER NOT NULL, \n\tbarber_id INTEGER, \n\tplan_name VARCHAR NOT NULL, \n\tcompensation_type VARCHAR(22) NOT NULL, \n\tis_active BOOLEAN, \n\teffective_date DATETIME, \n\tend_date DATETIME, \n\tbase_salary FLOAT, \n\tsalary_frequency VARCHAR(9), \n\tbooth_rent_amount FLOAT, \n\tbooth_rent_frequency VARCHAR(9), \n\tbooth_rent_due_day INTEGER, \n\tincludes_utilities BOOLEAN, \n\tincludes_products BOOLEAN, \n\tincludes_marketing BOOLEAN, \n\tcommission_structure JSON, \n\tperformance_bonuses JSON, \n\tdeductions JSON, \n\tspecial_conditions JSON, \n\tpayout_settings JSON, \n\ttime_based_rates JSON, \n\tclient_type_rates JSON, \n\tescalation_rules JSON, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tcreated_by INTEGER, \n\tPRIMARY KEY (id), \n\tUNIQUE (barber_id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(created_by) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070566", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070687", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_compensation_plans_id ON compensation_plans (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070713", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070939", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE revenue_shares (\n\tid INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tperiod_type VARCHAR(20) NOT NULL, \n\tperiod_start DATE NOT NULL, \n\tperiod_end DATE NOT NULL, \n\ttotal_revenue FLOAT, \n\tservice_revenue FLOAT, \n\tproduct_revenue FLOAT, \n\ttip_revenue FLOAT, \n\tbase_commission_rate FLOAT, \n\tcertification_bonus_rate FLOAT, \n\tperformance_bonus_rate FLOAT, \n\ttotal_commission_rate FLOAT, \n\tchair_rental FLOAT, \n\tproduct_charges FLOAT, \n\tother_deductions FLOAT, \n\ttotal_deductions FLOAT, \n\tgross_commission FLOAT, \n\tnet_commission FLOAT, \n\tfranchise_fee FLOAT, \n\troyalty_fee FLOAT, \n\tmarketing_fee FLOAT, \n\tpayment_status VARCHAR(20), \n\tpayment_date DATETIME, \n\tpayment_method VARCHAR(50), \n\tpayment_reference VARCHAR(100), \n\tnotes TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.070970", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071103", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_revenue_shares_id ON revenue_shares (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071130", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071367", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE services (\n\tname VARCHAR(200) NOT NULL, \n\tdescription TEXT, \n\tcategory_id INTEGER NOT NULL, \n\tbase_price FLOAT NOT NULL, \n\tmin_price FLOAT, \n\tmax_price FLOAT, \n\tduration_minutes INTEGER NOT NULL, \n\tbuffer_minutes INTEGER, \n\trequires_deposit BOOLEAN, \n\tdeposit_type VARCHAR(20), \n\tdeposit_amount FLOAT, \n\tis_addon BOOLEAN, \n\tcan_overlap BOOLEAN, \n\tmax_advance_days INTEGER, \n\tmin_advance_hours INTEGER, \n\tlocation_id INTEGER, \n\tbarber_id INTEGER, \n\tdisplay_order INTEGER, \n\tis_active BOOLEAN, \n\tis_featured BOOLEAN, \n\ttags JSON, \n\tmeta_description TEXT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tCONSTRAINT check_positive_price CHECK (base_price >= 0), \n\tCONSTRAINT check_positive_duration CHECK (duration_minutes > 0), \n\tCONSTRAINT check_positive_deposit CHECK (deposit_amount >= 0), \n\tFOREIGN KEY(category_id) REFERENCES service_categories (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071407", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071524", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_services_id ON services (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071552", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071734", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE barber_availability (\n\tbarber_id INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\tday_of_week VARCHAR(9) NOT NULL, \n\tstart_time TIME NOT NULL, \n\tend_time TIME NOT NULL, \n\tbreak_start TIME, \n\tbreak_end TIME, \n\tis_available BOOLEAN, \n\tmax_bookings INTEGER, \n\teffective_from DATE, \n\teffective_until DATE, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tCONSTRAINT unique_barber_schedule UNIQUE (barber_id, location_id, day_of_week, start_time), \n\tCONSTRAINT check_valid_hours CHECK (end_time > start_time), \n\tCONSTRAINT check_valid_break CHECK (break_end > break_start OR break_start IS NULL), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071765", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071893", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_barber_availability_id ON barber_availability (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.071920", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072161", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE google_calendar_settings (\n\tbarber_id INTEGER NOT NULL, \n\tis_connected BOOLEAN, \n\tconnection_date DATETIME, \n\tlast_sync_date DATETIME, \n\tgoogle_email VARCHAR(255), \n\tcalendar_id VARCHAR(255), \n\tauto_sync_enabled BOOLEAN, \n\tsync_on_create BOOLEAN, \n\tsync_on_update BOOLEAN, \n\tsync_on_delete BOOLEAN, \n\tsync_all_appointments BOOLEAN, \n\tsync_only_confirmed BOOLEAN, \n\tsync_only_paid BOOLEAN, \n\tinclude_client_email BOOLEAN, \n\tinclude_client_phone BOOLEAN, \n\tinclude_service_price BOOLEAN, \n\tinclude_notes BOOLEAN, \n\tenable_reminders BOOLEAN, \n\treminder_email_minutes INTEGER, \n\treminder_popup_minutes INTEGER, \n\tevent_visibility VARCHAR(20), \n\tshow_client_name BOOLEAN, \n\tshow_service_details BOOLEAN, \n\ttimezone VARCHAR(50), \n\tlast_error TEXT, \n\terror_count INTEGER, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tUNIQUE (barber_id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072200", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072325", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_google_calendar_settings_id ON google_calendar_settings (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072353", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072559", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE square_accounts (\n\tid INTEGER NOT NULL, \n\tbarber_id INTEGER, \n\tsquare_application_id VARCHAR(255) NOT NULL, \n\tsquare_merchant_id VARCHAR(255) NOT NULL, \n\tsquare_location_id VARCHAR(255), \n\taccess_token TEXT NOT NULL, \n\trefresh_token TEXT, \n\ttoken_expires_at DATETIME, \n\ttoken_scope VARCHAR(500), \n\tmerchant_name VARCHAR(255), \n\tmerchant_email VARCHAR(255), \n\tmerchant_phone VARCHAR(50), \n\tmerchant_address TEXT, \n\tcountry VARCHAR(2), \n\tcurrency VARCHAR(3), \n\tbusiness_name VARCHAR(255), \n\tbusiness_type VARCHAR(100), \n\tbusiness_address TEXT, \n\tis_active BOOLEAN, \n\tis_verified BOOLEAN, \n\tcan_receive_payments BOOLEAN, \n\tcan_make_payouts BOOLEAN, \n\tonboarding_completed BOOLEAN, \n\tonboarding_url VARCHAR(500), \n\trequirements_pending TEXT, \n\twebhook_endpoint_id VARCHAR(255), \n\twebhook_signature_key VARCHAR(255), \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tconnected_at DATETIME, \n\tlast_sync_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072594", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072702", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_accounts_square_merchant_id ON square_accounts (square_merchant_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072729", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072807", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_square_accounts_barber_id ON square_accounts (barber_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072834", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072923", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_account_merchant ON square_accounts (square_merchant_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.072947", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073033", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_accounts_square_location_id ON square_accounts (square_location_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073066", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073154", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_accounts_id ON square_accounts (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073183", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073279", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_account_active ON square_accounts (is_active, is_verified)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073308", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073498", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE processor_preferences (\n\tbarber_id INTEGER NOT NULL, \n\tprimary_processor VARCHAR(6), \n\tstripe_enabled BOOLEAN, \n\tsquare_enabled BOOLEAN, \n\tstripe_settings JSON, \n\tsquare_settings JSON, \n\tstripe_effective_rate FLOAT, \n\tsquare_effective_rate FLOAT, \n\tmonthly_volume_threshold FLOAT, \n\taverage_transaction_size FLOAT, \n\tauto_switch_enabled BOOLEAN, \n\tauto_switch_rules JSON, \n\tunified_analytics BOOLEAN, \n\tcomparison_view BOOLEAN, \n\tfee_alert_threshold FLOAT, \n\tprocessor_issue_alerts BOOLEAN, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tUNIQUE (barber_id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073534", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073671", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_processor_preferences_id ON processor_preferences (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073702", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073871", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE revenue_patterns (\n\tbarber_id INTEGER NOT NULL, \n\tpattern_type VARCHAR(50) NOT NULL, \n\tpattern_name VARCHAR(100) NOT NULL, \n\tconfidence_score FLOAT, \n\tpattern_data JSON, \n\tavg_revenue_impact FLOAT, \n\tfrequency VARCHAR(50), \n\tstart_date DATE NOT NULL, \n\tend_date DATE NOT NULL, \n\tmodel_version VARCHAR(20), \n\tlast_updated DATETIME, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.073906", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074004", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_revenue_patterns_barber_type ON revenue_patterns (barber_id, pattern_type)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074034", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074125", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_revenue_patterns_id ON revenue_patterns (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074156", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074237", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_revenue_patterns_confidence ON revenue_patterns (confidence_score)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074267", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074420", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE revenue_predictions (\n\tbarber_id INTEGER NOT NULL, \n\tprediction_date DATE NOT NULL, \n\tprediction_type VARCHAR(20), \n\tpredicted_revenue FLOAT NOT NULL, \n\tconfidence_interval_low FLOAT, \n\tconfidence_interval_high FLOAT, \n\tconfidence_score FLOAT, \n\tpredicted_appointments INTEGER, \n\tpredicted_new_clients INTEGER, \n\tpredicted_avg_ticket FLOAT, \n\tfactors_data JSON, \n\tmodel_version VARCHAR(20), \n\tcreated_at DATETIME, \n\tid INTEGER NOT NULL, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tUNIQUE (barber_id, prediction_date, prediction_type), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074456", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074575", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_predictions_barber_date ON revenue_predictions (barber_id, prediction_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074603", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074689", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_revenue_predictions_id ON revenue_predictions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074715", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074877", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE pricing_optimizations (\n\tbarber_id INTEGER NOT NULL, \n\tservice_name VARCHAR(200), \n\tcurrent_price FLOAT NOT NULL, \n\trecommended_price FLOAT NOT NULL, \n\tprice_elasticity FLOAT, \n\texpected_revenue_change FLOAT, \n\texpected_demand_change FLOAT, \n\tconfidence_score FLOAT, \n\trecommendation_reason TEXT, \n\tmarket_analysis JSON, \n\tstatus VARCHAR(20), \n\timplemented_date DATETIME, \n\tactual_impact JSON, \n\tcreated_at DATETIME, \n\texpires_at DATETIME, \n\tid INTEGER NOT NULL, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.074907", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075018", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_pricing_optimizations_id ON pricing_optimizations (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075049", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075138", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_pricing_barber_status ON pricing_optimizations (barber_id, status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075163", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075318", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE client_segments (\n\tbarber_id INTEGER NOT NULL, \n\tsegment_name VARCHAR(100) NOT NULL, \n\tsegment_type VARCHAR(50), \n\tdescription TEXT, \n\tcharacteristics JSON, \n\tsize INTEGER, \n\tavg_lifetime_value FLOAT, \n\tavg_visit_frequency FLOAT, \n\tavg_ticket_size FLOAT, \n\tengagement_strategy TEXT, \n\trecommended_services JSON, \n\trecommended_promotions JSON, \n\trevenue_contribution FLOAT, \n\tgrowth_rate FLOAT, \n\tchurn_risk FLOAT, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tid INTEGER NOT NULL, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075348", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075458", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_client_segments_id ON client_segments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075487", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075658", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE revenue_insights (\n\tbarber_id INTEGER NOT NULL, \n\tinsight_type VARCHAR(50) NOT NULL, \n\tcategory VARCHAR(50), \n\ttitle VARCHAR(200) NOT NULL, \n\tdescription TEXT NOT NULL, \n\tpotential_impact FLOAT, \n\tpriority VARCHAR(20), \n\tconfidence_score FLOAT, \n\trecommendations JSON, \n\tstatus VARCHAR(20), \n\tviewed_at DATETIME, \n\timplemented_at DATETIME, \n\tvalid_from DATETIME, \n\tvalid_until DATETIME, \n\tactual_impact JSON, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075687", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075805", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_insights_barber_status ON revenue_insights (barber_id, status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075830", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075927", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_insights_priority ON revenue_insights (priority)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.075955", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076038", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_revenue_insights_id ON revenue_insights (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076064", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076234", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE performance_benchmarks (\n\tbarber_id INTEGER NOT NULL, \n\tperiod_type VARCHAR(20), \n\tperiod_start DATE NOT NULL, \n\tperiod_end DATE NOT NULL, \n\ttotal_revenue FLOAT NOT NULL, \n\ttotal_appointments INTEGER, \n\tavg_ticket FLOAT, \n\tclient_retention_rate FLOAT, \n\tbooking_utilization FLOAT, \n\trevenue_percentile FLOAT, \n\tefficiency_percentile FLOAT, \n\tgrowth_percentile FLOAT, \n\tretention_percentile FLOAT, \n\tpeer_group_size INTEGER, \n\tpeer_avg_revenue FLOAT, \n\tpeer_avg_appointments INTEGER, \n\trevenue_growth_rate FLOAT, \n\tappointment_growth_rate FLOAT, \n\tnew_client_acquisition_rate FLOAT, \n\timprovement_areas JSON, \n\tcreated_at DATETIME, \n\tid INTEGER NOT NULL, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tUNIQUE (barber_id, period_type, period_start), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076264", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076378", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_benchmarks_barber_period ON performance_benchmarks (barber_id, period_start)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076405", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076496", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_performance_benchmarks_id ON performance_benchmarks (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076523", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076690", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE revenue_optimization_goals (\n\tbarber_id INTEGER NOT NULL, \n\tgoal_type VARCHAR(50), \n\tgoal_name VARCHAR(200), \n\tdescription TEXT, \n\tcurrent_value FLOAT NOT NULL, \n\ttarget_value FLOAT NOT NULL, \n\ttarget_date DATE NOT NULL, \n\trecommended_actions JSON, \n\testimated_difficulty VARCHAR(20), \n\tsuccess_probability FLOAT, \n\tprogress_percentage FLOAT, \n\tlast_updated_value FLOAT, \n\tlast_updated DATETIME, \n\tstatus VARCHAR(20), \n\tachieved_date DATETIME, \n\tcreated_at DATETIME, \n\tid INTEGER NOT NULL, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076720", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076822", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_revenue_optimization_goals_id ON revenue_optimization_goals (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076850", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076946", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_goals_barber_status ON revenue_optimization_goals (barber_id, status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.076973", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077145", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE customer_payment_methods (\n\tid INTEGER NOT NULL, \n\tcustomer_id INTEGER NOT NULL, \n\ttype VARCHAR(50) NOT NULL, \n\tprovider VARCHAR(50) NOT NULL, \n\tprovider_payment_method_id VARCHAR(255) NOT NULL, \n\tlast_four VARCHAR(4), \n\tbrand VARCHAR(50), \n\texp_month INTEGER, \n\texp_year INTEGER, \n\tis_default BOOLEAN, \n\tis_active BOOLEAN, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(customer_id) REFERENCES customers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077176", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077279", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_customer_payment_methods_id ON customer_payment_methods (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077306", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077498", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payout_schedules (\n\tid INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tfrequency VARCHAR(8) NOT NULL, \n\tday_of_week INTEGER, \n\tday_of_month INTEGER, \n\tcustom_interval_days INTEGER, \n\tminimum_payout_amount DECIMAL(10, 2), \n\tauto_payout_enabled BOOLEAN, \n\temail_notifications BOOLEAN, \n\tsms_notifications BOOLEAN, \n\tadvance_notice_days INTEGER, \n\tpreferred_payment_method VARCHAR(50), \n\tbackup_payment_method VARCHAR(50), \n\tis_active BOOLEAN, \n\tlast_payout_date DATETIME, \n\tnext_payout_date DATETIME, \n\ttotal_payouts_sent INTEGER, \n\ttotal_amount_paid DECIMAL(12, 2), \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077528", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077650", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payout_schedules_id ON payout_schedules (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077677", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077855", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE product_sync_logs (\n\tid INTEGER NOT NULL, \n\tproduct_id INTEGER NOT NULL, \n\tsync_type VARCHAR(20) NOT NULL, \n\tsource_platform VARCHAR(7) NOT NULL, \n\tsync_direction VARCHAR(10) NOT NULL, \n\tstatus VARCHAR(7) NOT NULL, \n\trecords_processed INTEGER, \n\trecords_created INTEGER, \n\trecords_updated INTEGER, \n\trecords_failed INTEGER, \n\terror_message TEXT, \n\terror_code VARCHAR(50), \n\tstarted_at DATETIME NOT NULL, \n\tcompleted_at DATETIME, \n\tinitiated_by INTEGER, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(product_id) REFERENCES products (id), \n\tFOREIGN KEY(initiated_by) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077888", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.077989", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_product_sync_logs_product_id ON product_sync_logs (product_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078016", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078102", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_product_sync_logs_id ON product_sync_logs (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078128", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078290", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE pos_sessions (\n\tsession_token VARCHAR(255) NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tdevice_info VARCHAR(500), \n\tip_address VARCHAR(45), \n\tlocation_info VARCHAR(255), \n\tis_active BOOLEAN, \n\texpires_at DATETIME NOT NULL, \n\tlast_activity DATETIME, \n\tlogin_method VARCHAR(50), \n\tlogout_reason VARCHAR(100), \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078321", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078422", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_pos_sessions_session_token ON pos_sessions (session_token)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078449", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078539", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_pos_sessions_id ON pos_sessions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078566", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078719", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE workflow_logs (\n\tid INTEGER NOT NULL, \n\trule_id INTEGER NOT NULL, \n\texecution_id VARCHAR(100) NOT NULL, \n\ttrigger_data JSON, \n\tstatus VARCHAR(20) NOT NULL, \n\tstarted_at DATETIME NOT NULL, \n\tcompleted_at DATETIME, \n\texecution_time FLOAT, \n\taction_results JSON, \n\terror_message TEXT, \n\taffected_entity_type VARCHAR(50), \n\taffected_entity_id INTEGER, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(rule_id) REFERENCES automation_rules (id), \n\tUNIQUE (execution_id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078749", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078868", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_workflow_logs_id ON workflow_logs (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.078899", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079056", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE training_attempts (\n\tid INTEGER NOT NULL, \n\tenrollment_id INTEGER NOT NULL, \n\tattempt_number INTEGER NOT NULL, \n\tstarted_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tcompleted_at DATETIME, \n\tscore FLOAT, \n\tpassed BOOLEAN, \n\ttime_taken INTEGER, \n\tanswers JSON, \n\tfeedback TEXT, \n\tareas_for_improvement JSON, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(enrollment_id) REFERENCES training_enrollments (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079086", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079190", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_training_attempts_id ON training_attempts (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079215", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079388", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE booth_rent_payments (\n\tid INTEGER NOT NULL, \n\tpayment_model_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tamount_due NUMERIC(10, 2) NOT NULL, \n\tamount_paid NUMERIC(10, 2), \n\tdue_date DATETIME NOT NULL, \n\tpaid_date DATETIME, \n\tperiod_start DATETIME NOT NULL, \n\tperiod_end DATETIME NOT NULL, \n\tstatus VARCHAR(9), \n\tpayment_method VARCHAR(50), \n\trentredi_payment_id VARCHAR(100), \n\trentredi_transaction_id VARCHAR(100), \n\tlate_fee_amount NUMERIC(10, 2), \n\tgrace_period_days INTEGER, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tnotes TEXT, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(payment_model_id) REFERENCES barber_payment_models (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079418", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079535", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_booth_rent_payments_id ON booth_rent_payments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079561", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079775", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE commission_payments (\n\tid INTEGER NOT NULL, \n\tpayment_model_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tperiod_start DATETIME NOT NULL, \n\tperiod_end DATETIME NOT NULL, \n\tservice_revenue NUMERIC(10, 2), \n\tservice_commission_rate FLOAT, \n\tservice_commission_amount NUMERIC(10, 2), \n\tproduct_revenue NUMERIC(10, 2), \n\tproduct_commission_rate FLOAT, \n\tproduct_commission_amount NUMERIC(10, 2), \n\ttotal_commission NUMERIC(10, 2) NOT NULL, \n\ttotal_paid NUMERIC(10, 2), \n\tstatus VARCHAR(9), \n\tpayment_method VARCHAR(50), \n\tpaid_date DATETIME, \n\tstripe_transfer_id VARCHAR(100), \n\tstripe_payout_id VARCHAR(100), \n\tpayout_status VARCHAR(50), \n\tpayout_arrival_date DATETIME, \n\tshop_owner_amount NUMERIC(10, 2), \n\tbarber_amount NUMERIC(10, 2), \n\tadjustment_amount NUMERIC(10, 2), \n\tadjustment_reason VARCHAR(200), \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tnotes TEXT, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(payment_model_id) REFERENCES barber_payment_models (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079808", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079919", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_commission_payments_id ON commission_payments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.079947", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080115", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payment_history (\n\tid INTEGER NOT NULL, \n\tcompensation_plan_id INTEGER, \n\tbarber_id INTEGER, \n\tpayment_type VARCHAR NOT NULL, \n\tpayment_period_start DATETIME NOT NULL, \n\tpayment_period_end DATETIME NOT NULL, \n\tgross_amount FLOAT NOT NULL, \n\tdeductions FLOAT, \n\tnet_amount FLOAT NOT NULL, \n\tpayment_method VARCHAR NOT NULL, \n\tpayment_status VARCHAR NOT NULL, \n\tpayment_date DATETIME, \n\tpayment_reference VARCHAR, \n\tpayment_breakdown JSON, \n\tcreated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(compensation_plan_id) REFERENCES compensation_plans (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080145", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080255", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_history_id ON payment_history (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080283", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080442", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE commissions (\n\tid INTEGER NOT NULL, \n\trevenue_share_id INTEGER NOT NULL, \n\tcomponent_type VARCHAR(50) NOT NULL, \n\tdescription VARCHAR(255), \n\trate FLOAT, \n\tamount FLOAT, \n\tcondition_met BOOLEAN, \n\tcondition_details TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(revenue_share_id) REFERENCES revenue_shares (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080470", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080572", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_commissions_id ON commissions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080594", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080755", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE booking_rules (\n\tlocation_id INTEGER, \n\tbarber_id INTEGER, \n\tservice_id INTEGER, \n\trule_type VARCHAR(50) NOT NULL, \n\trule_name VARCHAR(100) NOT NULL, \n\tdescription TEXT, \n\tparameters JSON NOT NULL, \n\tpriority INTEGER, \n\tis_active BOOLEAN, \n\teffective_from DATETIME, \n\teffective_until DATETIME, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(service_id) REFERENCES services (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080787", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080898", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_booking_rules_id ON booking_rules (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.080925", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081114", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE booking_slots (\n\tbarber_id INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\tservice_id INTEGER NOT NULL, \n\tslot_date DATE NOT NULL, \n\tstart_time TIME NOT NULL, \n\tend_time TIME NOT NULL, \n\tis_available BOOLEAN, \n\tis_blocked BOOLEAN, \n\tblock_reason VARCHAR(200), \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tCONSTRAINT unique_booking_slot UNIQUE (barber_id, location_id, slot_date, start_time), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id), \n\tFOREIGN KEY(service_id) REFERENCES services (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081144", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081279", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_booking_slots_id ON booking_slots (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081309", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081485", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE wait_lists (\n\tclient_id INTEGER NOT NULL, \n\tbarber_id INTEGER, \n\tservice_id INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\tpreferred_date DATE NOT NULL, \n\tpreferred_time_start TIME, \n\tpreferred_time_end TIME, \n\tflexibility_days INTEGER, \n\tstatus VARCHAR(20), \n\tnotification_sent_at DATETIME, \n\texpires_at DATETIME, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(client_id) REFERENCES clients (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(service_id) REFERENCES services (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081520", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081645", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_wait_lists_id ON wait_lists (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081675", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081862", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE processor_metrics (\n\tpreference_id INTEGER NOT NULL, \n\tprocessor VARCHAR(6) NOT NULL, \n\ttotal_transactions INTEGER, \n\ttotal_volume FLOAT, \n\ttotal_fees FLOAT, \n\taverage_processing_time FLOAT, \n\tsuccess_rate FLOAT, \n\tfailed_transactions INTEGER, \n\tdisputed_transactions INTEGER, \n\ttotal_payouts INTEGER, \n\taverage_payout_time FLOAT, \n\tinstant_payout_count INTEGER, \n\tinstant_payout_fees FLOAT, \n\tmonthly_metrics JSON, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(preference_id) REFERENCES processor_preferences (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.081896", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082008", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_processor_metrics_id ON processor_metrics (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082033", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082229", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE scheduled_payouts (\n\tid INTEGER NOT NULL, \n\tschedule_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tpayout_type VARCHAR(17) NOT NULL, \n\tamount DECIMAL(10, 2) NOT NULL, \n\tcurrency VARCHAR(3), \n\tperiod_start DATETIME NOT NULL, \n\tperiod_end DATETIME NOT NULL, \n\tstatus VARCHAR(10), \n\tscheduled_date DATETIME NOT NULL, \n\tprocessed_date DATETIME, \n\tpayment_method VARCHAR(50), \n\tplatform_payout_id VARCHAR(255), \n\tplatform_transfer_id VARCHAR(255), \n\tplatform_fee DECIMAL(8, 2), \n\tnet_amount DECIMAL(10, 2), \n\tfailure_reason TEXT, \n\tretry_count INTEGER, \n\tmax_retries INTEGER, \n\tnext_retry_date DATETIME, \n\tnotification_sent BOOLEAN, \n\tnotification_sent_date DATETIME, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(schedule_id) REFERENCES payout_schedules (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082259", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082380", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_scheduled_payouts_id ON scheduled_payouts (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082407", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082674", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE appointment_series (\n\tid INTEGER NOT NULL, \n\tseries_token VARCHAR(32) NOT NULL, \n\tseries_name VARCHAR(100), \n\tclient_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tservice_id INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\trecurrence_pattern VARCHAR(13) NOT NULL, \n\tinterval_weeks INTEGER, \n\tpreferred_time TIME NOT NULL, \n\tpreferred_day_of_week INTEGER, \n\tpreferred_week_of_month INTEGER, \n\tduration_minutes INTEGER NOT NULL, \n\tstart_date DATE NOT NULL, \n\tend_date DATE, \n\tmax_appointments INTEGER, \n\tstatus VARCHAR(9), \n\tis_flexible_time BOOLEAN, \n\tadvance_booking_days INTEGER, \n\tauto_confirm BOOLEAN, \n\tseries_discount_percent NUMERIC(5, 2), \n\ttotal_series_price NUMERIC(10, 2), \n\tpayment_frequency VARCHAR(20), \n\treminder_days_before INTEGER, \n\tsend_series_updates BOOLEAN, \n\tbuffer_time_minutes INTEGER, \n\tmax_reschedule_attempts INTEGER, \n\tnotes TEXT, \n\tcreated_by_customer BOOLEAN, \n\tspecial_instructions TEXT, \n\ttotal_appointments_created INTEGER, \n\ttotal_appointments_completed INTEGER, \n\ttotal_appointments_cancelled INTEGER, \n\tlast_appointment_date DATE, \n\tnext_appointment_date DATE, \n\tcreated_at DATETIME, \n\tupdated_at DATETIME, \n\tpaused_at DATETIME, \n\tcancelled_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(client_id) REFERENCES clients (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(service_id) REFERENCES services (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082712", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082846", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_appointment_series_series_token ON appointment_series (series_token)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082874", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082964", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_appointment_series_id ON appointment_series (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.082989", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083260", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE appointments (\n\tappointment_date DATE NOT NULL, \n\tappointment_time DATETIME, \n\tduration_minutes INTEGER, \n\tbarber_id INTEGER NOT NULL, \n\tclient_id INTEGER NOT NULL, \n\tcustomer_id INTEGER, \n\tseries_id INTEGER, \n\tservice_revenue FLOAT NOT NULL, \n\ttip_amount FLOAT, \n\tproduct_revenue FLOAT, \n\tcustomer_type VARCHAR(20) NOT NULL, \n\treference_source VARCHAR(100), \n\tstatus VARCHAR(20), \n\tis_completed BOOLEAN, \n\tcompletion_time DATETIME, \n\tservice_name VARCHAR(200), \n\tservice_category VARCHAR(100), \n\tadd_ons TEXT, \n\tpayment_method VARCHAR(50), \n\tpayment_status VARCHAR(20), \n\tdeposit_amount FLOAT, \n\tbarber_notes TEXT, \n\tclient_notes TEXT, \n\ttags VARCHAR(500), \n\tbooking_source VARCHAR(50), \n\tbooking_device VARCHAR(50), \n\tbooking_time DATETIME, \n\tgoogle_calendar_event_id VARCHAR(255), \n\tclient_satisfaction INTEGER, \n\tservice_rating INTEGER, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(client_id) REFERENCES clients (id), \n\tFOREIGN KEY(customer_id) REFERENCES customers (id), \n\tFOREIGN KEY(series_id) REFERENCES appointment_series (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083295", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083414", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_appointments_appointment_date ON appointments (appointment_date)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083441", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083537", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_appointments_id ON appointments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083563", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083718", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payout_notifications (\n\tid INTEGER NOT NULL, \n\tscheduled_payout_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tnotification_type VARCHAR(50), \n\tchannel VARCHAR(20), \n\trecipient VARCHAR(255), \n\tsubject VARCHAR(255), \n\tmessage TEXT, \n\ttemplate_used VARCHAR(100), \n\tsent_at DATETIME, \n\tdelivery_status VARCHAR(20), \n\tdelivery_error TEXT, \n\topened_at DATETIME, \n\tclicked_at DATETIME, \n\tcreated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(scheduled_payout_id) REFERENCES scheduled_payouts (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083747", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083860", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payout_notifications_id ON payout_notifications (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.083887", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084046", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE series_exclusions (\n\tid INTEGER NOT NULL, \n\tseries_id INTEGER NOT NULL, \n\texclusion_date DATE NOT NULL, \n\texclusion_reason VARCHAR(100), \n\tis_permanent BOOLEAN, \n\treschedule_to_date DATE, \n\treschedule_to_time TIME, \n\tcreated_at DATETIME, \n\tcreated_by VARCHAR(50), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(series_id) REFERENCES appointment_series (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084076", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084176", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_series_exclusions_id ON series_exclusions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084210", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084358", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE series_change_log (\n\tid INTEGER NOT NULL, \n\tseries_id INTEGER NOT NULL, \n\tchange_type VARCHAR(50) NOT NULL, \n\tfield_changed VARCHAR(50), \n\told_value TEXT, \n\tnew_value TEXT, \n\tchange_reason TEXT, \n\tchanged_by_type VARCHAR(20) NOT NULL, \n\tchanged_by_id INTEGER, \n\taffected_appointments INTEGER, \n\tcreated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(series_id) REFERENCES appointment_series (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084388", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084490", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_series_change_log_id ON series_change_log (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084517", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084713", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payments (\n\tid INTEGER NOT NULL, \n\tappointment_id INTEGER, \n\tuser_id INTEGER NOT NULL, \n\tpayment_method_id INTEGER, \n\tpayment_type VARCHAR(12), \n\tstripe_payment_intent_id VARCHAR(255) NOT NULL, \n\tstripe_charge_id VARCHAR(255), \n\tsubscription_id VARCHAR(255), \n\tprice_id VARCHAR(255), \n\tbilling_period_start DATETIME, \n\tbilling_period_end DATETIME, \n\tamount INTEGER NOT NULL, \n\tcurrency VARCHAR(3) NOT NULL, \n\tstatus VARCHAR(18) NOT NULL, \n\tdescription TEXT, \n\tmeta_data JSON, \n\tfailure_code VARCHAR(50), \n\tfailure_message TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tpaid_at DATETIME, \n\tPRIMARY KEY (id), \n\tCONSTRAINT check_positive_amount CHECK (amount > 0), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(user_id) REFERENCES users (id), \n\tFOREIGN KEY(payment_method_id) REFERENCES payment_methods (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084746", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084862", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payments_id ON payments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084889", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.084973", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_payments_stripe_charge_id ON payments (stripe_charge_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085000", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085079", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payments_status ON payments (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085104", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085186", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payments_appointment ON payments (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085212", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085291", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payments_user_id ON payments (user_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085315", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085390", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payments_created_at ON payments (created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085415", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085498", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payments_appointment_id ON payments (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085523", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085600", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payments_subscription_id ON payments (subscription_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085626", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085718", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_payments_stripe_payment_intent_id ON payments (stripe_payment_intent_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085746", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085832", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_payments_user_status ON payments (user_id, status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.085858", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086088", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE product_sales (\n\tid INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tproduct_id INTEGER, \n\tproduct_name VARCHAR(200) NOT NULL, \n\tproduct_sku VARCHAR(100), \n\tcategory VARCHAR(100), \n\tsale_price NUMERIC(10, 2) NOT NULL, \n\tcost_price NUMERIC(10, 2), \n\tquantity INTEGER, \n\ttotal_amount NUMERIC(10, 2) NOT NULL, \n\tcommission_rate FLOAT NOT NULL, \n\tcommission_amount NUMERIC(10, 2) NOT NULL, \n\tcommission_paid BOOLEAN, \n\tsales_source VARCHAR(9), \n\tsquare_transaction_id VARCHAR(100), \n\tsquare_payment_id VARCHAR(100), \n\tsquare_location_id VARCHAR(100), \n\tshopify_order_id VARCHAR(100), \n\tshopify_order_number VARCHAR(50), \n\tshopify_product_id VARCHAR(100), \n\tshopify_variant_id VARCHAR(100), \n\tshopify_fulfillment_status VARCHAR(50), \n\texternal_transaction_id VARCHAR(100), \n\tsync_status VARCHAR(50), \n\tlast_sync_attempt DATETIME, \n\tsync_error_message TEXT, \n\tcustomer_name VARCHAR(200), \n\tcustomer_email VARCHAR(200), \n\tappointment_id INTEGER, \n\tsale_date DATETIME, \n\tcreated_at DATETIME, \n\tnotes TEXT, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(product_id) REFERENCES products (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086125", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086260", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_product_sales_id ON product_sales (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086287", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086491", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE reviews (\n\tappointment_id INTEGER NOT NULL, \n\tbarber_id INTEGER NOT NULL, \n\tclient_id INTEGER NOT NULL, \n\tlocation_id INTEGER NOT NULL, \n\toverall_rating VARCHAR(11) NOT NULL, \n\tservice_rating VARCHAR(11), \n\tcleanliness_rating VARCHAR(11), \n\tpunctuality_rating VARCHAR(11), \n\tvalue_rating VARCHAR(11), \n\ttitle VARCHAR(200), \n\tcomment TEXT, \n\tbarber_response TEXT, \n\tbarber_response_date DATETIME, \n\tis_verified BOOLEAN, \n\tverification_date DATETIME, \n\tis_featured BOOLEAN, \n\tis_hidden BOOLEAN, \n\thide_reason VARCHAR(200), \n\tphotos JSON, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tUNIQUE (appointment_id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(client_id) REFERENCES clients (id), \n\tFOREIGN KEY(location_id) REFERENCES locations (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086525", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086657", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_reviews_id ON reviews (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086683", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086840", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE google_calendar_sync_logs (\n\tbarber_id INTEGER NOT NULL, \n\tappointment_id INTEGER, \n\toperation VARCHAR(20) NOT NULL, \n\tdirection VARCHAR(20) NOT NULL, \n\tstatus VARCHAR(20) NOT NULL, \n\tgoogle_event_id VARCHAR(255), \n\tgoogle_calendar_id VARCHAR(255), \n\terror_message TEXT, \n\tretry_count INTEGER, \n\tsync_data TEXT, \n\tresponse_data TEXT, \n\tid INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086870", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.086977", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_google_calendar_sync_logs_id ON google_calendar_sync_logs (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087005", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087218", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE square_payments (\n\tid INTEGER NOT NULL, \n\tsquare_payment_id VARCHAR(255) NOT NULL, \n\tsquare_order_id VARCHAR(255), \n\tsquare_receipt_number VARCHAR(255), \n\tsquare_receipt_url VARCHAR(500), \n\tamount_money NUMERIC(10, 2) NOT NULL, \n\tcurrency VARCHAR(3), \n\ttip_money NUMERIC(10, 2), \n\ttotal_money NUMERIC(10, 2) NOT NULL, \n\tstatus VARCHAR(50), \n\tapproved_money NUMERIC(10, 2), \n\tprocessing_fee_money NUMERIC(10, 2), \n\tcard_brand VARCHAR(50), \n\tcard_last_four VARCHAR(4), \n\tcard_exp_month INTEGER, \n\tcard_exp_year INTEGER, \n\tbuyer_email_address VARCHAR(255), \n\tbilling_address TEXT, \n\tshipping_address TEXT, \n\tappointment_id INTEGER, \n\tbarber_id INTEGER, \n\tsource_type VARCHAR(50), \n\tapplication_details TEXT, \n\tdevice_details TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087248", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087375", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_square_payments_square_payment_id ON square_payments (square_payment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087403", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087494", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payment_status_created ON square_payments (status, created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087521", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087614", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payment_barber_date ON square_payments (barber_id, created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087640", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087728", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payments_id ON square_payments (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087754", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087841", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payment_appointment ON square_payments (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087865", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087965", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payments_square_order_id ON square_payments (square_order_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.087991", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088080", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payments_barber_id ON square_payments (barber_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088104", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088179", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payments_appointment_id ON square_payments (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088203", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088359", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE gift_certificate_redemptions (\n\tid INTEGER NOT NULL, \n\tgift_certificate_id INTEGER NOT NULL, \n\tappointment_id INTEGER NOT NULL, \n\tamount_used INTEGER NOT NULL, \n\tbalance_before INTEGER NOT NULL, \n\tbalance_after INTEGER NOT NULL, \n\tredeemed_by_id INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tCONSTRAINT check_positive_amount_used CHECK (amount_used > 0), \n\tCONSTRAINT check_non_negative_balance_after CHECK (balance_after >= 0), \n\tCONSTRAINT check_balance_decreased CHECK (balance_before > balance_after), \n\tFOREIGN KEY(gift_certificate_id) REFERENCES gift_certificates (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(redeemed_by_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088393", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088502", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_redemptions_certificate ON gift_certificate_redemptions (gift_certificate_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088529", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088625", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificate_redemptions_id ON gift_certificate_redemptions (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088650", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088731", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_redemptions_appointment ON gift_certificate_redemptions (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088758", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088856", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificate_redemptions_appointment_id ON gift_certificate_redemptions (appointment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088886", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.088972", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_redemptions_user ON gift_certificate_redemptions (redeemed_by_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089002", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089093", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_gift_certificate_redemptions_gift_certificate_id ON gift_certificate_redemptions (gift_certificate_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089119", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089280", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE refunds (\n\tid INTEGER NOT NULL, \n\tpayment_id INTEGER NOT NULL, \n\tstripe_refund_id VARCHAR(255) NOT NULL, \n\tamount INTEGER NOT NULL, \n\treason VARCHAR(255), \n\tstatus VARCHAR(9) NOT NULL, \n\tmeta_data JSON, \n\tfailure_reason TEXT, \n\tinitiated_by_id INTEGER NOT NULL, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME, \n\trefunded_at DATETIME, \n\tPRIMARY KEY (id), \n\tCONSTRAINT check_positive_refund_amount CHECK (amount > 0), \n\tFOREIGN KEY(payment_id) REFERENCES payments (id), \n\tFOREIGN KEY(initiated_by_id) REFERENCES users (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089312", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089437", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_refunds_created_at ON refunds (created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089465", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089555", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_refunds_status ON refunds (status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089579", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089668", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_refunds_id ON refunds (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089696", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089787", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_refunds_stripe_refund_id ON refunds (stripe_refund_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089814", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089902", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_refunds_payment_status ON refunds (payment_id, status)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.089928", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090020", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_refunds_payment_id ON refunds (payment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090045", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090194", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payment_webhook_events (\n\tid INTEGER NOT NULL, \n\tstripe_event_id VARCHAR(255) NOT NULL, \n\tevent_type VARCHAR(100) NOT NULL, \n\tpayment_id INTEGER, \n\tdata JSON NOT NULL, \n\tprocessed BOOLEAN NOT NULL, \n\tprocessed_at DATETIME, \n\terror TEXT, \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(payment_id) REFERENCES payments (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090224", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090334", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_webhook_events_event_type ON payment_webhook_events (event_type)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090364", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00004s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090451", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_webhook_events_processed ON payment_webhook_events (processed)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090477", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090564", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_webhook_events_payment_id ON payment_webhook_events (payment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090590", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090678", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_payment_webhook_events_stripe_event_id ON payment_webhook_events (stripe_event_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090703", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090789", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_webhook_events_type_processed ON payment_webhook_events (event_type, processed)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090814", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090893", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payment_webhook_events_id ON payment_webhook_events (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.090918", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00002s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091000", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_webhook_events_created_at ON payment_webhook_events (created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091027", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091206", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE commission_calculations (\n\tid INTEGER NOT NULL, \n\tcompensation_plan_id INTEGER, \n\tbarber_id INTEGER, \n\tappointment_id INTEGER, \n\tproduct_sale_id INTEGER, \n\tcalculation_date DATETIME, \n\tservice_type VARCHAR, \n\tservice_amount FLOAT NOT NULL, \n\tcommission_rate FLOAT NOT NULL, \n\tcommission_amount FLOAT NOT NULL, \n\tbonuses_applied JSON, \n\tbonus_amount FLOAT, \n\tdeductions_applied JSON, \n\tdeduction_amount FLOAT, \n\tgross_commission FLOAT NOT NULL, \n\tnet_commission FLOAT NOT NULL, \n\tis_paid BOOLEAN, \n\tpaid_date DATETIME, \n\tpayment_reference VARCHAR, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(compensation_plan_id) REFERENCES compensation_plans (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(product_sale_id) REFERENCES product_sales (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091236", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091358", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_commission_calculations_id ON commission_calculations (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091385", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091603", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE square_payouts (\n\tid INTEGER NOT NULL, \n\tsquare_payout_id VARCHAR(255), \n\tsquare_batch_id VARCHAR(255), \n\tamount_money NUMERIC(10, 2) NOT NULL, \n\tcurrency VARCHAR(3), \n\tstatus VARCHAR(50), \n\tpayment_id INTEGER, \n\tsquare_account_id INTEGER, \n\tbarber_id INTEGER, \n\toriginal_amount NUMERIC(10, 2) NOT NULL, \n\tcommission_rate NUMERIC(5, 4) NOT NULL, \n\tcommission_amount NUMERIC(10, 2) NOT NULL, \n\tplatform_fee NUMERIC(10, 2), \n\tprocessing_fee NUMERIC(10, 2), \n\tnet_amount NUMERIC(10, 2) NOT NULL, \n\tpayout_fee NUMERIC(10, 2), \n\tdestination_type VARCHAR(50), \n\tdestination_details TEXT, \n\tscheduled_at DATETIME, \n\tsent_at DATETIME, \n\tpaid_at DATETIME, \n\tfailed_at DATETIME, \n\tfailure_reason VARCHAR(500), \n\tfailure_code VARCHAR(100), \n\tretry_count INTEGER, \n\tdescription VARCHAR(500), \n\treference_id VARCHAR(255), \n\tcreated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tupdated_at DATETIME DEFAULT (CURRENT_TIMESTAMP), \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(payment_id) REFERENCES square_payments (id), \n\tFOREIGN KEY(square_account_id) REFERENCES square_accounts (id), \n\tFOREIGN KEY(barber_id) REFERENCES barbers (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091639", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091782", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_square_batch_id ON square_payouts (square_batch_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091810", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091901", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_reference_id ON square_payouts (reference_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.091928", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092017", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_barber_id ON square_payouts (barber_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092042", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092125", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payout_status_created ON square_payouts (status, created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092150", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092232", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_square_account_id ON square_payouts (square_account_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092261", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092356", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_payment_id ON square_payouts (payment_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092383", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092480", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE UNIQUE INDEX ix_square_payouts_square_payout_id ON square_payouts (square_payout_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092506", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092605", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payout_barber_date ON square_payouts (barber_id, created_at)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092632", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092728", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_square_payouts_id ON square_payouts (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092754", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092857", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX idx_square_payout_account ON square_payouts (square_account_id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.092889", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.093035", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "\nCREATE TABLE payout_earnings (\n\tid INTEGER NOT NULL, \n\tscheduled_payout_id INTEGER NOT NULL, \n\tappointment_id INTEGER, \n\tpayment_id INTEGER, \n\tearning_type VARCHAR(50), \n\tgross_amount DECIMAL(10, 2) NOT NULL, \n\tcommission_rate DECIMAL(5, 4), \n\tcommission_amount DECIMAL(10, 2) NOT NULL, \n\tearned_date DATETIME NOT NULL, \n\tservice_name VARCHAR(200), \n\tcustomer_name VARCHAR(200), \n\tcreated_at DATETIME, \n\tPRIMARY KEY (id), \n\tFOREIGN KEY(scheduled_payout_id) REFERENCES scheduled_payouts (id), \n\tFOREIGN KEY(appointment_id) REFERENCES appointments (id), \n\tFOREIGN KEY(payment_id) REFERENCES payments (id)\n)\n\n", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.093066", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.093187", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "CREATE INDEX ix_payout_earnings_id ON payout_earnings (id)", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.093215", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[no key 0.00003s] ()", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.093323", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "COMMIT", "module": "base", "function": "_connection_commit_impl", "line": 2707}
{"timestamp": "2025-06-30T13:28:29.093376", "level": "INFO", "logger": "main", "message": "Database tables created successfully", "module": "main", "function": "startup_event", "line": 412}
{"timestamp": "2025-06-30T13:28:29.093526", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Adding job tentatively -- it will be properly scheduled when the scheduler starts", "module": "base", "function": "add_job", "line": 454}
{"timestamp": "2025-06-30T13:28:29.093597", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Adding job tentatively -- it will be properly scheduled when the scheduler starts", "module": "base", "function": "add_job", "line": 454}
{"timestamp": "2025-06-30T13:28:29.094404", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Added job \"Sync Square sales hourly\" to job store \"default\"", "module": "base", "function": "_real_add_job", "line": 895}
{"timestamp": "2025-06-30T13:28:29.094471", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Added job \"Daily Square sales reconciliation\" to job store \"default\"", "module": "base", "function": "_real_add_job", "line": 895}
{"timestamp": "2025-06-30T13:28:29.094496", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Scheduler started", "module": "base", "function": "start", "line": 181}
{"timestamp": "2025-06-30T13:28:29.094528", "level": "INFO", "logger": "main", "message": "Square sync scheduler started successfully", "module": "main", "function": "startup_event", "line": 422}
{"timestamp": "2025-06-30T13:28:29.094580", "level": "INFO", "logger": "apscheduler.scheduler", "message": "Scheduler started", "module": "base", "function": "start", "line": 181}
{"timestamp": "2025-06-30T13:28:29.094721", "level": "INFO", "logger": "services.payout_scheduler", "message": "Payout scheduler started", "module": "payout_scheduler", "function": "start", "line": 37}
{"timestamp": "2025-06-30T13:28:29.166152", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "BEGIN (implicit)", "module": "base", "function": "_connection_begin_impl", "line": 2701}
{"timestamp": "2025-06-30T13:28:29.167628", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "SELECT compensation_plans.id AS compensation_plans_id, compensation_plans.barber_id AS compensation_plans_barber_id, compensation_plans.plan_name AS compensation_plans_plan_name, compensation_plans.compensation_type AS compensation_plans_compensation_type, compensation_plans.is_active AS compensation_plans_is_active, compensation_plans.effective_date AS compensation_plans_effective_date, compensation_plans.end_date AS compensation_plans_end_date, compensation_plans.base_salary AS compensation_plans_base_salary, compensation_plans.salary_frequency AS compensation_plans_salary_frequency, compensation_plans.booth_rent_amount AS compensation_plans_booth_rent_amount, compensation_plans.booth_rent_frequency AS compensation_plans_booth_rent_frequency, compensation_plans.booth_rent_due_day AS compensation_plans_booth_rent_due_day, compensation_plans.includes_utilities AS compensation_plans_includes_utilities, compensation_plans.includes_products AS compensation_plans_includes_products, compensation_plans.includes_marketing AS compensation_plans_includes_marketing, compensation_plans.commission_structure AS compensation_plans_commission_structure, compensation_plans.performance_bonuses AS compensation_plans_performance_bonuses, compensation_plans.deductions AS compensation_plans_deductions, compensation_plans.special_conditions AS compensation_plans_special_conditions, compensation_plans.payout_settings AS compensation_plans_payout_settings, compensation_plans.time_based_rates AS compensation_plans_time_based_rates, compensation_plans.client_type_rates AS compensation_plans_client_type_rates, compensation_plans.escalation_rules AS compensation_plans_escalation_rules, compensation_plans.created_at AS compensation_plans_created_at, compensation_plans.updated_at AS compensation_plans_updated_at, compensation_plans.created_by AS compensation_plans_created_by \nFROM compensation_plans \nWHERE compensation_plans.is_active = 1 AND (compensation_plans.payout_settings ->> ?) = ?", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.167714", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "[generated in 0.00013s] ('enabled', 'true')", "module": "base", "function": "_execute_context", "line": 1846}
{"timestamp": "2025-06-30T13:28:29.167945", "level": "INFO", "logger": "services.payout_scheduler", "message": "Scheduled payouts for 0 compensation plans", "module": "payout_scheduler", "function": "schedule_all_payouts", "line": 61}
{"timestamp": "2025-06-30T13:28:29.167997", "level": "INFO", "logger": "sqlalchemy.engine.Engine", "message": "ROLLBACK", "module": "base", "function": "_connection_rollback_impl", "line": 2704}
{"timestamp": "2025-06-30T13:28:29.168052", "level": "INFO", "logger": "main", "message": "Payout scheduler started successfully", "module": "main", "function": "startup_event", "line": 439}
