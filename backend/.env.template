# 6FB Booking Platform - Environment Configuration Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DATABASE_URL=sqlite:///./6fb_booking.db
# For PostgreSQL: postgresql://username:password@localhost/6fb_booking
# For MySQL: mysql://username:password@localhost/6fb_booking

# =============================================================================
# JWT & AUTHENTICATION
# =============================================================================
SECRET_KEY=your-super-secret-jwt-key-here-minimum-32-characters
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# STRIPE CONFIGURATION (REQUIRED for automated payouts)
# =============================================================================
# Get these from your Stripe Dashboard
STRIPE_SECRET_KEY=sk_test_...  # Use sk_live_... for production
STRIPE_PUBLISHABLE_KEY=pk_test_...  # Use pk_live_... for production
STRIPE_WEBHOOK_SECRET=whsec_...

# Stripe Connect (for barber payouts)
STRIPE_CONNECT_CLIENT_ID=ca_...  # Your platform's Connect client ID
STRIPE_CONNECT_WEBHOOK_SECRET=whsec_...

# =============================================================================
# EMAIL CONFIGURATION (for automated notifications)
# =============================================================================
# Email is OPTIONAL but recommended for:
# - Appointment confirmations and reminders
# - Payment receipts
# - Password reset functionality
# - Welcome emails for new users
# - Cancellation notifications
#
# The platform will function without email, but these features will be disabled.
# =============================================================================

# Choose ONE of the email providers below and uncomment the appropriate section:

# -----------------------------------------------------------------------------
# OPTION 1: GMAIL (Recommended for testing/development)
# -----------------------------------------------------------------------------
# Requirements:
# 1. Enable 2-factor authentication on your Gmail account
# 2. Generate an App Password:
#    - Go to https://myaccount.google.com/apppasswords
#    - Select "Mail" as the app
#    - Copy the 16-character password (remove spaces)
# 3. Use your Gmail address as SMTP_USERNAME
# 4. Use the App Password as SMTP_PASSWORD
#
# IMPORTANT: Do NOT use your regular Gmail password!
# -----------------------------------------------------------------------------
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=xxxx-xxxx-xxxx-xxxx  # 16-character App Password (no spaces)
FROM_EMAIL=your-email@gmail.com
EMAIL_FROM_NAME=6FB Platform

# -----------------------------------------------------------------------------
# OPTION 2: SENDGRID (Recommended for production)
# -----------------------------------------------------------------------------
# Requirements:
# 1. Create a SendGrid account at https://sendgrid.com
# 2. Generate an API key with "Mail Send" permissions
# 3. Verify your sending domain or use Single Sender Verification
# -----------------------------------------------------------------------------
# SMTP_SERVER=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USERNAME=apikey  # Always use "apikey" as username
# SMTP_PASSWORD=SG.your-api-key-here  # Your SendGrid API key
# FROM_EMAIL=noreply@yourdomain.com
# EMAIL_FROM_NAME=Your Business Name

# Alternative: Use SendGrid API directly (uncomment to use)
# SENDGRID_API_KEY=SG.your-api-key-here
# FROM_EMAIL=noreply@yourdomain.com
# EMAIL_FROM_NAME=Your Business Name

# -----------------------------------------------------------------------------
# OPTION 3: MAILGUN
# -----------------------------------------------------------------------------
# Requirements:
# 1. Create account at https://mailgun.com
# 2. Verify your domain
# 3. Get SMTP credentials from dashboard
# -----------------------------------------------------------------------------
# SMTP_SERVER=smtp.mailgun.org
# SMTP_PORT=587
# SMTP_USERNAME=postmaster@mg.yourdomain.com
# SMTP_PASSWORD=your-mailgun-password
# FROM_EMAIL=noreply@yourdomain.com
# EMAIL_FROM_NAME=Your Business Name

# -----------------------------------------------------------------------------
# OPTION 4: AMAZON SES (AWS Simple Email Service)
# -----------------------------------------------------------------------------
# Requirements:
# 1. Set up AWS SES in your region
# 2. Verify sending domain or email addresses
# 3. Create SMTP credentials (different from AWS access keys)
# -----------------------------------------------------------------------------
# SMTP_SERVER=email-smtp.us-east-1.amazonaws.com  # Change region as needed
# SMTP_PORT=587
# SMTP_USERNAME=your-ses-smtp-username  # NOT your AWS access key
# SMTP_PASSWORD=your-ses-smtp-password  # NOT your AWS secret key
# FROM_EMAIL=noreply@yourdomain.com
# EMAIL_FROM_NAME=Your Business Name

# -----------------------------------------------------------------------------
# OPTION 5: MICROSOFT 365 / OUTLOOK
# -----------------------------------------------------------------------------
# Requirements:
# 1. Have a Microsoft 365 account
# 2. May need to enable SMTP AUTH for your account
# -----------------------------------------------------------------------------
# SMTP_SERVER=smtp.office365.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@yourdomain.com
# SMTP_PASSWORD=your-password
# FROM_EMAIL=your-email@yourdomain.com
# EMAIL_FROM_NAME=Your Business Name

# -----------------------------------------------------------------------------
# TESTING EMAIL CONFIGURATION
# -----------------------------------------------------------------------------
# After setting up email, you can test it by:
# 1. Start the backend server
# 2. Run: python test_email_config.py
# Or use the API endpoint: POST /api/v1/test/email
# -----------------------------------------------------------------------------

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
ENVIRONMENT=development  # development, staging, production
DEBUG=true
API_V1_STR=/api/v1

# CORS Settings
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","https://yourdomain.com"]

# =============================================================================
# EXTERNAL INTEGRATIONS
# =============================================================================
# Square (if using)
SQUARE_APPLICATION_ID=your-square-app-id
SQUARE_ACCESS_TOKEN=your-square-access-token
SQUARE_ENVIRONMENT=sandbox  # sandbox or production

# Google Calendar Integration (Optional)
GOOGLE_CALENDAR_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CALENDAR_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALENDAR_REDIRECT_URI=http://localhost:8000/api/v1/calendar/oauth/callback


# =============================================================================
# LOGGING & MONITORING
# =============================================================================
LOG_LEVEL=INFO
SENTRY_DSN=your-sentry-dsn-url  # Optional for error tracking

# =============================================================================
# REDIS (Optional - for caching)
# =============================================================================
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# SECURITY
# =============================================================================
# Rate limiting
RATE_LIMIT_PER_MINUTE=100

# Session settings
SESSION_TIMEOUT_MINUTES=60

# =============================================================================
# PAYOUT SCHEDULER SETTINGS
# =============================================================================
# Default payout settings
DEFAULT_PAYOUT_METHOD=stripe_standard
DEFAULT_MINIMUM_PAYOUT=50
DEFAULT_HOLD_DAYS=2

# Scheduler timezone
SCHEDULER_TIMEZONE=America/New_York
