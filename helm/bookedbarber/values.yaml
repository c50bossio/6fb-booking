# Default values for BookedBarber V2
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: bookedbarber
  version: "2.0.0"
  environment: production

# Image configuration
image:
  registry: docker.io
  repository: bookedbarber
  tag: "latest"
  pullPolicy: IfNotPresent

# Backend configuration
backend:
  enabled: true
  replicaCount: 3
  image:
    repository: bookedbarber/backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  env:
    ENVIRONMENT: production
    PYTHONUNBUFFERED: "1"
    PYTHONDONTWRITEBYTECODE: "1"
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 3
  image:
    repository: bookedbarber/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  env:
    NODE_ENV: production
    NEXT_TELEMETRY_DISABLED: "1"
    PORT: "3000"
  
  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Worker configuration
worker:
  enabled: true
  replicaCount: 2
  image:
    repository: bookedbarber/worker
    tag: "latest"
    pullPolicy: IfNotPresent
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  
  env:
    ENVIRONMENT: production
    PYTHONUNBUFFERED: "1"
    C_FORCE_ROOT: "1"
    CELERY_WORKER_CONCURRENCY: "2"
    CELERY_WORKER_MAX_TASKS_PER_CHILD: "1000"

# Celery Beat Scheduler configuration
celeryBeat:
  enabled: true
  replicaCount: 1
  image:
    repository: bookedbarber/worker
    tag: "latest"
    pullPolicy: IfNotPresent
    
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: bookedbarber
    password: ""  # Set in secrets
    database: bookedbarber
  
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi
    
    securityContext:
      enabled: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
      runAsNonRoot: true
  
  metrics:
    enabled: true
    
# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
  
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    
    securityContext:
      enabled: true
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
      runAsNonRoot: true
  
  metrics:
    enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: bookedbarber.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend
            port: 3000
        - path: /api
          pathType: Prefix
          service:
            name: backend
            port: 8000
        - path: /webhooks
          pathType: Prefix
          service:
            name: backend
            port: 8000
    - host: www.bookedbarber.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend
            port: 3000
    - host: api.bookedbarber.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: backend
            port: 8000
  
  tls:
    - secretName: bookedbarber-tls
      hosts:
        - bookedbarber.com
        - www.bookedbarber.com
        - api.bookedbarber.com

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      path: /metrics
  
  grafana:
    enabled: true
    adminPassword: ""  # Set in secrets

# Security
security:
  networkPolicies:
    enabled: true
  
  podSecurityPolicy:
    enabled: false
  
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

# Resource quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    pods: "20"
    persistentvolumeclaims: "10"

# Secrets configuration
secrets:
  create: true
  # All secret values should be provided via external secret management
  # or helm install --set-string flags for security
  database:
    url: ""
    username: bookedbarber
    password: ""
    name: bookedbarber
  
  redis:
    url: ""
  
  jwt:
    secretKey: ""
  
  stripe:
    secretKey: ""
    publishableKey: ""
    webhookSecret: ""
  
  sendgrid:
    apiKey: ""
  
  twilio:
    accountSid: ""
    authToken: ""
  
  google:
    clientId: ""
    clientSecret: ""
  
  sentry:
    dsn: ""
    publicDsn: ""

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity for pod assignment
affinity: {}

# Pod annotations
podAnnotations: {}

# Additional labels
labels: {}