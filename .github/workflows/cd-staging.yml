name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: bookedbarber/backend
  IMAGE_NAME_FRONTEND: bookedbarber/frontend
  ENVIRONMENT: staging
  CLUSTER_NAME: bookedbarber-staging
  NAMESPACE: staging

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      deploy-needed: ${{ steps.deploy-check.outputs.needed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend-v2/**'
              - '!backend-v2/frontend-v2/**'
            frontend:
              - 'backend-v2/frontend-v2/**'

      - name: Check if deployment needed
        id: deploy-check
        run: |
          if [[ "${{ steps.changes.outputs.backend }}" == "true" ]] || \
             [[ "${{ steps.changes.outputs.frontend }}" == "true" ]] || \
             [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "needed=true" >> $GITHUB_OUTPUT
          else
            echo "needed=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy-needed == 'true'
    outputs:
      backend-image: ${{ steps.backend-image.outputs.image }}
      frontend-image: ${{ steps.frontend-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest

      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest

      - name: Build and push backend image
        if: needs.detect-changes.outputs.backend-changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend-v2
          file: ./backend-v2/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=staging

      - name: Build and push frontend image
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend-v2/frontend-v2
          file: ./backend-v2/frontend-v2/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
            NEXT_PUBLIC_ENVIRONMENT=staging

      - name: Output backend image
        id: backend-image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Output frontend image
        id: frontend-image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.deploy-needed == 'true'
    environment:
      name: staging
      url: https://staging.bookedbarber.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Deploy database migrations
        run: |
          kubectl create job migration-${{ github.sha }} \
            --from=cronjob/migration-job \
            --namespace=${{ env.NAMESPACE }}
          
          kubectl wait --for=condition=complete job/migration-${{ github.sha }} \
            --timeout=300s --namespace=${{ env.NAMESPACE }}

      - name: Update backend deployment
        if: needs.detect-changes.outputs.backend-changed == 'true'
        run: |
          kubectl set image deployment/backend-deployment \
            backend=${{ needs.build-and-push.outputs.backend-image }} \
            --namespace=${{ env.NAMESPACE }}
          
          kubectl rollout status deployment/backend-deployment \
            --timeout=300s --namespace=${{ env.NAMESPACE }}

      - name: Update frontend deployment
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        run: |
          kubectl set image deployment/frontend-deployment \
            frontend=${{ needs.build-and-push.outputs.frontend-image }} \
            --namespace=${{ env.NAMESPACE }}
          
          kubectl rollout status deployment/frontend-deployment \
            --timeout=300s --namespace=${{ env.NAMESPACE }}

      - name: Wait for deployment stabilization
        run: |
          sleep 30
          kubectl get pods --namespace=${{ env.NAMESPACE }}

  smoke-tests:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd tests/smoke
          npm ci

      - name: Run smoke tests
        env:
          BASE_URL: https://staging.bookedbarber.com
          API_URL: https://api-staging.bookedbarber.com
          TEST_USER_EMAIL: ${{ secrets.STAGING_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.STAGING_TEST_USER_PASSWORD }}
        run: |
          cd tests/smoke
          npm run test:staging

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results-staging
          path: tests/smoke/results/

  performance-tests:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        env:
          BASE_URL: https://staging.bookedbarber.com
        run: |
          cd tests/performance
          k6 run --out json=results.json staging-load-test.js

      - name: Analyze performance results
        run: |
          cd tests/performance
          node analyze-results.js results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: tests/performance/results.json

  update-deployment-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-tests]
    if: always()
    steps:
      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentStatus = '${{ needs.deploy-staging.result }}' === 'success' &&
                                   '${{ needs.smoke-tests.result }}' === 'success' &&
                                   '${{ needs.performance-tests.result }}' === 'success';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 'staging',
              state: deploymentStatus ? 'success' : 'failure',
              description: deploymentStatus ? 'Staging deployment successful' : 'Staging deployment failed',
              environment_url: 'https://staging.bookedbarber.com'
            });

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üöÄ *Staging Deployment*\n*Status*: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}\n*Environment*: staging.bookedbarber.com\n*Commit*: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Author*: ${{ github.actor }}"
                  }
                }
              ]
            }

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-tests]
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Clean up old migration jobs
        run: |
          kubectl delete jobs --field-selector status.successful=1 \
            --namespace=${{ env.NAMESPACE }} || true

      - name: Clean up old ReplicaSets
        run: |
          kubectl delete replicasets --field-selector status.replicas=0 \
            --namespace=${{ env.NAMESPACE }} || true