name: BookedBarber V2 - Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, deployment-clean, feature/*]
  pull_request:
    branches: [main, deployment-clean]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some safety checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend-v2
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend-v2
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ===============================
  # PHASE 1: CODE QUALITY & SECURITY
  # ===============================
  
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          backend:
            - 'backend-v2/**'
            - '.github/workflows/**'
          frontend:
            - 'backend-v2/frontend-v2/**'
            - '.github/workflows/**'

    - name: Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend-v2/frontend-v2/package-lock.json

    # Backend Security Scanning
    - name: Install backend dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend-v2
        pip install -r requirements.txt
        pip install bandit safety semgrep

    - name: Run Bandit security linter
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend-v2
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: Check for known vulnerabilities
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend-v2
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep SAST
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend-v2
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    # Frontend Security Scanning
    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd backend-v2/frontend-v2
        npm ci

    - name: Run npm audit
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd backend-v2/frontend-v2
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate

    - name: ESLint security check
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd backend-v2/frontend-v2
        npm run lint

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend-v2/*-report.json
          backend-v2/frontend-v2/*-report.json

  # ===============================
  # PHASE 2: UNIT & INTEGRATION TESTS
  # ===============================
  
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.backend-changed == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_bookedbarber
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend-v2
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Setup test environment
      run: |
        cd backend-v2
        cp .env.template .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_bookedbarber" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test

    - name: Run database migrations
      run: |
        cd backend-v2
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_bookedbarber
        alembic upgrade head

    - name: Run unit tests
      run: |
        cd backend-v2
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80 -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend-v2/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend-v2/coverage.xml
          backend-v2/htmlcov/

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.frontend-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend-v2/frontend-v2/package-lock.json

    - name: Install dependencies
      run: |
        cd backend-v2/frontend-v2
        npm ci

    - name: Run unit tests
      run: |
        cd backend-v2/frontend-v2
        npm run test:coverage

    - name: Run type checking
      run: |
        cd backend-v2/frontend-v2
        npx tsc --noEmit

    - name: Build application
      run: |
        cd backend-v2/frontend-v2
        npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend-v2/frontend-v2/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # ===============================
  # PHASE 3: INTEGRATION TESTS
  # ===============================

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: always() && (needs.test-backend.result == 'success' || needs.test-frontend.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test images
      run: |
        docker build -t bookedbarber-backend:test ./backend-v2
        docker build -t bookedbarber-frontend:test ./backend-v2/frontend-v2

    - name: Run integration tests
      run: |
        cd backend-v2
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        python -m pytest integration_scripts/ -v
        docker-compose -f docker-compose.test.yml down

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: backend-v2/integration-test-results.xml

  # ===============================
  # PHASE 4: BUILD & CONTAINERIZE
  # ===============================

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, integration-tests]
    if: always() && needs.code-quality.result == 'success'
    
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend-v2
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build frontend image  
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./backend-v2/frontend-v2
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ===============================
  # PHASE 5: LOAD TESTING
  # ===============================

  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        cd testing
        k6 run --out json=load-test-results.json load-tests/booking-flow.js
        k6 run --out json=api-load-test-results.json load-tests/api-endpoints.js

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: testing/*-results.json

  # ===============================
  # PHASE 6: STAGING DEPLOYMENT
  # ===============================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/deployment-clean' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure staging cluster access
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 --decode > ~/.kube/config

    - name: Deploy to staging with blue-green
      run: |
        cd .github/deployment
        chmod +x deploy-blue-green.sh
        ./deploy-blue-green.sh staging ${{ github.sha }}

    - name: Run smoke tests
      run: |
        cd .github/deployment
        chmod +x smoke-tests.sh
        ./smoke-tests.sh staging

    - name: Health check
      run: |
        cd .github/deployment
        chmod +x health-check.sh
        ./health-check.sh staging

  # ===============================
  # PHASE 7: PRODUCTION DEPLOYMENT
  # ===============================

  deploy-production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [deploy-staging, load-tests]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production-approval
    
    steps:
    - name: Request production deployment approval
      run: |
        echo "🚀 Production deployment requested"
        echo "✅ Staging tests passed: ${{ needs.deploy-staging.result }}"
        echo "✅ Load tests passed: ${{ needs.load-tests.result }}"
        echo "📊 Review deployment artifacts and approve when ready"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-production-approval]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure production cluster access  
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 --decode > ~/.kube/config

    - name: Database migration safety check
      run: |
        cd .github/deployment
        chmod +x migration-safety-check.sh
        ./migration-safety-check.sh production

    - name: Create production backup
      run: |
        cd .github/deployment
        chmod +x backup-production.sh
        ./backup-production.sh

    - name: Deploy to production with blue-green
      run: |
        cd .github/deployment
        chmod +x deploy-blue-green.sh
        ./deploy-blue-green.sh production ${{ github.sha }}

    - name: Run post-deployment tests
      run: |
        cd .github/deployment
        chmod +x post-deployment-tests.sh
        ./post-deployment-tests.sh production

    - name: Monitor deployment health
      run: |
        cd .github/deployment
        chmod +x monitor-deployment.sh
        ./monitor-deployment.sh production 300  # Monitor for 5 minutes

    - name: Rollback on failure
      if: failure()
      run: |
        cd .github/deployment
        chmod +x rollback.sh
        ./rollback.sh production

  # ===============================
  # PHASE 8: POST-DEPLOYMENT
  # ===============================

  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy-production.result }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

    - name: Update deployment dashboard
      run: |
        curl -X POST "${{ secrets.DEPLOYMENT_DASHBOARD_URL }}" \
          -H "Authorization: Bearer ${{ secrets.DASHBOARD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "environment": "production",
            "status": "${{ needs.deploy-production.result }}",
            "commit": "${{ github.sha }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}",
            "author": "${{ github.actor }}"
          }'

  # ===============================
  # CLEANUP
  # ===============================

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-production, notify-deployment]
    if: always()
    
    steps:
    - name: Cleanup old container images
      run: |
        # Keep last 10 images
        docker image prune -f
        # Remove images older than 7 days
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | grep "days ago" | awk '{print $1":"$2}' | head -n -10 | xargs -r docker rmi || true

    - name: Cleanup staging environment
      if: github.ref == 'refs/heads/main'
      run: |
        cd .github/deployment
        chmod +x cleanup-staging.sh
        ./cleanup-staging.sh