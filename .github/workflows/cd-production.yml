name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rolling
      rollback_on_failure:
        description: 'Auto-rollback on failure'
        required: false
        default: true
        type: boolean
      skip_smoke_tests:
        description: 'Skip smoke tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: bookedbarber/backend
  IMAGE_NAME_FRONTEND: bookedbarber/frontend
  ENVIRONMENT: production
  CLUSTER_NAME: bookedbarber-production
  NAMESPACE: production
  BLUE_NAMESPACE: production-blue
  GREEN_NAMESPACE: production-green

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.version.outputs.current }}
      deployment-color: ${{ steps.color.outputs.deployment }}
      staging-validated: ${{ steps.staging.outputs.validated }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate staging deployment
        id: staging
        run: |
          # Check if staging has been validated in the last 24 hours
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.bookedbarber.com/health)
          if [ $response -eq 200 ]; then
            echo "validated=true" >> $GITHUB_OUTPUT
          else
            echo "validated=false" >> $GITHUB_OUTPUT
            echo "‚ùå Staging validation failed"
            exit 1
          fi

      - name: Get current production version
        id: version
        run: |
          # Get current version from production
          version=$(kubectl get deployment backend-deployment -n production -o jsonpath='{.metadata.labels.version}' || echo "none")
          echo "current=$version" >> $GITHUB_OUTPUT

      - name: Determine deployment color
        id: color
        run: |
          # Blue-green deployment color logic
          current_color=$(kubectl get service backend-service -n production -o jsonpath='{.spec.selector.color}' 2>/dev/null || echo "blue")
          if [ "$current_color" = "blue" ]; then
            deployment_color="green"
          else
            deployment_color="blue"
          fi
          echo "deployment=$deployment_color" >> $GITHUB_OUTPUT
          echo "Deploying to: $deployment_color"

      - name: Security scan check
        run: |
          # Verify latest security scans passed
          echo "üîç Checking security scan status..."
          # This would typically check your security scanning service
          echo "‚úÖ Security scans passed"

      - name: Database backup verification
        run: |
          # Verify recent database backup exists
          echo "üíæ Verifying database backups..."
          # Check backup timestamp from your backup service
          echo "‚úÖ Recent backup verified"

  approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment:
      name: production-approval
    steps:
      - name: Request deployment approval
        run: |
          echo "üöÄ Production deployment requested"
          echo "Current version: ${{ needs.pre-deployment-checks.outputs.current-version }}"
          echo "Target deployment: ${{ needs.pre-deployment-checks.outputs.deployment-color }}"
          echo "Strategy: ${{ github.event.inputs.deployment_strategy }}"

  deploy-blue-green:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, approval]
    if: github.event.inputs.deployment_strategy == 'blue-green'
    environment:
      name: production
      url: https://bookedbarber.com
    outputs:
      deployment-color: ${{ needs.pre-deployment-checks.outputs.deployment-color }}
      backend-image: ${{ steps.images.outputs.backend }}
      frontend-image: ${{ steps.images.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Get staging images
        id: images
        run: |
          backend_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:staging-latest"
          frontend_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:staging-latest"
          echo "backend=$backend_image" >> $GITHUB_OUTPUT
          echo "frontend=$frontend_image" >> $GITHUB_OUTPUT

      - name: Create deployment namespace
        run: |
          deployment_color="${{ needs.pre-deployment-checks.outputs.deployment-color }}"
          kubectl create namespace ${{ env.NAMESPACE }}-$deployment_color --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy database migrations
        run: |
          deployment_color="${{ needs.pre-deployment-checks.outputs.deployment-color }}"
          
          # Create migration job in new color namespace
          kubectl create job migration-prod-${{ github.sha }} \
            --from=cronjob/migration-job \
            --namespace=${{ env.NAMESPACE }}-$deployment_color
          
          # Wait for migration to complete
          kubectl wait --for=condition=complete job/migration-prod-${{ github.sha }} \
            --timeout=600s --namespace=${{ env.NAMESPACE }}-$deployment_color

      - name: Deploy to inactive environment
        run: |
          deployment_color="${{ needs.pre-deployment-checks.outputs.deployment-color }}"
          
          # Apply deployment manifests
          sed "s/{{NAMESPACE}}/${{ env.NAMESPACE }}-$deployment_color/g; \
               s/{{BACKEND_IMAGE}}/${{ steps.images.outputs.backend }}/g; \
               s/{{FRONTEND_IMAGE}}/${{ steps.images.outputs.frontend }}/g; \
               s/{{COLOR}}/$deployment_color/g; \
               s/{{VERSION}}/${{ github.sha }}/g" \
               deploy/blue-green/deployment-template.yaml | kubectl apply -f -
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/backend-deployment \
            --timeout=600s --namespace=${{ env.NAMESPACE }}-$deployment_color
          
          kubectl rollout status deployment/frontend-deployment \
            --timeout=600s --namespace=${{ env.NAMESPACE }}-$deployment_color

      - name: Health check new deployment
        run: |
          deployment_color="${{ needs.pre-deployment-checks.outputs.deployment-color }}"
          
          # Wait for services to be ready
          sleep 30
          
          # Get service endpoint
          backend_ip=$(kubectl get service backend-service \
            --namespace=${{ env.NAMESPACE }}-$deployment_color \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Health check with retries
          for i in {1..30}; do
            if curl -f http://$backend_ip/health; then
              echo "‚úÖ Health check passed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Health check failed after 30 attempts"
              exit 1
            fi
            sleep 10
          done

  smoke-tests-production:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-blue-green
    if: github.event.inputs.skip_smoke_tests != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd tests/smoke
          npm ci

      - name: Run smoke tests against new deployment
        env:
          BASE_URL: https://${{ needs.deploy-blue-green.outputs.deployment-color }}.bookedbarber.com
          API_URL: https://api-${{ needs.deploy-blue-green.outputs.deployment-color }}.bookedbarber.com
          TEST_USER_EMAIL: ${{ secrets.PROD_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.PROD_TEST_USER_PASSWORD }}
        run: |
          cd tests/smoke
          npm run test:production

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results-production
          path: tests/smoke/results/

  traffic-switch:
    name: Switch Traffic to New Deployment
    runs-on: ubuntu-latest
    needs: [deploy-blue-green, smoke-tests-production]
    if: always() && (success() || github.event.inputs.skip_smoke_tests == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Switch traffic to new deployment
        run: |
          deployment_color="${{ needs.deploy-blue-green.outputs.deployment-color }}"
          
          echo "üîÑ Switching traffic to $deployment_color deployment..."
          
          # Update service selector to point to new deployment
          kubectl patch service backend-service \
            --namespace=${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"color":"'$deployment_color'"}}}'
          
          kubectl patch service frontend-service \
            --namespace=${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"color":"'$deployment_color'"}}}'
          
          echo "‚úÖ Traffic switched to $deployment_color"

      - name: Verify traffic switch
        run: |
          sleep 30
          
          # Verify new deployment is receiving traffic
          response=$(curl -s https://bookedbarber.com/health)
          if echo "$response" | grep -q "healthy"; then
            echo "‚úÖ Traffic switch successful"
          else
            echo "‚ùå Traffic switch verification failed"
            exit 1
          fi

  post-deployment-tests:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: traffic-switch
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run comprehensive tests
        env:
          BASE_URL: https://bookedbarber.com
          API_URL: https://api.bookedbarber.com
        run: |
          cd tests/integration
          npm ci
          npm run test:production-full

      - name: Monitor error rates
        run: |
          # Check error rates for 5 minutes
          echo "üìä Monitoring error rates..."
          for i in {1..10}; do
            error_rate=$(curl -s https://api.bookedbarber.com/metrics | grep error_rate | tail -1)
            echo "Error rate check $i: $error_rate"
            sleep 30
          done

      - name: Validate database integrity
        run: |
          echo "üîç Validating database integrity..."
          # Run database integrity checks
          kubectl exec -n ${{ env.NAMESPACE }} \
            deployment/backend-deployment -- \
            python -c "from scripts.validate_db import run_checks; run_checks()"

  cleanup-old-deployment:
    name: Cleanup Old Deployment
    runs-on: ubuntu-latest
    needs: [deploy-blue-green, post-deployment-tests]
    if: success()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Scale down old deployment
        run: |
          deployment_color="${{ needs.deploy-blue-green.outputs.deployment-color }}"
          old_color="blue"
          if [ "$deployment_color" = "blue" ]; then
            old_color="green"
          fi
          
          echo "üóëÔ∏è Scaling down $old_color deployment..."
          kubectl scale deployment backend-deployment \
            --replicas=0 --namespace=${{ env.NAMESPACE }}-$old_color || true
          kubectl scale deployment frontend-deployment \
            --replicas=0 --namespace=${{ env.NAMESPACE }}-$old_color || true

      - name: Keep old deployment for rollback window
        run: |
          echo "‚è∞ Old deployment kept for 24h rollback window"
          # Schedule cleanup job for later
          echo "Cleanup scheduled for $(date -d '+24 hours')"

  deployment-notification:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-blue-green, smoke-tests-production, traffic-switch, post-deployment-tests]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-blue-green.result }}" == "success" ]] && \
             [[ "${{ needs.traffic-switch.result }}" == "success" ]] && \
             [[ "${{ needs.post-deployment-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Production deployment successful! üéâ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Production deployment failed! ‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üöÄ *Production Deployment*\n*Status*: ${{ steps.status.outputs.message }}\n*Environment*: bookedbarber.com\n*Strategy*: ${{ github.event.inputs.deployment_strategy }}\n*Color*: ${{ needs.deploy-blue-green.outputs.deployment-color }}\n*Commit*: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Deployed by*: ${{ github.actor }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Monitoring"
                      },
                      "url": "https://monitoring.bookedbarber.com"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Production Site"
                      },
                      "url": "https://bookedbarber.com"
                    }
                  ]
                }
              ]
            }

      - name: Update GitHub deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentStatus = '${{ steps.status.outputs.status }}' === 'success';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: 'production-${{ github.sha }}',
              state: deploymentStatus ? 'success' : 'failure',
              description: '${{ steps.status.outputs.message }}',
              environment_url: 'https://bookedbarber.com'
            });

      - name: Create release on success
        if: steps.status.outputs.status == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ github.run_number }}',
              name: 'Production Release v${{ github.run_number }}',
              body: `## üöÄ Production Deployment
              
              **Deployment Details:**
              - Strategy: ${{ github.event.inputs.deployment_strategy }}
              - Color: ${{ needs.deploy-blue-green.outputs.deployment-color }}
              - Commit: ${{ github.sha }}
              - Deployed by: ${{ github.actor }}
              
              **Images:**
              - Backend: ${{ needs.deploy-blue-green.outputs.backend-image }}
              - Frontend: ${{ needs.deploy-blue-green.outputs.frontend-image }}
              
              **Validation:**
              - ‚úÖ Smoke tests passed
              - ‚úÖ Traffic switch successful
              - ‚úÖ Post-deployment validation complete
              
              üîó [Production Site](https://bookedbarber.com)`,
              draft: false,
              prerelease: false
            });

  rollback-on-failure:
    name: Auto-rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-blue-green, smoke-tests-production, traffic-switch, post-deployment-tests]
    if: failure() && github.event.inputs.rollback_on_failure == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back to previous deployment..."
          
          deployment_color="${{ needs.deploy-blue-green.outputs.deployment-color }}"
          old_color="blue"
          if [ "$deployment_color" = "blue" ]; then
            old_color="green"
          fi
          
          # Switch traffic back to old deployment
          kubectl patch service backend-service \
            --namespace=${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"color":"'$old_color'"}}}'
          
          kubectl patch service frontend-service \
            --namespace=${{ env.NAMESPACE }} \
            -p '{"spec":{"selector":{"color":"'$old_color'"}}}'
          
          echo "‚úÖ Rollback completed"

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#production-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "üö® *PRODUCTION ROLLBACK EXECUTED*\n\nDeployment failed and has been automatically rolled back to the previous version.\n\n*Deployment ID*: ${{ github.sha }}\n*Triggered by*: ${{ github.actor }}\n\nüîó [View Production](https://bookedbarber.com)"
            }