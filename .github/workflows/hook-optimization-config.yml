# Hook-CI/CD Integration Optimization Configuration
# This file defines how hooks and CI/CD workflows coordinate to avoid duplication

name: Hook Optimization Configuration

# This is a configuration-only file that defines the integration strategy
# between Git hooks and GitHub Actions workflows

configuration:
  
  # Integration Strategy
  strategy:
    local_first: true  # Run hooks locally first, then validate in CI
    parallel_execution: true  # Run non-conflicting operations in parallel
    smart_caching: true  # Cache results between hook and CI runs
    conditional_skipping: true  # Skip CI checks if hooks already validated
  
  # Hook-to-CI Mapping
  # Defines which CI jobs correspond to which hooks
  mapping:
    
    # Phase 1: Core Development Workflow
    commit_msg:
      hook: "hooks/commit-msg"
      ci_job: "validate-hooks.commit-msg-validation"
      optimization: "skip_ci_if_hook_passed"
      
    branch_protection:
      hook: "hooks/pre-push"
      ci_job: "validate-hooks.branch-validation"
      optimization: "ci_validates_different_scenarios"
      
    v2_architecture:
      hook: "hooks/pre-commit-v2-only"
      ci_job: "validate-hooks.v2-architecture-validation"
      optimization: "same_logic_different_scope"
      
    security_scan:
      hook: "hooks/pre-commit-security"
      ci_job: "validate-hooks.security-vulnerability-scan"
      optimization: "ci_uses_additional_tools"
      
    # Phase 2: Quality & Documentation
    api_docs:
      hook: "hooks/pre-commit-api-docs"
      ci_job: "test-backend.phase2-quality-hooks"
      optimization: "ci_generates_reports"
      
    migrations:
      hook: "hooks/pre-commit-migrations"
      ci_job: "test-backend.phase2-quality-hooks"
      optimization: "ci_tests_against_clean_db"
      
    performance:
      hook: "hooks/pre-commit-performance"
      ci_job: "test-backend.phase2-quality-hooks"
      optimization: "ci_runs_comprehensive_benchmarks"
      
    integration:
      hook: "hooks/pre-commit-integration"
      ci_job: "test-backend.phase2-quality-hooks"
      optimization: "ci_tests_full_system"
      
    # Phase 3: Security & Compliance
    secrets:
      hook: "hooks/pre-commit-secrets"
      ci_job: "test-frontend.phase3-security-hooks"
      optimization: "ci_scans_full_history"
      
    compliance:
      hook: "hooks/pre-commit-compliance"
      ci_job: "test-frontend.phase3-security-hooks"
      optimization: "ci_validates_against_policies"
      
    post_deploy:
      hook: "hooks/post-deploy"
      ci_job: "deploy-production.post-deployment-hooks"
      optimization: "ci_runs_in_actual_environment"
      
    pre_release:
      hook: "hooks/pre-release"
      ci_job: "build-and-push.pre-release-hooks"
      optimization: "ci_has_production_context"

  # Optimization Rules
  optimization_rules:
    
    # Skip CI checks if local hooks passed recently
    skip_conditions:
      - condition: "hook_passed_locally_within_5min"
        applicable_to: ["commit_msg", "v2_architecture"]
        
      - condition: "no_dependency_changes"
        applicable_to: ["security_scan", "secrets"]
        
      - condition: "no_migration_files_changed"
        applicable_to: ["migrations"]
        
      - condition: "no_api_schema_changes"
        applicable_to: ["api_docs"]
    
    # Use different tools/approaches in CI vs hooks
    differentiation:
      - hook_tool: "safety"
        ci_tool: "safety + pip-audit + bandit"
        reason: "CI can afford longer scan times"
        
      - hook_tool: "npm audit"
        ci_tool: "npm audit + semgrep + trivy"
        reason: "CI uses multiple security scanners"
        
      - hook_tool: "basic_performance_check"
        ci_tool: "comprehensive_benchmarking"
        reason: "CI runs full performance suite"
        
      - hook_tool: "local_integration_test"
        ci_tool: "full_system_integration_test"
        reason: "CI tests real deployment scenarios"
    
    # Parallel execution strategy
    parallelization:
      - group: "static_analysis"
        jobs: ["linting", "type_checking", "security_scanning"]
        dependencies: []
        
      - group: "testing"
        jobs: ["unit_tests", "integration_tests"]
        dependencies: ["static_analysis"]
        
      - group: "build_and_deploy"
        jobs: ["docker_build", "deployment"]
        dependencies: ["testing"]
    
    # Caching strategy
    caching:
      - cache_key: "hook_results_{{ checksum_of_relevant_files }}"
        duration: "5 minutes"
        scope: "commit_msg, v2_architecture"
        
      - cache_key: "dependency_scan_{{ checksum_requirements_package }}"
        duration: "1 hour" 
        scope: "security_scan, secrets"
        
      - cache_key: "performance_baseline_{{ git_sha }}"
        duration: "24 hours"
        scope: "performance"

  # Emergency Procedures
  emergency_procedures:
    
    # Bypass mechanisms
    bypass_methods:
      - method: "environment_variable"
        variable: "SKIP_HOOKS"
        applicable_to: "all_workflows"
        usage: "export SKIP_HOOKS=true"
        
      - method: "workflow_dispatch_input"
        parameter: "skip_hooks"
        applicable_to: "ci_cd_pipeline"
        usage: "Manual trigger with skip_hooks=true"
        
      - method: "git_flags"
        flag: "--no-verify"
        applicable_to: "local_hooks"
        usage: "git commit --no-verify"
    
    # Recovery procedures
    recovery_steps:
      - step: "identify_failing_hook"
        command: "grep 'ERROR\\|FAIL' .git/hooks/*.log"
        
      - step: "check_dependencies"
        command: "pip check && npm audit --audit-level=none"
        
      - step: "update_tools"
        command: "pip install --upgrade safety && npm update"
        
      - step: "clear_caches"
        command: "rm -rf ~/.cache/pip && npm cache clean --force"
        
      - step: "reinstall_hooks"
        command: "./hooks/install-hooks.sh"

  # Performance Monitoring
  monitoring:
    
    # Metrics to track
    metrics:
      - name: "hook_execution_time"
        threshold: "30_seconds"
        action: "create_performance_issue"
        
      - name: "ci_workflow_duration"
        threshold: "15_minutes"
        action: "optimize_parallelization"
        
      - name: "hook_failure_rate"
        threshold: "5_percent"
        action: "review_hook_logic"
        
      - name: "ci_success_rate"
        threshold: "95_percent"
        action: "investigate_infrastructure"
    
    # Alerting
    alerts:
      - trigger: "hook_timeout"
        notification: "slack_devops_channel"
        escalation: "create_github_issue"
        
      - trigger: "repeated_ci_failures"
        notification: "email_team_lead"
        escalation: "emergency_bypass_recommendation"

  # Documentation Integration
  documentation:
    
    # Auto-generated docs
    auto_docs:
      - source: "hook_performance_metrics"
        destination: "docs/HOOK_PERFORMANCE.md"
        schedule: "weekly"
        
      - source: "ci_workflow_analysis" 
        destination: "docs/CI_CD_OPTIMIZATION.md"
        schedule: "monthly"
        
      - source: "integration_status"
        destination: "README.md#hook-integration-status"
        schedule: "on_change"
    
    # Manual docs to maintain
    manual_docs:
      - file: "hooks/README.md"
        sections: ["troubleshooting", "performance_tips"]
        
      - file: ".github/workflows/README.md"
        sections: ["hook_integration", "optimization_guide"]

# Usage Instructions for CI/CD Workflows:
#
# 1. Check this config before running hooks in CI
# 2. Use the mapping to avoid duplicating hook logic
# 3. Apply optimization rules to skip unnecessary work
# 4. Monitor performance metrics and adjust thresholds
# 5. Follow emergency procedures when hooks fail
#
# Example usage in workflow:
#
# - name: Check optimization config
#   run: |
#     if [[ -f .github/workflows/hook-optimization-config.yml ]]; then
#       echo "Loading hook optimization rules..."
#       # Parse config and apply optimization logic
#     fi