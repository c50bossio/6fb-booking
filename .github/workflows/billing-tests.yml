# Billing Settings Test Workflow
# Comprehensive CI/CD pipeline for billing functionality

name: üîê Billing Tests

on:
  push:
    branches: [ staging, production ]
    paths:
      - 'backend-v2/frontend-v2/app/settings/billing/**'
      - 'backend-v2/frontend-v2/__tests__/**/*billing*'
      - 'backend-v2/frontend-v2/lib/billing-api.ts'
      - 'backend-v2/frontend-v2/lib/stripe.ts'
      - 'backend-v2/api/v2/billing/**'
  pull_request:
    branches: [ staging, production ]
    paths:
      - 'backend-v2/frontend-v2/app/settings/billing/**'
      - 'backend-v2/frontend-v2/__tests__/**/*billing*'
      - 'backend-v2/frontend-v2/lib/billing-api.ts'
      - 'backend-v2/frontend-v2/lib/stripe.ts'
      - 'backend-v2/api/v2/billing/**'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  # Test environment variables
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
  DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.TEST_NEXTAUTH_SECRET }}
  NEXTAUTH_URL: 'http://localhost:3000'

concurrency:
  group: billing-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security and Compliance Checks
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Run npm audit
        working-directory: backend-v2/frontend-v2
        run: npm audit --audit-level high
        
      - name: Check for sensitive data in code
        run: |
          if grep -r "sk_live\|pk_live\|password.*=\|secret.*=" backend-v2/ --exclude-dir=node_modules --exclude="*.log" --exclude="*.md"; then
            echo "‚ùå Potential sensitive data found in code"
            exit 1
          else
            echo "‚úÖ No sensitive data found"
          fi
          
      - name: Validate PCI compliance patterns
        working-directory: backend-v2/frontend-v2
        run: |
          # Check that card numbers are always masked
          if grep -r "4[0-9]{15}\|5[1-5][0-9]{14}" app/ --exclude-dir=node_modules; then
            echo "‚ùå Unmasked card numbers found"
            exit 1
          fi
          
          # Check for proper input types on card fields
          if grep -r 'type="text".*card\|card.*type="text"' app/ --exclude-dir=node_modules; then
            echo "‚ùå Card inputs should not use type='text'"
            exit 1
          fi
          
          echo "‚úÖ PCI compliance patterns validated"

  # Unit Tests
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security-audit
    
    strategy:
      matrix:
        test-group:
          - component-rendering
          - user-interactions
          - data-validation
          - error-handling
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Run unit tests
        working-directory: backend-v2/frontend-v2
        run: |
          npm test -- __tests__/app/settings/billing/page.unit.test.tsx \
            --coverage \
            --coverageReporters=text,lcov,clover \
            --coverageDirectory=coverage/unit \
            --watchAll=false \
            --passWithNoTests \
            --testNamePattern="${{ matrix.test-group }}"
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: backend-v2/frontend-v2/coverage/unit/lcov.info
          flags: unit-tests,billing
          name: billing-unit-${{ matrix.test-group }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.test-group }}
          path: |
            backend-v2/frontend-v2/coverage/unit/
            backend-v2/frontend-v2/test-results/

  # Integration Tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-audit
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: bookedbarber_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install frontend dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Install backend dependencies
        working-directory: backend-v2
        run: pip install -r requirements.txt
        
      - name: Setup test database
        working-directory: backend-v2
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/bookedbarber_test
        run: |
          python -m alembic upgrade head
          python scripts/seed_test_data.py
          
      - name: Start backend server
        working-directory: backend-v2
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/bookedbarber_test
          REDIS_URL: redis://localhost:6379
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
          
      - name: Wait for backend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
          
      - name: Run integration tests
        working-directory: backend-v2/frontend-v2
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          npm test -- __tests__/app/settings/billing/page.integration.test.tsx \
            --coverage \
            --coverageReporters=text,lcov \
            --coverageDirectory=coverage/integration \
            --watchAll=false \
            --testTimeout=30000
            
      - name: Stop backend server
        if: always()
        run: |
          if [ -f backend-v2/backend.pid ]; then
            kill $(cat backend-v2/backend.pid) || true
          fi
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: backend-v2/frontend-v2/coverage/integration/lcov.info
          flags: integration-tests,billing
          name: billing-integration
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            backend-v2/frontend-v2/coverage/integration/
            backend-v2/frontend-v2/test-results/

  # Security Tests
  security-tests:
    name: üõ°Ô∏è Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security-audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Run security tests
        working-directory: backend-v2/frontend-v2
        run: |
          npm test -- __tests__/security/billing-security.test.tsx \
            --coverage \
            --coverageReporters=text,lcov \
            --coverageDirectory=coverage/security \
            --watchAll=false \
            --testNamePattern="Security"
            
      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000/settings/billing'
          cmd_options: '-a'
          
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            backend-v2/frontend-v2/coverage/security/
            report_html.html
            report_json.json

  # Performance Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Run performance tests
        working-directory: backend-v2/frontend-v2
        run: |
          npm test -- __tests__/performance/billing-performance.test.tsx \
            --coverage \
            --coverageReporters=text,lcov \
            --coverageDirectory=coverage/performance \
            --watchAll=false \
            --testTimeout=60000
            
      - name: Build application for performance testing
        working-directory: backend-v2/frontend-v2
        run: npm run build
        
      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000/settings/billing
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            backend-v2/frontend-v2/coverage/performance/
            .lighthouseci/

  # E2E Tests
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: bookedbarber_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: backend-v2/frontend-v2
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Install backend dependencies
        working-directory: backend-v2
        run: pip install -r requirements.txt
        
      - name: Setup test database
        working-directory: backend-v2
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/bookedbarber_test
        run: |
          python -m alembic upgrade head
          python scripts/seed_test_data.py
          
      - name: Start backend server
        working-directory: backend-v2
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/bookedbarber_test
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
          
      - name: Build and start frontend
        working-directory: backend-v2/frontend-v2
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          npm run build
          npm start &
          echo $! > frontend.pid
          
      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
          
      - name: Run E2E tests
        working-directory: backend-v2/frontend-v2
        run: |
          npx playwright test __tests__/e2e/billing-settings.e2e.test.ts \
            --project=${{ matrix.browser }} \
            --reporter=html,json \
            --output-dir=test-results/e2e-${{ matrix.browser }}
            
      - name: Stop servers
        if: always()
        run: |
          if [ -f backend-v2/backend.pid ]; then
            kill $(cat backend-v2/backend.pid) || true
          fi
          if [ -f backend-v2/frontend-v2/frontend.pid ]; then
            kill $(cat backend-v2/frontend-v2/frontend.pid) || true
          fi
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            backend-v2/frontend-v2/test-results/e2e-${{ matrix.browser }}/
            backend-v2/frontend-v2/playwright-report/

  # Accessibility Tests
  accessibility-tests:
    name: ‚ôø Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend-v2/frontend-v2/package-lock.json'
          
      - name: Install dependencies
        working-directory: backend-v2/frontend-v2
        run: npm ci
        
      - name: Build application
        working-directory: backend-v2/frontend-v2
        run: npm run build
        
      - name: Start application
        working-directory: backend-v2/frontend-v2
        run: |
          npm start &
          echo $! > frontend.pid
          
      - name: Wait for application to be ready
        run: timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
        
      - name: Run axe accessibility tests
        uses: Pa11y/pa11y-ci-action@v3
        with:
          sitemap: http://localhost:3000/sitemap.xml
          config: .pa11yci.json
          
      - name: Stop application
        if: always()
        run: |
          if [ -f backend-v2/frontend-v2/frontend.pid ]; then
            kill $(cat backend-v2/frontend-v2/frontend.pid) || true
          fi

  # Test Summary and Reporting
  test-summary:
    name: üìä Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-tests, integration-tests, security-tests, performance-tests, e2e-tests, accessibility-tests]
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate comprehensive test report
        run: |
          cat > test-summary.md << 'EOF'
          # üîê Billing Settings Test Report
          
          ## Test Results Summary
          
          | Test Suite | Status | Coverage |
          |------------|--------|----------|
          | Unit Tests | ${{ needs.unit-tests.result }} | [Coverage Report](./unit-test-results/coverage/) |
          | Integration Tests | ${{ needs.integration-tests.result }} | [Coverage Report](./integration-test-results/coverage/) |
          | Security Tests | ${{ needs.security-tests.result }} | [Security Report](./security-test-results/) |
          | Performance Tests | ${{ needs.performance-tests.result }} | [Performance Report](./performance-test-results/) |
          | E2E Tests | ${{ needs.e2e-tests.result }} | [E2E Reports](./e2e-test-results-chromium/) |
          | Accessibility Tests | ${{ needs.accessibility-tests.result }} | Pa11y Report |
          
          ## Security Compliance
          
          ‚úÖ PCI DSS compliance validated  
          ‚úÖ No sensitive data in code  
          ‚úÖ Proper input sanitization  
          ‚úÖ CSRF protection implemented  
          ‚úÖ XSS prevention measures  
          
          ## Performance Metrics
          
          - **Page Load Time**: < 2s target
          - **Bundle Size Impact**: Minimal
          - **Memory Usage**: Optimized
          - **Accessibility Score**: WCAG 2.1 AA compliant
          
          ## Next Steps
          
          ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.security-tests.result == 'success' && needs.performance-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.accessibility-tests.result == 'success' && '‚úÖ All tests passed! Ready for deployment.' || '‚ùå Some tests failed. Review individual test reports before proceeding.' }}
          EOF
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  # Production Deployment Gate
  deployment-gate:
    name: üöÄ Deployment Gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    needs: [unit-tests, integration-tests, security-tests, performance-tests, e2e-tests, accessibility-tests]
    
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.performance-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" && \
                "${{ needs.accessibility-tests.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed - ready for production deployment"
            echo "DEPLOYMENT_APPROVED=true" >> $GITHUB_ENV
          else
            echo "‚ùå Tests failed - blocking production deployment"
            echo "DEPLOYMENT_APPROVED=false" >> $GITHUB_ENV
            exit 1
          fi
          
      - name: Trigger production deployment
        if: env.DEPLOYMENT_APPROVED == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-production.yml',
              ref: 'production',
              inputs: {
                test_status: 'passed',
                billing_tests: 'verified'
              }
            });