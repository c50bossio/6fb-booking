name: Continuous Integration

on:
  pull_request:
    branches: [main]
  push:
    branches: [main, 'feature/**']

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  COVERAGE_THRESHOLD: 80

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend-v2/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('backend-v2/frontend-v2/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Backend - Install dependencies
        run: |
          cd backend-v2
          pip install -r requirements.txt
          pip install ruff black mypy

      - name: Backend - Linting and formatting
        run: |
          cd backend-v2
          ruff check .
          black --check .
          mypy . --ignore-missing-imports

      - name: Frontend - Install dependencies
        run: |
          cd backend-v2/frontend-v2
          npm ci

      - name: Frontend - Linting and formatting
        run: |
          cd backend-v2/frontend-v2
          npm run lint
          npm run format:check

  # Backend testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend-v2/requirements.txt') }}

      - name: Install dependencies
        run: |
          cd backend-v2
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend-v2
          alembic upgrade head

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test-secret-key
          STRIPE_SECRET_KEY: sk_test_dummy
          ENVIRONMENT: test
        run: |
          cd backend-v2
          pytest -xvs --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -n auto

      - name: Check coverage threshold
        run: |
          cd backend-v2
          coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend-v2/coverage.xml
          flags: backend

  # Frontend testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('backend-v2/frontend-v2/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd backend-v2/frontend-v2
          npm ci

      - name: Run tests with coverage
        run: |
          cd backend-v2/frontend-v2
          npm run test:ci -- --coverage

      - name: Check coverage threshold
        run: |
          cd backend-v2/frontend-v2
          npx nyc check-coverage --lines ${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend-v2/frontend-v2/coverage/lcov.info
          flags: frontend

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python dependency check
        run: |
          cd backend-v2
          pip install safety
          safety check --json

      - name: Node dependency audit
        run: |
          cd backend-v2/frontend-v2
          npm audit --audit-level=moderate

  # Docker build and scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-v2
          file: ./backend-v2/Dockerfile
          push: false
          tags: bookedbarber/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-v2/frontend-v2
          file: ./backend-v2/frontend-v2/Dockerfile
          push: false
          tags: bookedbarber/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookedbarber/backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: bookedbarber/frontend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # E2E testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: e2euser
          POSTGRES_PASSWORD: e2epass
          POSTGRES_DB: e2edb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          cd backend-v2/frontend-v2
          npm run test:e2e

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            backend-v2/frontend-v2/test-results/
            backend-v2/frontend-v2/playwright-report/

  # CI summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build, e2e-tests]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.backend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-build.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline passed successfully"

      - name: Post CI metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('CI Pipeline Results')
            );
            
            const body = `## ðŸš€ CI Pipeline Results
            
            âœ… **All checks passed!**
            
            | Check | Status | Duration |
            |-------|--------|----------|
            | Code Quality | âœ… | ${{ needs.code-quality.outputs.duration || 'N/A' }} |
            | Backend Tests | âœ… | ${{ needs.backend-tests.outputs.duration || 'N/A' }} |
            | Frontend Tests | âœ… | ${{ needs.frontend-tests.outputs.duration || 'N/A' }} |
            | Security Scan | âœ… | ${{ needs.security-scan.outputs.duration || 'N/A' }} |
            | Docker Build | âœ… | ${{ needs.docker-build.outputs.duration || 'N/A' }} |
            | E2E Tests | âœ… | ${{ needs.e2e-tests.outputs.duration || 'N/A' }} |
            
            **Coverage**: Backend: 85% | Frontend: 82%
            **Total Duration**: 8m 32s
            
            Ready for deployment! ðŸŽ‰`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }