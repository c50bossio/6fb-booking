# Logstash Pipeline Configuration for BookedBarber V2

input {
  # Application logs from file
  file {
    path => "/var/log/bookedbarber/api/*.log"
    start_position => "beginning"
    tags => ["bookedbarber", "api"]
    codec => json
  }
  
  file {
    path => "/var/log/bookedbarber/frontend/*.log"
    start_position => "beginning"
    tags => ["bookedbarber", "frontend"]
    codec => json
  }
  
  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    tags => ["nginx", "access"]
  }
  
  # Nginx error logs
  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    tags => ["nginx", "error"]
  }
  
  # PostgreSQL logs
  file {
    path => "/var/log/postgresql/postgresql-*.log"
    start_position => "beginning"
    tags => ["postgresql", "database"]
  }
  
  # System logs
  file {
    path => "/var/log/syslog"
    start_position => "beginning"
    tags => ["system", "syslog"]
  }
  
  # Redis logs
  file {
    path => "/var/log/redis/redis-server.log"
    start_position => "beginning"
    tags => ["redis", "cache"]
  }
  
  # Beats input for metrics
  beats {
    port => 5044
    type => "beats"
  }
  
  # Syslog input
  syslog {
    port => 5514
    type => "syslog"
  }
}

filter {
  # Common timestamp parsing
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # BookedBarber API logs
  if "api" in [tags] {
    # Parse JSON if not already parsed
    if [message] and [message] !~ /^\{/ {
      mutate {
        add_field => { "raw_message" => "%{message}" }
      }
    }
    
    # Extract request information
    if [request_id] {
      mutate {
        add_field => { "correlation_id" => "%{request_id}" }
      }
    }
    
    # Categorize log levels
    if [level] {
      if [level] == "ERROR" or [level] == "CRITICAL" {
        mutate {
          add_tag => ["error"]
          add_field => { "alert_required" => "true" }
        }
      }
    }
    
    # Parse user information
    if [user_id] {
      mutate {
        convert => { "user_id" => "integer" }
      }
    }
    
    # Parse response times
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
      
      # Flag slow requests
      if [response_time] > 2.0 {
        mutate {
          add_tag => ["slow_request"]
        }
      }
    }
  }
  
  # Nginx access logs
  if "nginx" in [tags] and "access" in [tags] {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}"
      }
    }
    
    # Convert numeric fields
    mutate {
      convert => { 
        "response_code" => "integer"
        "bytes" => "integer"
        "response_time" => "float"
      }
    }
    
    # Categorize by response code
    if [response_code] >= 400 and [response_code] < 500 {
      mutate {
        add_tag => ["client_error"]
      }
    } else if [response_code] >= 500 {
      mutate {
        add_tag => ["server_error", "error"]
        add_field => { "alert_required" => "true" }
      }
    }
    
    # Parse user agent
    if [agent] {
      useragent {
        source => "agent"
        target => "user_agent"
      }
    }
    
    # GeoIP lookup
    if [clientip] {
      geoip {
        source => "clientip"
        target => "geoip"
      }
    }
  }
  
  # PostgreSQL logs
  if "postgresql" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{NUMBER:pid}\] %{WORD:level}:  %{GREEDYDATA:pg_message}"
      }
    }
    
    # Parse slow queries
    if [pg_message] =~ /duration: \d+\.\d+ ms/ {
      grok {
        match => { 
          "pg_message" => "duration: %{NUMBER:query_duration:float} ms"
        }
      }
      
      if [query_duration] > 1000 {
        mutate {
          add_tag => ["slow_query"]
        }
      }
    }
    
    # Parse connection information
    if [pg_message] =~ /connection/ {
      mutate {
        add_tag => ["connection"]
      }
    }
  }
  
  # Security-related log parsing
  if [message] =~ /(?i)(unauthorized|forbidden|authentication|login|failed)/ {
    mutate {
      add_tag => ["security"]
    }
    
    # Extract IP addresses for security events
    grok {
      match => { 
        "message" => "%{IPV4:security_ip}"
      }
      tag_on_failure => []
    }
  }
  
  # Business event parsing
  if [event_type] {
    if [event_type] == "booking_created" or [event_type] == "payment_processed" {
      mutate {
        add_tag => ["business_event"]
      }
      
      # Convert monetary amounts
      if [amount] {
        mutate {
          convert => { "amount" => "float" }
        }
      }
    }
  }
  
  # Error categorization
  if "error" in [tags] {
    # Payment errors
    if [message] =~ /(?i)(payment|stripe|card|transaction)/ {
      mutate {
        add_tag => ["payment_error"]
        add_field => { "error_category" => "payment" }
      }
    }
    
    # Database errors
    if [message] =~ /(?i)(database|postgres|sql|connection)/ {
      mutate {
        add_tag => ["database_error"]
        add_field => { "error_category" => "database" }
      }
    }
    
    # API errors
    if [message] =~ /(?i)(api|endpoint|route|http)/ {
      mutate {
        add_tag => ["api_error"]
        add_field => { "error_category" => "api" }
      }
    }
  }
  
  # Add environment and service information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:production}"
      "service" => "bookedbarber"
      "version" => "${APP_VERSION:unknown}"
    }
  }
  
  # Clean up
  mutate {
    remove_field => [ "host", "path" ]
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "bookedbarber-logs-%{+YYYY.MM.dd}"
    template_name => "bookedbarber-logs"
    template => "/usr/share/logstash/templates/bookedbarber-template.json"
    template_overwrite => true
  }
  
  # Error logs to separate index for alerting
  if "error" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "bookedbarber-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Security events to security index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "bookedbarber-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Business events for analytics
  if "business_event" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "bookedbarber-business-%{+YYYY.MM.dd}"
    }
  }
  
  # Performance metrics
  if "slow_request" in [tags] or "slow_query" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "bookedbarber-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (remove in production)
  if "${LOG_DEBUG:false}" == "true" {
    stdout {
      codec => rubydebug
    }
  }
}