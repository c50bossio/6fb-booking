# Service Accounts for BookedBarber V2 Enterprise Components
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-service-account
  namespace: bookedbarber-v2
  labels:
    app: backend
    tier: serviceaccount
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend-service-account
  namespace: bookedbarber-v2
  labels:
    app: frontend
    tier: serviceaccount
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-service-account
  namespace: bookedbarber-v2
  labels:
    app: postgres
    tier: serviceaccount
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-service-account
  namespace: bookedbarber-v2
  labels:
    app: redis-cluster
    tier: serviceaccount
automountServiceAccountToken: true
---
# RBAC for Backend Services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bookedbarber-v2
  name: backend-role
rules:
# Allow reading ConfigMaps and Secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow creating and updating ConfigMaps for dynamic configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "update", "patch"]
# Allow reading pod information for service discovery
- apiGroups: [""]
  resources: ["pods", "endpoints", "services"]
  verbs: ["get", "list", "watch"]
# Allow reading events for debugging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backend-role-binding
  namespace: bookedbarber-v2
subjects:
- kind: ServiceAccount
  name: backend-service-account
  namespace: bookedbarber-v2
roleRef:
  kind: Role
  name: backend-role
  apiGroup: rbac.authorization.k8s.io
---
# RBAC for Frontend Services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bookedbarber-v2
  name: frontend-role
rules:
# Allow reading ConfigMaps for configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
# Allow reading services for API discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: frontend-role-binding
  namespace: bookedbarber-v2
subjects:
- kind: ServiceAccount
  name: frontend-service-account
  namespace: bookedbarber-v2
roleRef:
  kind: Role
  name: frontend-role
  apiGroup: rbac.authorization.k8s.io
---
# RBAC for Database Services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bookedbarber-v2
  name: postgres-role
rules:
# Allow reading ConfigMaps and Secrets for database configuration
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pod information for clustering
- apiGroups: [""]
  resources: ["pods", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow creating events for operational logging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgres-role-binding
  namespace: bookedbarber-v2
subjects:
- kind: ServiceAccount
  name: postgres-service-account
  namespace: bookedbarber-v2
roleRef:
  kind: Role
  name: postgres-role
  apiGroup: rbac.authorization.k8s.io
---
# RBAC for Redis Cluster Services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bookedbarber-v2
  name: redis-role
rules:
# Allow reading ConfigMaps and Secrets for Redis configuration
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pod information for cluster formation
- apiGroups: [""]
  resources: ["pods", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow creating events for cluster operations
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: redis-role-binding
  namespace: bookedbarber-v2
subjects:
- kind: ServiceAccount
  name: redis-service-account
  namespace: bookedbarber-v2
roleRef:
  kind: Role
  name: redis-role
  apiGroup: rbac.authorization.k8s.io
---
# Cluster-wide RBAC for Monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bookedbarber-monitoring
rules:
# Allow reading nodes and node metrics
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "nodes/metrics"]
  verbs: ["get", "list", "watch"]
# Allow reading pods and pod metrics across namespaces
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
# Allow reading services and endpoints across namespaces
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow reading ingresses for traffic monitoring
- apiGroups: ["networking.k8s.io", "extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
# Allow reading deployments and statefulsets for application monitoring
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch"]
# Allow accessing non-resource URLs for metrics
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bookedbarber-monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bookedbarber-monitoring
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
# Pod Security Policy for Enterprise Security
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: bookedbarber-psp
  labels:
    app: bookedbarber
    tier: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1001
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1001
        max: 65535
  seLinux:
    rule: 'RunAsAny'
---
# RBAC for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp-user
  namespace: bookedbarber-v2
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - bookedbarber-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp-user-binding
  namespace: bookedbarber-v2
roleRef:
  kind: Role
  name: psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: backend-service-account
  namespace: bookedbarber-v2
- kind: ServiceAccount
  name: frontend-service-account
  namespace: bookedbarber-v2
- kind: ServiceAccount
  name: postgres-service-account
  namespace: bookedbarber-v2
- kind: ServiceAccount
  name: redis-service-account
  namespace: bookedbarber-v2