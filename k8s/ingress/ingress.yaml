# Nginx Ingress Controller for BookedBarber V2
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookedbarber-ingress
  namespace: bookedbarber
  labels:
    app.kubernetes.io/name: bookedbarber
    app.kubernetes.io/component: ingress
  annotations:
    # Nginx ingress controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options SAMEORIGIN always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.stripe.com *.google.com *.googleapis.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; img-src 'self' data: *.stripe.com *.google.com; connect-src 'self' *.stripe.com api.stripe.com *.google.com *.googleapis.com; frame-src *.stripe.com;" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Enable CORS for API endpoints
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://bookedbarber.com,https://www.bookedbarber.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Gzip compression
    nginx.ingress.kubernetes.io/gzip-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
    
    # Client body size for file uploads
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # Connection and read timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Certificate management with cert-manager
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
  - hosts:
    - bookedbarber.com
    - www.bookedbarber.com
    - api.bookedbarber.com
    secretName: bookedbarber-tls
  rules:
  # Main application domain
  - host: bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000
  
  # WWW redirect
  - host: www.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000
  
  # API subdomain
  - host: api.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000

---
# Additional ingress for API paths on main domain
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookedbarber-api-ingress
  namespace: bookedbarber
  labels:
    app.kubernetes.io/name: bookedbarber
    app.kubernetes.io/component: api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Stricter rate limiting for API endpoints
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Special rate limiting for auth endpoints
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/api/v1/auth/login {
        limit_req zone=login burst=5 nodelay;
      }
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - bookedbarber.com
    secretName: bookedbarber-tls
  rules:
  - host: bookedbarber.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000
      - path: /webhooks
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000

---
# ClusterIssuer for Let's Encrypt certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@bookedbarber.com  # Update with your email
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Network policy for ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: bookedbarber
  labels:
    app.kubernetes.io/name: bookedbarber
    app.kubernetes.io/component: network-policy
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8000
  - from: []  # Allow all ingress traffic within namespace
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379