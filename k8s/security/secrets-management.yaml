# =============================================================================
# BookedBarber V2 - Secure Secrets Management with External Secrets Operator
# =============================================================================
# üîí Enterprise-grade secrets management
# üîÑ Automatic secret rotation and synchronization
# üõ°Ô∏è Integration with cloud secret managers
# =============================================================================

---
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# External Secrets Operator RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: external-secrets-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/ExternalSecretsRole

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
- kind: ServiceAccount
  name: external-secrets-sa
  namespace: external-secrets-system

---
# AWS Secrets Manager SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyId:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# HashiCorp Vault SecretStore (Alternative)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: production
spec:
  provider:
    vault:
      server: "https://vault.bookedbarber.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "bookedbarber-role"
          serviceAccountRef:
            name: vault-auth-sa

---
# Backend Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backend-secrets
  namespace: production
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: bookedbarber-backend-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: bookedbarber-backend
      data:
        DATABASE_URL: "postgresql://{{ .database_user }}:{{ .database_password }}@{{ .database_host }}:5432/{{ .database_name }}"
        REDIS_URL: "redis://:{{ .redis_password }}@{{ .redis_host }}:6379/0"
        SECRET_KEY: "{{ .secret_key }}"
        JWT_SECRET_KEY: "{{ .jwt_secret_key }}"
        STRIPE_SECRET_KEY: "{{ .stripe_secret_key }}"
        SENDGRID_API_KEY: "{{ .sendgrid_api_key }}"
        TWILIO_AUTH_TOKEN: "{{ .twilio_auth_token }}"
        GOOGLE_CLIENT_SECRET: "{{ .google_client_secret }}"
  data:
  - secretKey: database_user
    remoteRef:
      key: bookedbarber/production/database
      property: username
  - secretKey: database_password
    remoteRef:
      key: bookedbarber/production/database
      property: password
  - secretKey: database_host
    remoteRef:
      key: bookedbarber/production/database
      property: host
  - secretKey: database_name
    remoteRef:
      key: bookedbarber/production/database
      property: name
  - secretKey: redis_password
    remoteRef:
      key: bookedbarber/production/redis
      property: password
  - secretKey: redis_host
    remoteRef:
      key: bookedbarber/production/redis
      property: host
  - secretKey: secret_key
    remoteRef:
      key: bookedbarber/production/app
      property: secret_key
  - secretKey: jwt_secret_key
    remoteRef:
      key: bookedbarber/production/app
      property: jwt_secret_key
  - secretKey: stripe_secret_key
    remoteRef:
      key: bookedbarber/production/payments
      property: stripe_secret_key
  - secretKey: sendgrid_api_key
    remoteRef:
      key: bookedbarber/production/email
      property: sendgrid_api_key
  - secretKey: twilio_auth_token
    remoteRef:
      key: bookedbarber/production/sms
      property: twilio_auth_token
  - secretKey: google_client_secret
    remoteRef:
      key: bookedbarber/production/oauth
      property: google_client_secret

---
# Frontend Application Secrets (Public keys only)
apiVersion: v1
kind: ConfigMap
metadata:
  name: bookedbarber-frontend-config
  namespace: production
  labels:
    app: bookedbarber-frontend
data:
  NEXT_PUBLIC_API_URL: "https://api.bookedbarber.com"
  NEXT_PUBLIC_API_BASE_URL: "https://api.bookedbarber.com/api/v2"
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: "pk_live_..."
  NEXT_PUBLIC_GOOGLE_CLIENT_ID: "228809237848-..."
  NEXT_PUBLIC_GA_TRACKING_ID: "G-..."
  NEXT_PUBLIC_ENVIRONMENT: "production"

---
# TLS Certificate Management
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@bookedbarber.com
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: route53-credentials-secret
            key: secret-access-key

---
# TLS Certificate for main domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bookedbarber-tls
  namespace: production
spec:
  secretName: bookedbarber-tls-secret
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
  dnsNames:
  - bookedbarber.com
  - api.bookedbarber.com
  - app.bookedbarber.com

---
# Sealed Secrets Controller (Alternative approach)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    name: sealed-secrets-controller
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: sealed-secrets-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: sealed-secrets-controller
    spec:
      containers:
      - args: []
        command:
        - controller
        env: []
        image: quay.io/bitnami/sealed-secrets-controller:v0.23.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 1
        name: sealed-secrets-controller
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: metrics
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: 256Mi
            cpu: 500m
          requests:
            memory: 128Mi
            cpu: 250m
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      imagePullSecrets: []
      initContainers: []
      securityContext:
        fsGroup: 65534
      serviceAccountName: sealed-secrets-controller
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: tmp

---
# Secret Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: production
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotation-sa
          containers:
          - name: secret-rotator
            image: bookedbarber/secret-rotator:latest
            env:
            - name: AWS_REGION
              value: us-east-1
            - name: NAMESPACE
              value: production
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting secret rotation..."
              
              # Rotate JWT secrets
              NEW_JWT_SECRET=$(openssl rand -base64 64)
              aws secretsmanager update-secret \
                --secret-id bookedbarber/production/app \
                --secret-string "{\"jwt_secret_key\":\"$NEW_JWT_SECRET\"}"
              
              # Rotate API keys (example)
              # Add rotation logic for other secrets as needed
              
              echo "Secret rotation completed"
            resources:
              limits:
                memory: 128Mi
                cpu: 100m
              requests:
                memory: 64Mi
                cpu: 50m
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000

---
# Secret Scanning and Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-scanner-config
  namespace: production
data:
  scan-rules.yaml: |
    rules:
    - name: aws-access-key
      pattern: 'AKIA[0-9A-Z]{16}'
      severity: high
    - name: stripe-secret-key
      pattern: 'sk_live_[0-9a-zA-Z]{24}'
      severity: critical
    - name: jwt-secret
      pattern: 'eyJ[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*'
      severity: medium

---
# NetworkPolicy for secrets access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-access-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: bookedbarber-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: external-secrets-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS to AWS/external secret managers