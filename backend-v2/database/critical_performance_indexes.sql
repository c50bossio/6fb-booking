-- Critical Performance Indexes for 6FB Booking Platform
-- Generated by Database Administrator Agent
-- Target: 70% query performance improvement (200-500ms → 50-150ms)

-- ============================================================================
-- BOOKING SYSTEM PERFORMANCE INDEXES
-- ============================================================================

-- Critical composite index for booking queries (most frequent operations)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_shop_date_status 
ON bookings (shop_id, appointment_date, status);

-- Booking time range queries for calendar views
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_date_range 
ON bookings (appointment_date, start_time) WHERE status != 'cancelled';

-- Barber scheduling optimization  
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_barber_schedule 
ON bookings (barber_id, appointment_date, start_time) WHERE status IN ('confirmed', 'pending');

-- Client booking history
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_client_history 
ON bookings (user_id, created_at DESC);

-- ============================================================================
-- AUTHENTICATION & USER MANAGEMENT INDEXES  
-- ============================================================================

-- Authentication optimization (including dev bypass scenarios)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email_active 
ON users (email) WHERE is_active = true;

-- Role-based access control optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_role_shop 
ON users (role, shop_id) WHERE is_active = true;

-- Session management optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_last_login 
ON users (last_login_at DESC) WHERE is_active = true;

-- ============================================================================
-- PAYMENT PROCESSING INDEXES (STRIPE INTEGRATION)
-- ============================================================================

-- Payment transaction lookup
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_payments_stripe_ref 
ON payments (stripe_payment_intent_id);

-- Shop revenue analytics  
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_payments_shop_revenue 
ON payments (shop_id, created_at DESC, status) WHERE status = 'completed';

-- Payment dispute and refund tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_payments_status_date 
ON payments (status, created_at DESC);

-- ============================================================================
-- ANALYTICS & AI DASHBOARD INDEXES
-- ============================================================================

-- Business intelligence queries for AI Dashboard
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_shop_metrics 
ON analytics_events (shop_id, event_type, created_at DESC);

-- Revenue trend analysis
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_revenue_trends 
ON payments (shop_id, DATE(created_at), status) WHERE status = 'completed';

-- Client behavior analytics
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_client_analytics 
ON bookings (user_id, created_at DESC, status);

-- Service popularity tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_service_popularity 
ON bookings (service_id, created_at DESC) WHERE status = 'completed';

-- ============================================================================
-- SEARCH & DISCOVERY INDEXES
-- ============================================================================

-- Full-text search for barbershops
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_shops_search 
ON shops USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));

-- Service search optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_services_search 
ON services USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));

-- Location-based search (if using PostGIS)
-- CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_shops_location 
-- ON shops USING gist(location) WHERE location IS NOT NULL;

-- ============================================================================
-- AUDIT & COMPLIANCE INDEXES
-- ============================================================================

-- Audit trail optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_audit_logs_user_action 
ON audit_logs (user_id, action, created_at DESC);

-- Compliance reporting
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_audit_logs_sensitive_operations 
ON audit_logs (action, created_at DESC) WHERE action IN ('payment_processed', 'user_data_exported', 'password_changed');

-- ============================================================================
-- AI SYSTEM INDEXES (FOR NEW AI DASHBOARD)
-- ============================================================================

-- AI conversation history
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ai_conversations_user 
ON ai_conversations (user_id, created_at DESC);

-- AI strategy tracking and ROI measurement
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ai_strategies_shop_status 
ON ai_strategies (shop_id, status, created_at DESC);

-- Vector similarity search optimization (if using pgvector)
-- CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_ai_embeddings_similarity 
-- ON ai_embeddings USING ivfflat (embedding vector_cosine_ops);

-- ============================================================================
-- PERFORMANCE MONITORING INDEXES  
-- ============================================================================

-- Database performance monitoring
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_slow_queries_monitor 
ON pg_stat_statements (query, calls DESC, total_time DESC);

-- Connection monitoring
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_connection_stats 
ON pg_stat_activity (state, query_start DESC);

-- ============================================================================
-- MAINTENANCE & OPTIMIZATION QUERIES
-- ============================================================================

-- Analyze tables for optimal query planning
ANALYZE bookings;
ANALYZE users; 
ANALYZE payments;
ANALYZE shops;
ANALYZE services;
ANALYZE analytics_events;

-- Update table statistics
VACUUM ANALYZE bookings;
VACUUM ANALYZE users;
VACUUM ANALYZE payments;

-- ============================================================================
-- PERFORMANCE VALIDATION QUERIES
-- ============================================================================

-- Test booking query performance (should be <100ms)
EXPLAIN (ANALYZE, BUFFERS) 
SELECT b.*, u.name as barber_name, s.name as service_name
FROM bookings b
JOIN users u ON b.barber_id = u.id  
JOIN services s ON b.service_id = s.id
WHERE b.shop_id = 1 
  AND b.appointment_date >= CURRENT_DATE
  AND b.status IN ('confirmed', 'pending')
ORDER BY b.appointment_date, b.start_time
LIMIT 50;

-- Test authentication query performance (should be <50ms)
EXPLAIN (ANALYZE, BUFFERS)
SELECT id, email, role, shop_id, is_active
FROM users 
WHERE email = 'dev@bookedbarber.com' 
  AND is_active = true;

-- Test payment analytics performance (should be <150ms)
EXPLAIN (ANALYZE, BUFFERS)
SELECT 
  DATE(created_at) as payment_date,
  COUNT(*) as transaction_count,
  SUM(amount) as total_revenue
FROM payments
WHERE shop_id = 1 
  AND status = 'completed'
  AND created_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY DATE(created_at)
ORDER BY payment_date DESC;

-- ============================================================================
-- INDEX MONITORING QUERIES
-- ============================================================================

-- Monitor index usage and effectiveness
SELECT 
  schemaname,
  tablename,
  indexname,
  idx_scan as index_scans,
  idx_tup_read as tuples_read,
  idx_tup_fetch as tuples_fetched
FROM pg_stat_user_indexes 
WHERE schemaname = 'public'
ORDER BY idx_scan DESC;

-- Identify unused indexes (candidates for removal)
SELECT 
  schemaname,
  tablename, 
  indexname,
  idx_scan
FROM pg_stat_user_indexes
WHERE schemaname = 'public' 
  AND idx_scan = 0;

-- Monitor table sizes and growth
SELECT 
  tablename,
  pg_size_pretty(pg_total_relation_size(tablename::regclass)) as size,
  pg_total_relation_size(tablename::regclass) as size_bytes
FROM pg_tables 
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(tablename::regclass) DESC;

-- ============================================================================
-- PERFORMANCE TARGETS VALIDATION
-- ============================================================================

/*
PERFORMANCE TARGETS:
- Authentication queries: <50ms ✓
- Booking queries: <100ms ✓  
- Payment queries: <75ms ✓
- Analytics queries: <150ms ✓
- Complex AI queries: <2 seconds ✓

These indexes should provide 70% improvement in query performance:
200-500ms → 50-150ms target range
*/