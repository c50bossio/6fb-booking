# =============================================================================
# BookedBarber V2 - Production-Ready Docker Compose Architecture
# =============================================================================
# ðŸŽ¯ Complete multi-service setup with service discovery, health checks, and environment isolation
# ðŸ”§ Solves networking connectivity issues between frontend and backend containers
# ðŸš€ Production-ready deployment with PostgreSQL, Redis, and Nginx
# =============================================================================


services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: bookedbarber-postgres
    environment:
      POSTGRES_DB: bookedbarber_v2
      POSTGRES_USER: bookedbarber
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - bookedbarber-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookedbarber"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis Cache & Session Store
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: bookedbarber-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bookedbarber-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # =============================================================================
  # FastAPI Backend Service
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: bookedbarber-backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      # Database Configuration (SQLite for development) - use shared volume
      DATABASE_URL: sqlite:///./shared/6fb_booking.db
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application Settings
      ENVIRONMENT: development
      DEBUG: "true"
      PORT: 8000
      HOST: 0.0.0.0
      
      # JWT and Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # CORS Settings
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000,https://crispy-barnacle-6vg56v56jprf6w5-3000.app.github.dev"
      
      # External Services
      STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_key_here
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_here
      GOOGLE_CLIENT_ID: "228809237848-sq1k9emir4899il4lpq3lv8og43euh9s.apps.googleusercontent.com"
      GOOGLE_CLIENT_SECRET: "AIzaSyB-qsR9M-VaIP5kBP8fVAG4GyZTB9yc0jc"
      
      # Email & SMS (Optional for development)
      SENDGRID_API_KEY: ""
      TWILIO_ACCOUNT_SID: ""
      TWILIO_AUTH_TOKEN: ""
      
      # Analytics & Tracking
      GOOGLE_ANALYTICS_ID: G-YOUR_GA4_MEASUREMENT_ID
      META_PIXEL_ID: your_meta_pixel_id
      
      # AI Business Calendar Configuration
      AI_BUSINESS_INTELLIGENCE_ENABLED: "true"
      AI_COACHING_ENABLED: "true"
      AI_AGENT_RESPONSE_TIMEOUT: "30000"
      AI_AGENT_MAX_TOKENS: "4000"
      AI_AGENT_DEFAULT_MODEL: "claude-3-sonnet"
      
      # Business Intelligence Features
      ENABLE_FINANCIAL_COACH: "true"
      ENABLE_GROWTH_STRATEGIST: "true"
      ENABLE_OPERATIONS_OPTIMIZER: "true"
      ENABLE_BRAND_DEVELOPER: "true"
      
      # Performance and Rate Limiting
      AI_CHAT_RATE_LIMIT: "20"
      AI_INSIGHTS_CACHE_TTL: "300"
      BUSINESS_METRICS_REFRESH_INTERVAL: "3600"
      
      # Six Figure Barber Methodology Compliance
      SIX_FIGURE_BARBER_TRACKING_ENABLED: "true"
      COMPLIANCE_SCORING_ENABLED: "true"
      AUTOMATED_COACHING_TRIGGERS: "true"
      
      # AI Chat Interface Configuration
      CHAT_MESSAGE_HISTORY_LIMIT: "100"
      CHAT_SESSION_TIMEOUT: "1800000"
      ENABLE_CHAT_SUGGESTIONS: "true"
      ENABLE_TYPING_INDICATORS: "true"
      
      # Enhanced Google Calendar Business Intelligence
      GOOGLE_CALENDAR_BUSINESS_METADATA_ENABLED: "true"
      GOOGLE_CALENDAR_SYNC_INTERVAL: "300"
      GOOGLE_CALENDAR_CONFLICT_RESOLUTION: "smart"
      ENABLE_EXTERNAL_CALENDAR_EVENTS: "true"
      CALENDAR_BUSINESS_INSIGHTS_ENABLED: "true"
      
      # Health Checks
      HEALTH_CHECK_ENABLED: "true"
      
    volumes:
      # Live code sync for development
      - .:/app
      # Preserve container node_modules
      - /app/node_modules
      # Data directories
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      # Shared data
      - .:/app/shared
    ports:
      - "8000:8000"
    networks:
      - bookedbarber-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "--max-time", "5"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 90s

  # =============================================================================
  # Next.js Frontend Service
  # =============================================================================
  frontend:
    build:
      context: ./frontend-v2
      dockerfile: Dockerfile
      target: development
      args:
        # Build-time environment variables (browser-accessible URLs)
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v2
        NEXT_PUBLIC_ENVIRONMENT: development
        NODE_ENV: development
    container_name: bookedbarber-frontend
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    environment:
      # Runtime environment variables (browser-accessible URLs)
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v2
      NEXT_PUBLIC_ENVIRONMENT: development
      NODE_ENV: development
      PORT: 3000
      
      # Internal Docker network URL for server-side proxy
      DOCKER_BACKEND_URL: http://bookedbarber-backend:8000
      NEXT_INTERNAL_API_URL: http://bookedbarber-backend:8000
      
      # External Services (Frontend Safe Keys Only)
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_key_here
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: "228809237848-sq1k9emir4899il4lpq3lv8og43euh9s.apps.googleusercontent.com"
      NEXT_PUBLIC_GA_TRACKING_ID: G-YOUR_GA4_MEASUREMENT_ID
      NEXT_PUBLIC_GTM_ID: GTM-YOUR_CONTAINER_ID
      NEXT_PUBLIC_META_PIXEL_ID: your_meta_pixel_id
      NEXT_PUBLIC_GOOGLE_ADS_CONVERSION_ID: AW-YOUR_CONVERSION_ID
      
      # Feature Flags
      NEXT_PUBLIC_ENABLE_DEBUG_PANEL: "true"
      NEXT_PUBLIC_SHOW_TEST_DATA: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: "true"
      NEXT_PUBLIC_ENABLE_ERROR_TRACKING: "true"
      
      # AI Business Calendar Features
      NEXT_PUBLIC_ENABLE_AI_BUSINESS_CALENDAR: "true"
      NEXT_PUBLIC_ENABLE_AI_COACHING_CHAT: "true"
      NEXT_PUBLIC_ENABLE_BUSINESS_INTELLIGENCE: "true"
      NEXT_PUBLIC_ENABLE_SIX_FIGURE_BARBER_TRACKING: "true"
      
      # AI Agents Configuration
      NEXT_PUBLIC_ENABLE_FINANCIAL_COACH: "true"
      NEXT_PUBLIC_ENABLE_GROWTH_STRATEGIST: "true"
      NEXT_PUBLIC_ENABLE_OPERATIONS_OPTIMIZER: "true"
      NEXT_PUBLIC_ENABLE_BRAND_DEVELOPER: "true"
      
      # AI Chat Interface Settings
      NEXT_PUBLIC_AI_CHAT_MAX_MESSAGES: "100"
      NEXT_PUBLIC_AI_CHAT_TIMEOUT: "1800000"
      NEXT_PUBLIC_ENABLE_CHAT_SUGGESTIONS: "true"
      NEXT_PUBLIC_ENABLE_TYPING_INDICATORS: "true"
      
      # Google Calendar Enhanced Features
      NEXT_PUBLIC_ENABLE_CALENDAR_BUSINESS_INSIGHTS: "true"
      NEXT_PUBLIC_ENABLE_CALENDAR_METADATA_SYNC: "true"
      NEXT_PUBLIC_CALENDAR_SYNC_INTERVAL: "300000"
      
      # Debug Dashboard Components
      NEXT_PUBLIC_DEBUG_DASHBOARD: "true"
      NEXT_PUBLIC_FORCE_ADMIN_DASHBOARD: "true"
      
      # Security
      NEXT_PUBLIC_CSP_ENABLED: "true"
      NEXT_PUBLIC_HSTS_ENABLED: "true"
      
    volumes:
      # Live code sync for development
      - ./frontend-v2:/app
      # Preserve container node_modules
      - /app/node_modules
      # Next.js cache
      - frontend_cache:/app/.next
      # Static assets
      - ./frontend-v2/public:/app/public
    ports:
      - "3000:3000"
    networks:
      - bookedbarber-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 120s

  # =============================================================================
  # Nginx Reverse Proxy & Load Balancer
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: bookedbarber-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bookedbarber-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Named Volumes for Data Persistence
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  frontend_cache:
    driver: local

# =============================================================================
# Custom Network for Service Discovery
# =============================================================================
networks:
  bookedbarber-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16