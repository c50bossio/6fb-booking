# =============================================================================
# BookedBarber V2 - Monitoring and Metrics Stack
# =============================================================================
# ðŸ“Š Prometheus for metrics collection and alerting
# ðŸ“ˆ Grafana for visualization and dashboards
# ðŸš¨ AlertManager for notification routing
# =============================================================================

services:
  # =============================================================================
  # Prometheus - Metrics Collection and Storage
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: bookedbarber-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - bookedbarber-network
      - monitoring-network
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =============================================================================
  # Grafana - Visualization and Dashboards
  # =============================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: bookedbarber-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/bookedbarber-overview.json
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - monitoring-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # Node Exporter - System Metrics
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: bookedbarber-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - monitoring-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # cAdvisor - Container Metrics
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: bookedbarber-cadvisor
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - monitoring-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    restart: unless-stopped
    privileged: true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Redis Exporter - Redis Metrics
  # =============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: bookedbarber-redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:9121:9121"
    networks:
      - bookedbarber-network
      - monitoring-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # PostgreSQL Exporter - Database Metrics
  # =============================================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: bookedbarber-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://bookedbarber:${POSTGRES_PASSWORD}@postgres:5432/bookedbarber_v2?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres-exporter/queries.yaml"
    ports:
      - "127.0.0.1:9187:9187"
    networks:
      - bookedbarber-network
      - monitoring-network
    volumes:
      - ./config/postgres-exporter-queries.yaml:/etc/postgres-exporter/queries.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AlertManager - Alert Routing and Notifications
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: bookedbarber-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    ports:
      - "127.0.0.1:9093:9093"
    networks:
      - monitoring-network
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  bookedbarber-network:
    external: true
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager