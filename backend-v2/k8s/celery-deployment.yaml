apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: bookedbarber-v2
  labels:
    app: celery-worker
    component: background-jobs
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: celery-worker
        image: bookedbarber/backend:latest
        command: ["celery", "-A", "services.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
        envFrom:
        - configMapRef:
            name: bookedbarber-config
        - secretRef:
            name: bookedbarber-secrets
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: REDIS_URL
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: REDIS_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "celery -A services.celery_app inspect ping"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: bookedbarber-v2
  labels:
    app: celery-beat
    component: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: celery-beat
        image: bookedbarber/backend:latest
        command: ["celery", "-A", "services.celery_app", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: bookedbarber-config
        - secretRef:
            name: bookedbarber-secrets
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: REDIS_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f 'celery.*beat'"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-flower
  namespace: bookedbarber-v2
  labels:
    app: celery-flower
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-flower
  template:
    metadata:
      labels:
        app: celery-flower
    spec:
      containers:
      - name: celery-flower
        image: bookedbarber/backend:latest
        command: ["celery", "-A", "services.celery_app", "flower", "--port=5555"]
        ports:
        - containerPort: 5555
        envFrom:
        - configMapRef:
            name: bookedbarber-config
        - secretRef:
            name: bookedbarber-secrets
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: REDIS_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: celery-flower-service
  namespace: bookedbarber-v2
spec:
  selector:
    app: celery-flower
  ports:
  - protocol: TCP
    port: 5555
    targetPort: 5555
  type: ClusterIP