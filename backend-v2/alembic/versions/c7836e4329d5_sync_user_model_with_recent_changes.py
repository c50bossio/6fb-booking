"""sync_user_model_with_recent_changes

Revision ID: c7836e4329d5
Revises: 2d745be4ee48
Create Date: 2025-07-03 10:09:04.096198

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = 'c7836e4329d5'
down_revision: Union[str, Sequence[str], None] = '2d745be4ee48'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscription_usage')
    op.drop_index(op.f('idx_campaign_tracking_active'), table_name='campaign_tracking')
    op.drop_index(op.f('idx_campaign_tracking_dates'), table_name='campaign_tracking')
    op.drop_index(op.f('ix_campaign_tracking_campaign_id'), table_name='campaign_tracking')
    op.drop_index(op.f('ix_campaign_tracking_id'), table_name='campaign_tracking')
    op.drop_index(op.f('ix_campaign_tracking_user_id'), table_name='campaign_tracking')
    op.drop_table('campaign_tracking')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_attribution_paths_id'), table_name='attribution_paths')
    op.drop_index(op.f('ix_attribution_paths_user_id'), table_name='attribution_paths')
    op.drop_table('attribution_paths')
    op.drop_table('pricing_plans')
    op.drop_index(op.f('ix_short_urls_id'), table_name='short_urls')
    op.drop_index(op.f('ix_short_urls_short_code'), table_name='short_urls')
    op.drop_table('short_urls')
    op.drop_index(op.f('idx_conversion_events_campaign'), table_name='conversion_events')
    op.drop_index(op.f('idx_conversion_events_channel_date'), table_name='conversion_events')
    op.drop_index(op.f('idx_conversion_events_type_date'), table_name='conversion_events')
    op.drop_index(op.f('idx_conversion_events_user_date'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_channel'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_client_id'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_event_id'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_event_name'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_event_type'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_id'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_session_id'), table_name='conversion_events')
    op.drop_index(op.f('ix_conversion_events_user_id'), table_name='conversion_events')
    op.drop_table('conversion_events')
    op.drop_index(op.f('ix_tracking_configurations_id'), table_name='tracking_configurations')
    op.drop_table('tracking_configurations')
    op.drop_index(op.f('idx_template_active_name'), table_name='notification_templates_v2')
    op.drop_index(op.f('idx_template_type_category'), table_name='notification_templates_v2')
    op.drop_index(op.f('ix_notification_templates_v2_id'), table_name='notification_templates_v2')
    op.drop_index(op.f('ix_notification_templates_v2_name'), table_name='notification_templates_v2')
    op.drop_table('notification_templates_v2')
    op.drop_index(op.f('idx_conversion_goals_user_active'), table_name='conversion_goals')
    op.drop_index(op.f('ix_conversion_goals_id'), table_name='conversion_goals')
    op.drop_index(op.f('ix_conversion_goals_user_id'), table_name='conversion_goals')
    op.drop_table('conversion_goals')
    op.add_column('appointments', sa.Column('location_id', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('created_timezone', sa.String(length=50), nullable=True))
    op.add_column('appointments', sa.Column('user_timezone', sa.String(length=50), nullable=True))
    op.add_column('appointments', sa.Column('display_timezone', sa.String(length=50), nullable=True))
    op.add_column('appointments', sa.Column('recurring_series_id', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('is_recurring_instance', sa.Boolean(), nullable=True))
    op.add_column('appointments', sa.Column('original_scheduled_date', sa.Date(), nullable=True))
    op.add_column('appointments', sa.Column('recurrence_sequence', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('version', sa.Integer(), nullable=False))
    op.alter_column('appointments', 'google_event_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('appointments', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text("'false'"))
    op.drop_index(op.f('idx_appointments_barber_date'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_barber_id'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_client_id'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_client_id_status'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_completed_duration'), table_name='appointments', sqlite_where=sa.text("status = 'completed'"))
    op.drop_index(op.f('idx_appointments_created_at'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_no_show_time'), table_name='appointments', sqlite_where=sa.text("status = 'no_show'"))
    op.drop_index(op.f('idx_appointments_start_time'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_start_time_service'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_status'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_status_date'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_status_start_time'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_user_id_status'), table_name='appointments')
    op.drop_index(op.f('idx_appointments_user_time_status'), table_name='appointments')
    op.create_index(op.f('ix_appointments_created_timezone'), 'appointments', ['created_timezone'], unique=False)
    op.create_index(op.f('ix_appointments_display_timezone'), 'appointments', ['display_timezone'], unique=False)
    op.create_index(op.f('ix_appointments_user_timezone'), 'appointments', ['user_timezone'], unique=False)
    op.create_foreign_key(None, 'appointments', 'recurring_appointment_series', ['recurring_series_id'], ['id'])
    op.create_foreign_key(None, 'appointments', 'barbershop_locations', ['location_id'], ['id'])
    op.create_foreign_key(None, 'appointments', 'users', ['barber_id'], ['id'])
    op.alter_column('barber_availability', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text("'false'"))
    op.drop_index(op.f('idx_barber_availability_barber_day'), table_name='barber_availability')
    op.alter_column('barber_time_off', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text("'false'"))
    op.drop_index(op.f('idx_barber_time_off_barber_dates'), table_name='barber_time_off')
    op.add_column('booking_settings', sa.Column('default_user_timezone', sa.String(length=50), nullable=True))
    op.add_column('booking_settings', sa.Column('allowed_timezones', sa.JSON(), nullable=True))
    op.add_column('booking_settings', sa.Column('timezone_auto_detect', sa.Boolean(), nullable=True))
    op.add_column('clients', sa.Column('location_id', sa.Integer(), nullable=True))
    op.alter_column('clients', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text("'false'"))
    op.drop_index(op.f('idx_clients_created_at'), table_name='clients')
    op.drop_index(op.f('idx_clients_customer_type'), table_name='clients')
    op.drop_index(op.f('idx_clients_first_visit_date'), table_name='clients')
    op.drop_index(op.f('idx_clients_last_visit_date'), table_name='clients')
    op.drop_index(op.f('idx_clients_total_spent'), table_name='clients')
    op.drop_index(op.f('idx_clients_total_visits'), table_name='clients')
    op.create_foreign_key(None, 'clients', 'barbershop_locations', ['location_id'], ['id'])
    op.drop_index(op.f('ix_cookie_consents_user_id'), table_name='cookie_consents')
    op.create_index(op.f('ix_cookie_consents_id'), 'cookie_consents', ['id'], unique=False)
    op.drop_index(op.f('ix_data_export_requests_request_id'), table_name='data_export_requests')
    op.drop_index(op.f('ix_data_export_requests_status'), table_name='data_export_requests')
    op.drop_index(op.f('ix_data_export_requests_user_id'), table_name='data_export_requests')
    op.create_index(op.f('ix_data_export_requests_id'), 'data_export_requests', ['id'], unique=False)
    op.create_unique_constraint(None, 'data_export_requests', ['request_id'])
    op.drop_index(op.f('ix_data_processing_logs_processing_date'), table_name='data_processing_logs')
    op.drop_index(op.f('ix_data_processing_logs_purpose'), table_name='data_processing_logs')
    op.drop_index(op.f('ix_data_processing_logs_user_id'), table_name='data_processing_logs')
    op.create_index(op.f('ix_data_processing_logs_id'), 'data_processing_logs', ['id'], unique=False)
    op.alter_column('integrations', 'status',
               existing_type=sa.VARCHAR(length=8),
               type_=sa.Enum('ACTIVE', 'INACTIVE', 'ERROR', 'PENDING', 'EXPIRED', 'SUSPENDED', name='integrationstatus'),
               existing_nullable=True)
    op.drop_column('integrations', 'stripe_account_id')
    op.drop_index(op.f('ix_legal_consent_audit_consent_id'), table_name='legal_consent_audit')
    op.drop_index(op.f('ix_legal_consent_audit_user_id'), table_name='legal_consent_audit')
    op.create_index(op.f('ix_legal_consent_audit_id'), 'legal_consent_audit', ['id'], unique=False)
    op.drop_index(op.f('idx_password_reset_tokens_expires_at'), table_name='password_reset_tokens')
    op.drop_index(op.f('idx_password_reset_tokens_used'), table_name='password_reset_tokens')
    op.add_column('payments', sa.Column('location_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('idx_payments_appointment_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_barber_id_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_barber_time_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_completed_amount'), table_name='payments', sqlite_where=sa.text("status = 'completed'"))
    op.drop_index(op.f('idx_payments_created_at'), table_name='payments')
    op.drop_index(op.f('idx_payments_created_at_amount'), table_name='payments')
    op.drop_index(op.f('idx_payments_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_status_created_at'), table_name='payments')
    op.drop_index(op.f('idx_payments_user_id_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_user_status'), table_name='payments')
    op.drop_index(op.f('idx_payments_user_time_status'), table_name='payments')
    op.create_foreign_key(None, 'payments', 'barbershop_locations', ['location_id'], ['id'])
    op.add_column('recurring_appointment_patterns', sa.Column('location_id', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('interval_value', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('interval_unit', sa.String(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('weekday_of_month', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('buffer_time_before', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('buffer_time_after', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('exclude_holidays', sa.Boolean(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('exclude_weekends', sa.Boolean(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('reschedule_on_conflict', sa.Boolean(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('max_advance_days', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('series_discount_percent', sa.Float(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('series_price_override', sa.Float(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('last_generated_date', sa.Date(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('total_generated', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('total_completed', sa.Integer(), nullable=True))
    op.add_column('recurring_appointment_patterns', sa.Column('generation_notes', sa.Text(), nullable=True))
    op.create_foreign_key(None, 'recurring_appointment_patterns', 'barbershop_locations', ['location_id'], ['id'])
    op.alter_column('reviews', 'platform',
               existing_type=sa.VARCHAR(length=9),
               nullable=True)
    op.alter_column('reviews', 'external_review_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('reviews', 'source',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('GOOGLE_MY_BUSINESS', 'YELP', 'FACEBOOK', 'INSTAGRAM', 'BOOKSY', 'FRESHA', 'STYLESEAT', 'MANUAL', 'OTHER', name='reviewsource'),
               existing_nullable=True)
    op.alter_column('reviews', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('NEW', 'PENDING_RESPONSE', 'RESPONDED', 'IGNORED', name='reviewstatus'),
               existing_nullable=True)
    op.drop_index(op.f('idx_reviews_external_id'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_source'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_status'), table_name='reviews')
    op.create_index(op.f('ix_reviews_external_id'), 'reviews', ['external_id'], unique=False)
    op.create_index(op.f('ix_reviews_source'), 'reviews', ['source'], unique=False)
    op.create_index(op.f('ix_reviews_status'), 'reviews', ['status'], unique=False)
    op.create_foreign_key(None, 'reviews', 'integrations', ['integration_id'], ['id'])
    op.add_column('services', sa.Column('location_id', sa.Integer(), nullable=True))
    op.add_column('services', sa.Column('barber_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('idx_services_bookable_active'), table_name='services')
    op.drop_index(op.f('idx_services_category_active'), table_name='services')
    op.create_foreign_key(None, 'services', 'users', ['barber_id'], ['id'])
    op.create_foreign_key(None, 'services', 'barbershop_locations', ['location_id'], ['id'])
    op.drop_index(op.f('ix_user_consents_consent_type'), table_name='user_consents')
    op.drop_index(op.f('ix_user_consents_status'), table_name='user_consents')
    op.drop_index(op.f('ix_user_consents_user_id'), table_name='user_consents')
    op.drop_index(op.f('ix_user_consents_user_type'), table_name='user_consents')
    op.create_index(op.f('ix_user_consents_id'), 'user_consents', ['id'], unique=False)
    op.add_column('users', sa.Column('timezone_preference', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('auto_detect_timezone', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('timezone_last_updated', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('lifetime_value', sa.Float(), nullable=True))
    op.drop_index(op.f('idx_users_is_active'), table_name='users')
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.drop_index(op.f('idx_users_role_active'), table_name='users')
    op.drop_index(op.f('idx_users_role_created_at'), table_name='users')
    op.create_index(op.f('ix_users_timezone_preference'), 'users', ['timezone_preference'], unique=False)
    op.create_foreign_key(None, 'users', 'barbershop_locations', ['location_id'], ['id'])
    op.drop_index(op.f('idx_webhook_active'), table_name='webhook_endpoints')
    op.drop_index(op.f('idx_webhook_events'), table_name='webhook_endpoints')
    op.drop_index(op.f('idx_webhook_log_created'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_log_endpoint'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_log_event'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_log_status'), table_name='webhook_logs')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_webhook_log_status'), 'webhook_logs', ['status'], unique=False)
    op.create_index(op.f('idx_webhook_log_event'), 'webhook_logs', ['event_type'], unique=False)
    op.create_index(op.f('idx_webhook_log_endpoint'), 'webhook_logs', ['endpoint_id'], unique=False)
    op.create_index(op.f('idx_webhook_log_created'), 'webhook_logs', ['created_at'], unique=False)
    op.create_index(op.f('idx_webhook_events'), 'webhook_endpoints', ['events'], unique=False)
    op.create_index(op.f('idx_webhook_active'), 'webhook_endpoints', ['is_active'], unique=False)
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_timezone_preference'), table_name='users')
    op.create_index(op.f('idx_users_role_created_at'), 'users', ['role', 'created_at'], unique=False)
    op.create_index(op.f('idx_users_role_active'), 'users', ['role', 'is_active'], unique=False)
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_users_is_active'), 'users', ['is_active'], unique=False)
    op.drop_column('users', 'lifetime_value')
    op.drop_column('users', 'timezone_last_updated')
    op.drop_column('users', 'auto_detect_timezone')
    op.drop_column('users', 'timezone_preference')
    op.drop_index(op.f('ix_user_consents_id'), table_name='user_consents')
    op.create_index(op.f('ix_user_consents_user_type'), 'user_consents', ['user_id', 'consent_type'], unique=1)
    op.create_index(op.f('ix_user_consents_user_id'), 'user_consents', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_consents_status'), 'user_consents', ['status'], unique=False)
    op.create_index(op.f('ix_user_consents_consent_type'), 'user_consents', ['consent_type'], unique=False)
    op.drop_constraint(None, 'services', type_='foreignkey')
    op.drop_constraint(None, 'services', type_='foreignkey')
    op.create_index(op.f('idx_services_category_active'), 'services', ['category', 'is_active'], unique=False)
    op.create_index(op.f('idx_services_bookable_active'), 'services', ['is_bookable_online', 'is_active'], unique=False)
    op.drop_column('services', 'barber_id')
    op.drop_column('services', 'location_id')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_index(op.f('ix_reviews_status'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_source'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_external_id'), table_name='reviews')
    op.create_index(op.f('idx_reviews_status'), 'reviews', ['status'], unique=False)
    op.create_index(op.f('idx_reviews_source'), 'reviews', ['source'], unique=False)
    op.create_index(op.f('idx_reviews_external_id'), 'reviews', ['external_id'], unique=False)
    op.alter_column('reviews', 'status',
               existing_type=sa.Enum('NEW', 'PENDING_RESPONSE', 'RESPONDED', 'IGNORED', name='reviewstatus'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('reviews', 'source',
               existing_type=sa.Enum('GOOGLE_MY_BUSINESS', 'YELP', 'FACEBOOK', 'INSTAGRAM', 'BOOKSY', 'FRESHA', 'STYLESEAT', 'MANUAL', 'OTHER', name='reviewsource'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('reviews', 'external_review_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('reviews', 'platform',
               existing_type=sa.VARCHAR(length=9),
               nullable=False)
    op.drop_constraint(None, 'recurring_appointment_patterns', type_='foreignkey')
    op.drop_column('recurring_appointment_patterns', 'generation_notes')
    op.drop_column('recurring_appointment_patterns', 'total_completed')
    op.drop_column('recurring_appointment_patterns', 'total_generated')
    op.drop_column('recurring_appointment_patterns', 'last_generated_date')
    op.drop_column('recurring_appointment_patterns', 'series_price_override')
    op.drop_column('recurring_appointment_patterns', 'series_discount_percent')
    op.drop_column('recurring_appointment_patterns', 'max_advance_days')
    op.drop_column('recurring_appointment_patterns', 'reschedule_on_conflict')
    op.drop_column('recurring_appointment_patterns', 'exclude_weekends')
    op.drop_column('recurring_appointment_patterns', 'exclude_holidays')
    op.drop_column('recurring_appointment_patterns', 'buffer_time_after')
    op.drop_column('recurring_appointment_patterns', 'buffer_time_before')
    op.drop_column('recurring_appointment_patterns', 'weekday_of_month')
    op.drop_column('recurring_appointment_patterns', 'interval_unit')
    op.drop_column('recurring_appointment_patterns', 'interval_value')
    op.drop_column('recurring_appointment_patterns', 'location_id')
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.create_index(op.f('idx_payments_user_time_status'), 'payments', ['user_id', 'created_at', 'status'], unique=False)
    op.create_index(op.f('idx_payments_user_status'), 'payments', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_payments_user_id_status'), 'payments', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_payments_status_created_at'), 'payments', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_payments_status'), 'payments', ['status'], unique=False)
    op.create_index(op.f('idx_payments_created_at_amount'), 'payments', ['created_at', 'amount'], unique=False)
    op.create_index(op.f('idx_payments_created_at'), 'payments', ['created_at'], unique=False)
    op.create_index(op.f('idx_payments_completed_amount'), 'payments', ['created_at', 'amount'], unique=False, sqlite_where=sa.text("status = 'completed'"))
    op.create_index(op.f('idx_payments_barber_time_status'), 'payments', ['barber_id', 'created_at', 'status'], unique=False)
    op.create_index(op.f('idx_payments_barber_id_status'), 'payments', ['barber_id', 'status'], unique=False)
    op.create_index(op.f('idx_payments_appointment_status'), 'payments', ['appointment_id', 'status'], unique=False)
    op.drop_column('payments', 'location_id')
    op.create_index(op.f('idx_password_reset_tokens_used'), 'password_reset_tokens', ['used'], unique=False)
    op.create_index(op.f('idx_password_reset_tokens_expires_at'), 'password_reset_tokens', ['expires_at'], unique=False)
    op.drop_index(op.f('ix_legal_consent_audit_id'), table_name='legal_consent_audit')
    op.create_index(op.f('ix_legal_consent_audit_user_id'), 'legal_consent_audit', ['user_id'], unique=False)
    op.create_index(op.f('ix_legal_consent_audit_consent_id'), 'legal_consent_audit', ['consent_id'], unique=False)
    op.add_column('integrations', sa.Column('stripe_account_id', sa.VARCHAR(length=255), nullable=True))
    op.alter_column('integrations', 'status',
               existing_type=sa.Enum('ACTIVE', 'INACTIVE', 'ERROR', 'PENDING', 'EXPIRED', 'SUSPENDED', name='integrationstatus'),
               type_=sa.VARCHAR(length=8),
               existing_nullable=True)
    op.drop_index(op.f('ix_data_processing_logs_id'), table_name='data_processing_logs')
    op.create_index(op.f('ix_data_processing_logs_user_id'), 'data_processing_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_data_processing_logs_purpose'), 'data_processing_logs', ['purpose'], unique=False)
    op.create_index(op.f('ix_data_processing_logs_processing_date'), 'data_processing_logs', ['processing_date'], unique=False)
    op.drop_constraint(None, 'data_export_requests', type_='unique')
    op.drop_index(op.f('ix_data_export_requests_id'), table_name='data_export_requests')
    op.create_index(op.f('ix_data_export_requests_user_id'), 'data_export_requests', ['user_id'], unique=False)
    op.create_index(op.f('ix_data_export_requests_status'), 'data_export_requests', ['status'], unique=False)
    op.create_index(op.f('ix_data_export_requests_request_id'), 'data_export_requests', ['request_id'], unique=1)
    op.drop_index(op.f('ix_cookie_consents_id'), table_name='cookie_consents')
    op.create_index(op.f('ix_cookie_consents_user_id'), 'cookie_consents', ['user_id'], unique=False)
    op.drop_constraint(None, 'clients', type_='foreignkey')
    op.create_index(op.f('idx_clients_total_visits'), 'clients', ['total_visits'], unique=False)
    op.create_index(op.f('idx_clients_total_spent'), 'clients', ['total_spent'], unique=False)
    op.create_index(op.f('idx_clients_last_visit_date'), 'clients', ['last_visit_date'], unique=False)
    op.create_index(op.f('idx_clients_first_visit_date'), 'clients', ['first_visit_date'], unique=False)
    op.create_index(op.f('idx_clients_customer_type'), 'clients', ['customer_type'], unique=False)
    op.create_index(op.f('idx_clients_created_at'), 'clients', ['created_at'], unique=False)
    op.alter_column('clients', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text("'false'"))
    op.drop_column('clients', 'location_id')
    op.drop_column('booking_settings', 'timezone_auto_detect')
    op.drop_column('booking_settings', 'allowed_timezones')
    op.drop_column('booking_settings', 'default_user_timezone')
    op.create_index(op.f('idx_barber_time_off_barber_dates'), 'barber_time_off', ['barber_id', 'start_date', 'end_date'], unique=False)
    op.alter_column('barber_time_off', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text("'false'"))
    op.create_index(op.f('idx_barber_availability_barber_day'), 'barber_availability', ['barber_id', 'day_of_week', 'is_active'], unique=False)
    op.alter_column('barber_availability', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text("'false'"))
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_index(op.f('ix_appointments_user_timezone'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_display_timezone'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_created_timezone'), table_name='appointments')
    op.create_index(op.f('idx_appointments_user_time_status'), 'appointments', ['user_id', 'start_time', 'status'], unique=False)
    op.create_index(op.f('idx_appointments_user_id_status'), 'appointments', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_appointments_status_start_time'), 'appointments', ['status', 'start_time'], unique=False)
    op.create_index(op.f('idx_appointments_status_date'), 'appointments', ['status', 'start_time'], unique=False)
    op.create_index(op.f('idx_appointments_status'), 'appointments', ['status'], unique=False)
    op.create_index(op.f('idx_appointments_start_time_service'), 'appointments', ['start_time', 'service_name'], unique=False)
    op.create_index(op.f('idx_appointments_start_time'), 'appointments', ['start_time'], unique=False)
    op.create_index(op.f('idx_appointments_no_show_time'), 'appointments', ['start_time'], unique=False, sqlite_where=sa.text("status = 'no_show'"))
    op.create_index(op.f('idx_appointments_created_at'), 'appointments', ['created_at'], unique=False)
    op.create_index(op.f('idx_appointments_completed_duration'), 'appointments', ['start_time', 'duration_minutes'], unique=False, sqlite_where=sa.text("status = 'completed'"))
    op.create_index(op.f('idx_appointments_client_id_status'), 'appointments', ['client_id', 'status'], unique=False)
    op.create_index(op.f('idx_appointments_client_id'), 'appointments', ['client_id'], unique=False)
    op.create_index(op.f('idx_appointments_barber_id'), 'appointments', ['barber_id'], unique=False)
    op.create_index(op.f('idx_appointments_barber_date'), 'appointments', ['barber_id', 'start_time'], unique=False)
    op.alter_column('appointments', 'is_test_data',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text("'false'"))
    op.alter_column('appointments', 'google_event_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('appointments', 'version')
    op.drop_column('appointments', 'recurrence_sequence')
    op.drop_column('appointments', 'original_scheduled_date')
    op.drop_column('appointments', 'is_recurring_instance')
    op.drop_column('appointments', 'recurring_series_id')
    op.drop_column('appointments', 'display_timezone')
    op.drop_column('appointments', 'user_timezone')
    op.drop_column('appointments', 'created_timezone')
    op.drop_column('appointments', 'location_id')
    op.create_table('conversion_goals',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('event_name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=12), nullable=False),
    sa.Column('value', sa.FLOAT(), nullable=True),
    sa.Column('value_expression', sa.TEXT(), nullable=True),
    sa.Column('conditions', sqlite.JSON(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('total_conversions', sa.INTEGER(), nullable=True),
    sa.Column('total_value', sa.FLOAT(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', name=op.f('uq_user_goal_name'))
    )
    op.create_index(op.f('ix_conversion_goals_user_id'), 'conversion_goals', ['user_id'], unique=False)
    op.create_index(op.f('ix_conversion_goals_id'), 'conversion_goals', ['id'], unique=False)
    op.create_index(op.f('idx_conversion_goals_user_active'), 'conversion_goals', ['user_id', 'is_active'], unique=False)
    op.create_table('notification_templates_v2',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=200), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=20), nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), nullable=False),
    sa.Column('subject', sa.VARCHAR(length=200), nullable=True),
    sa.Column('body_text', sa.TEXT(), nullable=False),
    sa.Column('body_html', sa.TEXT(), nullable=True),
    sa.Column('variables', sqlite.JSON(), nullable=True),
    sa.Column('required_variables', sqlite.JSON(), nullable=True),
    sa.Column('sample_data', sqlite.JSON(), nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), nullable=True),
    sa.Column('fallback_template_id', sa.INTEGER(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('is_system_template', sa.BOOLEAN(), nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), nullable=True),
    sa.Column('usage_count', sa.INTEGER(), nullable=True),
    sa.Column('last_used_at', sa.DATETIME(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['fallback_template_id'], ['notification_templates_v2.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_notification_templates_v2_name'), 'notification_templates_v2', ['name'], unique=1)
    op.create_index(op.f('ix_notification_templates_v2_id'), 'notification_templates_v2', ['id'], unique=False)
    op.create_index(op.f('idx_template_type_category'), 'notification_templates_v2', ['template_type', 'category'], unique=False)
    op.create_index(op.f('idx_template_active_name'), 'notification_templates_v2', ['is_active', 'name'], unique=False)
    op.create_table('tracking_configurations',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('gtm_container_id', sa.VARCHAR(length=50), nullable=True),
    sa.Column('gtm_enabled', sa.BOOLEAN(), nullable=True),
    sa.Column('gtm_server_url', sa.VARCHAR(length=255), nullable=True),
    sa.Column('meta_pixel_id', sa.VARCHAR(length=50), nullable=True),
    sa.Column('meta_enabled', sa.BOOLEAN(), nullable=True),
    sa.Column('meta_test_event_code', sa.VARCHAR(length=50), nullable=True),
    sa.Column('google_ads_conversion_id', sa.VARCHAR(length=50), nullable=True),
    sa.Column('google_ads_enabled', sa.BOOLEAN(), nullable=True),
    sa.Column('google_ads_conversion_labels', sqlite.JSON(), nullable=True),
    sa.Column('attribution_window_days', sa.INTEGER(), nullable=True),
    sa.Column('view_attribution_window_days', sa.INTEGER(), nullable=True),
    sa.Column('default_attribution_model', sa.VARCHAR(length=14), nullable=True),
    sa.Column('conversion_value_rules', sqlite.JSON(), nullable=True),
    sa.Column('excluded_domains', sqlite.JSON(), nullable=True),
    sa.Column('custom_channel_rules', sqlite.JSON(), nullable=True),
    sa.Column('enable_enhanced_conversions', sa.BOOLEAN(), nullable=True),
    sa.Column('hash_user_data', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_tracking_configurations_id'), 'tracking_configurations', ['id'], unique=False)
    op.create_table('conversion_events',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('event_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('event_name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=12), nullable=False),
    sa.Column('event_value', sa.FLOAT(), nullable=True),
    sa.Column('event_currency', sa.VARCHAR(length=3), nullable=True),
    sa.Column('event_data', sqlite.JSON(), nullable=True),
    sa.Column('source_url', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=64), nullable=True),
    sa.Column('client_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('channel', sa.VARCHAR(length=50), nullable=True),
    sa.Column('utm_source', sa.VARCHAR(length=255), nullable=True),
    sa.Column('utm_medium', sa.VARCHAR(length=255), nullable=True),
    sa.Column('utm_campaign', sa.VARCHAR(length=255), nullable=True),
    sa.Column('utm_term', sa.VARCHAR(length=255), nullable=True),
    sa.Column('utm_content', sa.VARCHAR(length=255), nullable=True),
    sa.Column('referrer', sa.TEXT(), nullable=True),
    sa.Column('gtm_synced', sa.BOOLEAN(), nullable=True),
    sa.Column('gtm_sync_time', sa.DATETIME(), nullable=True),
    sa.Column('meta_synced', sa.BOOLEAN(), nullable=True),
    sa.Column('meta_sync_time', sa.DATETIME(), nullable=True),
    sa.Column('google_ads_synced', sa.BOOLEAN(), nullable=True),
    sa.Column('google_ads_sync_time', sa.DATETIME(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=9), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('attribution_path_id', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['attribution_path_id'], ['attribution_paths.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversion_events_user_id'), 'conversion_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_conversion_events_session_id'), 'conversion_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_conversion_events_id'), 'conversion_events', ['id'], unique=False)
    op.create_index(op.f('ix_conversion_events_event_type'), 'conversion_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_conversion_events_event_name'), 'conversion_events', ['event_name'], unique=False)
    op.create_index(op.f('ix_conversion_events_event_id'), 'conversion_events', ['event_id'], unique=1)
    op.create_index(op.f('ix_conversion_events_client_id'), 'conversion_events', ['client_id'], unique=False)
    op.create_index(op.f('ix_conversion_events_channel'), 'conversion_events', ['channel'], unique=False)
    op.create_index(op.f('idx_conversion_events_user_date'), 'conversion_events', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_conversion_events_type_date'), 'conversion_events', ['event_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_conversion_events_channel_date'), 'conversion_events', ['channel', 'created_at'], unique=False)
    op.create_index(op.f('idx_conversion_events_campaign'), 'conversion_events', ['utm_campaign', 'created_at'], unique=False)
    op.create_table('short_urls',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('short_code', sa.VARCHAR(length=10), nullable=False),
    sa.Column('original_url', sa.TEXT(), nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), nullable=True),
    sa.Column('click_count', sa.INTEGER(), nullable=True),
    sa.Column('last_clicked', sa.DATETIME(), nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), nullable=True),
    sa.Column('expires_at', sa.DATETIME(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_short_urls_short_code'), 'short_urls', ['short_code'], unique=1)
    op.create_index(op.f('ix_short_urls_id'), 'short_urls', ['id'], unique=False)
    op.create_table('pricing_plans',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('tier', sa.VARCHAR(length=12), nullable=False),
    sa.Column('name', sa.VARCHAR(), nullable=False),
    sa.Column('description', sa.VARCHAR(), nullable=True),
    sa.Column('monthly_price', sa.FLOAT(), nullable=False),
    sa.Column('yearly_price', sa.FLOAT(), nullable=True),
    sa.Column('appointment_limit', sa.INTEGER(), nullable=True),
    sa.Column('locations_limit', sa.INTEGER(), nullable=True),
    sa.Column('team_members_limit', sa.INTEGER(), nullable=True),
    sa.Column('sms_marketing_limit', sa.INTEGER(), nullable=True),
    sa.Column('email_marketing_limit', sa.INTEGER(), nullable=True),
    sa.Column('features', sqlite.JSON(), nullable=True),
    sa.Column('display_order', sa.INTEGER(), nullable=True),
    sa.Column('is_popular', sa.BOOLEAN(), nullable=True),
    sa.Column('badge_text', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tier')
    )
    op.create_table('attribution_paths',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('conversion_event_id', sa.INTEGER(), nullable=False),
    sa.Column('touchpoints', sqlite.JSON(), nullable=False),
    sa.Column('first_touch_channel', sa.VARCHAR(length=50), nullable=True),
    sa.Column('last_touch_channel', sa.VARCHAR(length=50), nullable=True),
    sa.Column('path_length', sa.INTEGER(), nullable=True),
    sa.Column('attribution_model', sa.VARCHAR(length=14), nullable=True),
    sa.Column('attribution_weights', sqlite.JSON(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['conversion_event_id'], ['conversion_events.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('conversion_event_id')
    )
    op.create_index(op.f('ix_attribution_paths_user_id'), 'attribution_paths', ['user_id'], unique=False)
    op.create_index(op.f('ix_attribution_paths_id'), 'attribution_paths', ['id'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('location_id', sa.INTEGER(), nullable=False),
    sa.Column('tier', sa.VARCHAR(length=12), nullable=False),
    sa.Column('status', sa.VARCHAR(length=8), nullable=False),
    sa.Column('monthly_price', sa.FLOAT(), nullable=False),
    sa.Column('stripe_subscription_id', sa.VARCHAR(), nullable=True),
    sa.Column('stripe_customer_id', sa.VARCHAR(), nullable=True),
    sa.Column('started_at', sa.DATETIME(), nullable=False),
    sa.Column('current_period_start', sa.DATETIME(), nullable=True),
    sa.Column('current_period_end', sa.DATETIME(), nullable=True),
    sa.Column('canceled_at', sa.DATETIME(), nullable=True),
    sa.Column('trial_end', sa.DATETIME(), nullable=True),
    sa.Column('appointment_limit', sa.INTEGER(), nullable=True),
    sa.Column('sms_marketing_limit', sa.INTEGER(), nullable=True),
    sa.Column('email_marketing_limit', sa.INTEGER(), nullable=True),
    sa.Column('features', sqlite.JSON(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['barbershop_locations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_subscription_id')
    )
    op.create_table('campaign_tracking',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('campaign_id', sa.VARCHAR(length=100), nullable=False),
    sa.Column('campaign_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('campaign_source', sa.VARCHAR(length=50), nullable=False),
    sa.Column('campaign_medium', sa.VARCHAR(length=50), nullable=False),
    sa.Column('start_date', sa.DATETIME(), nullable=False),
    sa.Column('end_date', sa.DATETIME(), nullable=True),
    sa.Column('total_cost', sa.FLOAT(), nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), nullable=True),
    sa.Column('impressions', sa.INTEGER(), nullable=True),
    sa.Column('clicks', sa.INTEGER(), nullable=True),
    sa.Column('conversions', sa.INTEGER(), nullable=True),
    sa.Column('conversion_value', sa.FLOAT(), nullable=True),
    sa.Column('ctr', sa.FLOAT(), nullable=True),
    sa.Column('conversion_rate', sa.FLOAT(), nullable=True),
    sa.Column('cpc', sa.FLOAT(), nullable=True),
    sa.Column('cpa', sa.FLOAT(), nullable=True),
    sa.Column('roas', sa.FLOAT(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('last_sync_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'campaign_id', 'campaign_source', name=op.f('uq_user_campaign'))
    )
    op.create_index(op.f('ix_campaign_tracking_user_id'), 'campaign_tracking', ['user_id'], unique=False)
    op.create_index(op.f('ix_campaign_tracking_id'), 'campaign_tracking', ['id'], unique=False)
    op.create_index(op.f('ix_campaign_tracking_campaign_id'), 'campaign_tracking', ['campaign_id'], unique=False)
    op.create_index(op.f('idx_campaign_tracking_dates'), 'campaign_tracking', ['start_date', 'end_date'], unique=False)
    op.create_index(op.f('idx_campaign_tracking_active'), 'campaign_tracking', ['user_id', 'is_active'], unique=False)
    op.create_table('subscription_usage',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('subscription_id', sa.INTEGER(), nullable=False),
    sa.Column('appointments_count', sa.INTEGER(), nullable=True),
    sa.Column('sms_notifications_count', sa.INTEGER(), nullable=True),
    sa.Column('email_notifications_count', sa.INTEGER(), nullable=True),
    sa.Column('sms_marketing_count', sa.INTEGER(), nullable=True),
    sa.Column('email_marketing_count', sa.INTEGER(), nullable=True),
    sa.Column('period_start', sa.DATETIME(), nullable=False),
    sa.Column('period_end', sa.DATETIME(), nullable=False),
    sa.Column('last_reset', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
