# =============================================================================
# BookedBarber V2 - PRODUCTION ENVIRONMENT CONFIGURATION
# =============================================================================
# üö® CRITICAL SECURITY NOTICE:
# - ALL values marked as REQUIRED must be set before production deployment
# - NEVER use development/test values in production
# - Use secure, randomly generated keys for SECRET_KEY and JWT_SECRET_KEY
# - All API keys must be LIVE/PRODUCTION keys from service providers
# - Verify CORS origins match your exact production domains
# - Enable SSL/TLS for all external communications
# =============================================================================

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================
ENVIRONMENT=production
LOG_LEVEL=WARNING
DEBUG=false

# =============================================================================
# CRITICAL SECURITY KEYS (REQUIRED FOR PRODUCTION)
# =============================================================================
# üîí GENERATE SECURE KEYS:
# Run: python -c "import secrets; print('SECRET_KEY=' + secrets.token_urlsafe(64))"
# Run: python -c "import secrets; print('JWT_SECRET_KEY=' + secrets.token_urlsafe(64))"

SECRET_KEY=REQUIRED_GENERATE_WITH_PYTHON_SECRETS_MINIMUM_64_CHARS
JWT_SECRET_KEY=REQUIRED_GENERATE_WITH_PYTHON_SECRETS_MINIMUM_64_CHARS

# JWT Configuration
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7
BCRYPT_ROUNDS=12

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================
# üîí PRODUCTION POSTGRESQL (REQUIRED):
# Format: postgresql://username:password@hostname:5432/database_name
# Example: postgresql://dbuser:securepassword@prod-db.amazonaws.com:5432/bookedbarber_prod

DATABASE_URL=REQUIRED_POSTGRESQL_CONNECTION_STRING_HERE

# Database pool settings for production load
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30

# =============================================================================
# CORS & SECURITY CONFIGURATION (REQUIRED)
# =============================================================================
# üîí PRODUCTION DOMAINS ONLY - NO LOCALHOST ALLOWED
# Example: https://app.bookedbarber.com,https://bookedbarber.com

PRODUCTION_ORIGINS=REQUIRED_COMMA_SEPARATED_HTTPS_DOMAINS_ONLY
ALLOWED_ORIGINS=REQUIRED_COMMA_SEPARATED_HTTPS_DOMAINS_ONLY
FRONTEND_URL=REQUIRED_HTTPS_FRONTEND_DOMAIN
BACKEND_URL=REQUIRED_HTTPS_API_DOMAIN

# =============================================================================
# STRIPE PAYMENT CONFIGURATION (REQUIRED)
# =============================================================================
# üîí LIVE STRIPE KEYS (Get from https://dashboard.stripe.com/apikeys)
# ‚ö†Ô∏è  MUST be live keys (sk_live_* and pk_live_*) for production

STRIPE_SECRET_KEY=REQUIRED_sk_live_YOUR_LIVE_SECRET_KEY_FROM_STRIPE
STRIPE_PUBLISHABLE_KEY=REQUIRED_pk_live_YOUR_LIVE_PUBLISHABLE_KEY_FROM_STRIPE
STRIPE_WEBHOOK_SECRET=REQUIRED_whsec_YOUR_LIVE_WEBHOOK_SECRET_FROM_STRIPE
STRIPE_CONNECT_CLIENT_ID=REQUIRED_ca_YOUR_LIVE_CONNECT_CLIENT_ID

# =============================================================================
# EMAIL CONFIGURATION (REQUIRED FOR NOTIFICATIONS)
# =============================================================================
# üîí SENDGRID PRODUCTION API KEY (Get from https://app.sendgrid.com)
# ‚ö†Ô∏è  Must be production API key with verified sender domain

SENDGRID_API_KEY=REQUIRED_SG_PRODUCTION_API_KEY_FROM_SENDGRID
SENDGRID_FROM_EMAIL=REQUIRED_support@yourdomain.com
SENDGRID_FROM_NAME=BookedBarber

# =============================================================================
# SMS CONFIGURATION (REQUIRED FOR NOTIFICATIONS)
# =============================================================================
# üîí TWILIO PRODUCTION CREDENTIALS (Get from https://console.twilio.com)

TWILIO_ACCOUNT_SID=REQUIRED_AC_PRODUCTION_ACCOUNT_SID_FROM_TWILIO
TWILIO_AUTH_TOKEN=REQUIRED_PRODUCTION_AUTH_TOKEN_FROM_TWILIO
TWILIO_PHONE_NUMBER=REQUIRED_VERIFIED_PHONE_NUMBER_FROM_TWILIO

# Google Calendar Integration (OPTIONAL)
GOOGLE_CLIENT_ID=  # From Google Cloud Console
GOOGLE_CLIENT_SECRET=  # From Google Cloud Console
GOOGLE_REDIRECT_URI=https://api.bookedbarber.com/api/google-calendar/callback

# Google My Business (OPTIONAL - for review management)
GOOGLE_MY_BUSINESS_ACCOUNT_ID=
GOOGLE_MY_BUSINESS_LOCATION_ID=

# Error Tracking - Sentry (HIGHLY RECOMMENDED)
SENTRY_DSN=https://...@sentry.io/...
SENTRY_ENVIRONMENT=production
SENTRY_TRACES_SAMPLE_RATE=0.1

# Redis Cache (RECOMMENDED for performance)
REDIS_URL=redis://username:password@hostname:6379/0

# File Storage (OPTIONAL - for profile images, etc.)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_S3_BUCKET=
AWS_S3_REGION=us-east-1

# Analytics & Conversion Tracking (REQUIRED for marketing features)
# Google Analytics 4
GA4_MEASUREMENT_ID=G-...  # Your GA4 measurement ID
GA4_API_SECRET=  # For server-side tracking (optional)

# Google Tag Manager
GTM_CONTAINER_ID=GTM-...  # Your GTM container ID
GTM_SERVER_CONTAINER_URL=  # For server-side GTM (optional)

# Meta/Facebook Pixel
META_PIXEL_ID=  # Your Meta Pixel ID
META_ACCESS_TOKEN=  # For Conversions API (optional)

# Google Ads Conversion Tracking
GOOGLE_ADS_CONVERSION_ID=AW-...  # Your Google Ads conversion ID
GOOGLE_ADS_CONVERSION_LABEL=  # Default conversion label

# Google OAuth (for GMB and other Google services)
GOOGLE_CLIENT_ID=  # From Google Cloud Console
GOOGLE_CLIENT_SECRET=  # From Google Cloud Console

# Meta Business OAuth (for advanced Meta features)
META_APP_ID=  # Your Meta App ID
META_APP_SECRET=  # Your Meta App Secret

# =============================================================================
# REDIS CONFIGURATION (REQUIRED for production)
# =============================================================================
# Redis is required for caching, rate limiting, and background jobs
# 
# AWS ElastiCache Setup (RECOMMENDED):
# 1. Create ElastiCache cluster using scripts/setup_aws_elasticache.py
# 2. Configure security groups using scripts/configure_elasticache_security.py
# 3. Update REDIS_URL with ElastiCache primary endpoint
# 4. Enable SSL and AUTH for production security
#
# Alternative providers:
# - Google Memorystore: redis://your-instance.memorystore.googleusercontent.com:6379
# - Azure Cache: your-cache.redis.cache.windows.net:6380
# - Redis Cloud: redis://username:password@host:port
# - Self-hosted: redis://username:password@your-server:6379

# Basic Redis Connection
REDIS_URL=redis://localhost:6379/0  # REQUIRED: Update for production
REDIS_PASSWORD=  # REQUIRED for production Redis instances
REDIS_SSL=false  # Set to true for cloud Redis with SSL (REQUIRED for ElastiCache)

# AWS ElastiCache Specific Settings (Enable for production)
AWS_ELASTICACHE_ENABLED=false  # Set to true when using ElastiCache
AWS_ELASTICACHE_CLUSTER_ID=  # Your ElastiCache cluster ID
AWS_ELASTICACHE_PRIMARY_ENDPOINT=  # Primary endpoint from ElastiCache
AWS_ELASTICACHE_READER_ENDPOINT=  # Reader endpoint for read operations
AWS_ELASTICACHE_PORT=6379  # ElastiCache port (default 6379)
AWS_ELASTICACHE_SSL_CERT_REQS=required  # SSL certificate requirements
AWS_ELASTICACHE_SSL_CA_CERTS=/etc/ssl/certs/ca-certificates.crt  # CA bundle path

# Connection Pool Configuration
REDIS_MAX_CONNECTIONS=50  # Increase for high traffic (ElastiCache supports 65,000)
REDIS_MIN_IDLE_CONNECTIONS=10  # Minimum idle connections in pool
REDIS_CONNECTION_TIMEOUT=20  # Connection timeout in seconds
REDIS_SOCKET_TIMEOUT=5  # Socket timeout in seconds
REDIS_SOCKET_KEEPALIVE=true  # Enable TCP keepalive
REDIS_RETRY_ON_TIMEOUT=true  # Retry on timeout errors
REDIS_HEALTH_CHECK_INTERVAL=30  # Health check interval in seconds

# Performance Optimization
REDIS_CONNECTION_POOL_BLOCKING=true  # Block when pool is exhausted
REDIS_CONNECTION_POOL_TIMEOUT=20  # Pool blocking timeout
REDIS_DECODE_RESPONSES=true  # Decode responses to strings
REDIS_ENCODING=utf-8  # Character encoding

# Rate Limiting (Redis-backed for distributed rate limiting)
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
RATE_LIMIT_PER_DAY=10000
RATE_LIMIT_REDIS_KEY_PREFIX=rate:  # Prefix for rate limit keys
RATE_LIMIT_SLIDING_WINDOW=true  # Use sliding window algorithm

# Caching Configuration
CACHE_ENABLED=true
CACHE_TTL_DEFAULT=300  # 5 minutes
CACHE_TTL_BOOKINGS=60  # 1 minute for real-time booking data
CACHE_TTL_ANALYTICS=1800  # 30 minutes for analytics
CACHE_TTL_STATIC=3600  # 1 hour for static content
CACHE_TTL_USER_SESSIONS=86400  # 24 hours for user sessions
CACHE_KEY_PREFIX=6fb:  # Prefix for cache keys
CACHE_COMPRESSION=true  # Enable cache compression

# Redis Monitoring and Alerting
REDIS_MONITORING_ENABLED=true  # Enable Redis performance monitoring
REDIS_SLOW_LOG_ENABLED=true  # Enable slow query logging
REDIS_SLOW_LOG_THRESHOLD=10000  # Slow query threshold in microseconds
REDIS_MAX_MEMORY_POLICY=allkeys-lru  # Memory eviction policy
REDIS_NOTIFY_KEYSPACE_EVENTS=Ex  # Enable keyspace notifications

# CloudWatch Integration (AWS only)
CLOUDWATCH_ENABLED=false  # Enable CloudWatch metrics
CLOUDWATCH_NAMESPACE=BookedBarber/Redis  # CloudWatch namespace
CLOUDWATCH_REGION=us-east-1  # AWS region for CloudWatch

# Security Headers
SECURE_HEADERS_ENABLED=true
HSTS_ENABLED=true
CONTENT_SECURITY_POLICY_ENABLED=true

# Backup Configuration (RECOMMENDED)
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30

# Monitoring
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true

# Feature Flags
ENABLE_MFA=true
ENABLE_WEBHOOKS=true
ENABLE_AI_FEATURES=false
ENABLE_DEMO_MODE=false

# Debug and Development Features (DISABLED for production security)
NEXT_PUBLIC_ENABLE_DEBUG_PANEL=false
NEXT_PUBLIC_SHOW_TEST_DATA=false
GA4_DEBUG_MODE=false
GTM_DEBUG_MODE=false
GA4_TEST_MODE=false
GTM_TEST_MODE=false

# Performance
WORKER_COUNT=4
CONNECTION_POOL_SIZE=20
REQUEST_TIMEOUT=30

# Notes:
# 1. All REQUIRED fields must be filled before deployment
# 2. Use generate_production_keys.py to create secure keys
# 3. Test all integrations before going live
# 4. Monitor error rates and performance after deployment
# 5. Set up automated backups immediately after deployment