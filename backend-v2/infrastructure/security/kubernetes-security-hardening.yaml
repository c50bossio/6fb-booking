# Kubernetes Security Hardening Configuration for BookedBarber V2 Franchise Platform
# Zero-Trust Container Security with Pod Security Standards

---
# Namespace Security Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: bookedbarber-franchise
  labels:
    # Pod Security Standards - Restricted Profile
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    
    # Custom security labels
    security.bookedbarber.com/environment: production
    security.bookedbarber.com/compliance: pci-dss,gdpr,soc2
    security.bookedbarber.com/network-policy: enabled

---
# Service Mesh Security with Istio mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-mtls
  namespace: bookedbarber-franchise
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: franchise-isolation-policy
  namespace: bookedbarber-franchise
spec:
  selector:
    matchLabels:
      app: bookedbarber-backend
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/bookedbarber-franchise/sa/api-service"]
    - source:
        principals: ["cluster.local/ns/bookedbarber-franchise/sa/frontend-service"]
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
  - when:
    - key: custom.franchise_network_id
      values: ["*"]  # Allow all franchise networks, validated at application level

---
# Network Policies for Micro-segmentation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: franchise-network-isolation
  namespace: bookedbarber-franchise
spec:
  podSelector:
    matchLabels:
      app: bookedbarber-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow traffic from API Gateway
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: bookedbarber-frontend
    ports:
    - protocol: TCP
      port: 8000
  egress:
  # Allow database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  # Allow external API calls (Stripe, SendGrid, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Secure Service Account for Backend
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bookedbarber-backend-sa
  namespace: bookedbarber-franchise
  annotations:
    security.bookedbarber.com/rbac-role: backend-service
automountServiceAccountToken: true
---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bookedbarber-franchise
  name: bookedbarber-backend-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames: ["franchise-secrets", "payment-secrets"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
  resourceNames: ["franchise-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bookedbarber-backend-binding
  namespace: bookedbarber-franchise
subjects:
- kind: ServiceAccount
  name: bookedbarber-backend-sa
  namespace: bookedbarber-franchise
roleRef:
  kind: Role
  name: bookedbarber-backend-role
  apiGroup: rbac.authorization.k8s.io

---
# Secure Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookedbarber-backend
  namespace: bookedbarber-franchise
  labels:
    app: bookedbarber-backend
    version: v2
    security.bookedbarber.com/scan-required: "true"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: bookedbarber-backend
  template:
    metadata:
      labels:
        app: bookedbarber-backend
        version: v2
        security.bookedbarber.com/network-policy: enabled
      annotations:
        # Security annotations
        security.bookedbarber.com/last-scan: "2025-07-26"
        security.bookedbarber.com/compliance-level: "pci-dss"
        # Istio sidecar injection
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: bookedbarber-backend-sa
      securityContext:
        # Pod-level security context
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1000]
      containers:
      - name: backend
        image: bookedbarber/backend:v2-secure
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        securityContext:
          # Container-level security context
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: payment-secrets
              key: stripe-secret
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: cache-volume
        emptyDir:
          sizeLimit: 500Mi
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      # Pod security policies
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Secure Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookedbarber-frontend
  namespace: bookedbarber-franchise
  labels:
    app: bookedbarber-frontend
    version: v2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: bookedbarber-frontend
  template:
    metadata:
      labels:
        app: bookedbarber-frontend
        version: v2
      annotations:
        sidecar.istio.io/inject: "true"
        security.bookedbarber.com/csp-enabled: "true"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: frontend
        image: bookedbarber/frontend:v2-secure
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.bookedbarber.com"
        volumeMounts:
        - name: cache-volume
          mountPath: /app/.next/cache
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: cache-volume
        emptyDir:
          sizeLimit: 200Mi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 50Mi

---
# Secure Services
apiVersion: v1
kind: Service
metadata:
  name: bookedbarber-backend-service
  namespace: bookedbarber-franchise
  labels:
    app: bookedbarber-backend
  annotations:
    security.bookedbarber.com/tls-required: "true"
spec:
  selector:
    app: bookedbarber-backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: bookedbarber-frontend-service
  namespace: bookedbarber-franchise
  labels:
    app: bookedbarber-frontend
spec:
  selector:
    app: bookedbarber-frontend
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Secret Management
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: bookedbarber-franchise
  annotations:
    security.bookedbarber.com/encryption: "vault"
    security.bookedbarber.com/rotation-schedule: "quarterly"
type: Opaque
data:
  # These would be managed by external secret management (Vault, etc.)
  url: <base64-encoded-database-url>

---
apiVersion: v1
kind: Secret
metadata:
  name: payment-secrets
  namespace: bookedbarber-franchise
  annotations:
    security.bookedbarber.com/encryption: "vault"
    security.bookedbarber.com/compliance: "pci-dss"
    security.bookedbarber.com/rotation-schedule: "monthly"
type: Opaque
data:
  stripe-secret: <base64-encoded-stripe-secret>
  stripe-webhook-secret: <base64-encoded-webhook-secret>

---
apiVersion: v1
kind: Secret
metadata:
  name: auth-secrets
  namespace: bookedbarber-franchise
  annotations:
    security.bookedbarber.com/encryption: "vault"
    security.bookedbarber.com/rotation-schedule: "monthly"
type: Opaque
data:
  jwt-secret: <base64-encoded-jwt-secret>

---
# Configuration Maps
apiVersion: v1
kind: ConfigMap
metadata:
  name: franchise-config
  namespace: bookedbarber-franchise
data:
  cors_origins: "https://bookedbarber.com,https://app.bookedbarber.com"
  rate_limit_config: |
    api_general: 1000
    api_auth: 100
    api_payments: 200
  security_headers: |
    strict-transport-security: max-age=31536000; includeSubDomains
    x-content-type-options: nosniff
    x-frame-options: DENY
    x-xss-protection: 1; mode=block
    content-security-policy: default-src 'self'; script-src 'self' 'unsafe-inline'

---
# Pod Disruption Budget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bookedbarber-backend-pdb
  namespace: bookedbarber-franchise
spec:
  selector:
    matchLabels:
      app: bookedbarber-backend
  minAvailable: 2

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bookedbarber-frontend-pdb
  namespace: bookedbarber-franchise
spec:
  selector:
    matchLabels:
      app: bookedbarber-frontend
  minAvailable: 2

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bookedbarber-backend-hpa
  namespace: bookedbarber-franchise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bookedbarber-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Security Monitoring with Falco
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco-security-monitor
  namespace: bookedbarber-franchise
  labels:
    app: falco
    security.bookedbarber.com/monitoring: "runtime"
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
    spec:
      serviceAccountName: falco-service-account
      securityContext:
        runAsNonRoot: false  # Required for Falco system monitoring
      containers:
      - name: falco
        image: falcosecurity/falco:0.35.1
        securityContext:
          privileged: true  # Required for system call monitoring
        env:
        - name: FALCO_BPF_PROBE
          value: ""
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: boot
          mountPath: /host/boot
          readOnly: true
        - name: lib-modules
          mountPath: /host/lib/modules
          readOnly: true
        - name: usr
          mountPath: /host/usr
          readOnly: true
        - name: etc
          mountPath: /host/etc
          readOnly: true
        - name: falco-config
          mountPath: /etc/falco
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: boot
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr
        hostPath:
          path: /usr
      - name: etc
        hostPath:
          path: /etc
      - name: falco-config
        configMap:
          name: falco-config

---
# Falco Configuration for Security Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: bookedbarber-franchise
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/franchise_security_rules.yaml
    
    stdout_output:
      enabled: true
    
    syslog_output:
      enabled: true
    
    json_output: true
    json_include_output_property: true
    
    priority: debug
    buffered_outputs: false
    
  franchise_security_rules.yaml: |
    - rule: Franchise Data Access Violation
      desc: Detect unauthorized access to franchise data
      condition: >
        open_read and
        fd.name contains "/franchise-data/" and
        not proc.name in (bookedbarber-backend, postgres, redis)
      output: >
        Unauthorized franchise data access
        (user=%user.name command=%proc.cmdline file=%fd.name)
      priority: CRITICAL
    
    - rule: Payment Processing Anomaly
      desc: Detect suspicious payment processing activity
      condition: >
        spawned_process and
        proc.name in (python, node) and
        proc.cmdline contains "stripe" and
        not container.image.repository contains "bookedbarber"
      output: >
        Suspicious payment processing activity
        (user=%user.name command=%proc.cmdline container=%container.name)
      priority: HIGH
    
    - rule: Privilege Escalation Attempt
      desc: Detect privilege escalation attempts in franchise containers
      condition: >
        spawned_process and
        proc.name in (sudo, su, passwd) and
        container.name contains "bookedbarber"
      output: >
        Privilege escalation attempt in franchise container
        (user=%user.name command=%proc.cmdline container=%container.name)
      priority: CRITICAL

---
# Certificate Management
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bookedbarber-tls
  namespace: bookedbarber-franchise
spec:
  secretName: bookedbarber-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.bookedbarber.com
  - app.bookedbarber.com
  - "*.franchise.bookedbarber.com"

---
# Ingress with Security Headers
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookedbarber-ingress
  namespace: bookedbarber-franchise
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.stripe.com; frame-src 'none'; object-src 'none'; base-uri 'self';" always;
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.bookedbarber.com
    - app.bookedbarber.com
    secretName: bookedbarber-tls-secret
  rules:
  - host: api.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bookedbarber-backend-service
            port:
              number: 8000
  - host: app.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bookedbarber-frontend-service
            port:
              number: 3000