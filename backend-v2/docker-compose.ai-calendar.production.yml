# ================================================================================
# AI Business Calendar - Production Docker Compose Configuration
# ================================================================================
# ðŸŽ¯ Production-ready deployment with high availability and monitoring
# ðŸ”’ Security-first configuration with secrets management
# ðŸ“Š Comprehensive observability and performance monitoring
# ðŸš€ Auto-scaling capabilities and load balancing
# ================================================================================

version: '3.8'

services:
  # ================================================================================
  # PostgreSQL Primary Database with High Availability
  # ================================================================================
  postgres-primary:
    image: postgres:15-alpine
    container_name: ai-calendar-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_business_calendar_prod
      POSTGRES_USER: ai_calendar_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./database/init-ai-calendar.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/performance_indexes.sql:/docker-entrypoint-initdb.d/performance_indexes.sql:ro
      - postgres_backups:/var/lib/postgresql/backups
    ports:
      - "5432:5432"
    networks:
      - ai-calendar-network
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_calendar_user -d ai_business_calendar_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ================================================================================
  # PostgreSQL Read Replica for Load Distribution
  # ================================================================================
  postgres-replica:
    image: postgres:15-alpine
    container_name: ai-calendar-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_business_calendar_prod
      POSTGRES_USER: ai_calendar_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_MASTER_HOST: postgres-primary
      POSTGRES_REPLICA_USER: replicator
      POSTGRES_REPLICA_PASSWORD_FILE: /run/secrets/postgres_replica_password
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./database/replica-setup.sh:/docker-entrypoint-initdb.d/replica-setup.sh:ro
    networks:
      - ai-calendar-network
    secrets:
      - postgres_password
      - postgres_replica_password
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_calendar_user -d ai_business_calendar_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 768M
          cpus: '0.75'

  # ================================================================================
  # Redis Cluster for High-Performance Caching
  # ================================================================================
  redis-master:
    image: redis:7-alpine
    container_name: ai-calendar-redis-master
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass $(cat /run/secrets/redis_password)
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
    volumes:
      - redis_master_data:/data
      - ./redis/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - ai-calendar-network
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.5'

  redis-sentinel:
    image: redis:7-alpine
    container_name: ai-calendar-redis-sentinel
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - ai-calendar-network
    depends_on:
      redis-master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # ================================================================================
  # AI Business Calendar Backend Services
  # ================================================================================
  ai-calendar-backend:
    build:
      context: .
      dockerfile: Dockerfile.ai-calendar.production
      target: production
      args:
        - BUILD_ENV=production
        - PYTHON_VERSION=3.11
    image: ai-business-calendar:production
    container_name: ai-calendar-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://ai_calendar_user:${POSTGRES_PASSWORD}@postgres-primary:5432/ai_business_calendar_prod
      DATABASE_READ_REPLICA_URL: postgresql://ai_calendar_user:${POSTGRES_PASSWORD}@postgres-replica:5432/ai_business_calendar_prod
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/0
      REDIS_SENTINEL_HOSTS: redis-sentinel:26379
      
      # Application Settings
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      PORT: 8000
      HOST: 0.0.0.0
      
      # AI Provider Configuration
      ANTHROPIC_API_KEY_FILE: /run/secrets/anthropic_api_key
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      GOOGLE_AI_API_KEY_FILE: /run/secrets/google_ai_api_key
      
      # Security Configuration
      SECRET_KEY_FILE: /run/secrets/app_secret_key
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key
      
      # External Services
      STRIPE_SECRET_KEY_FILE: /run/secrets/stripe_secret_key
      SENDGRID_API_KEY_FILE: /run/secrets/sendgrid_api_key
      TWILIO_AUTH_TOKEN_FILE: /run/secrets/twilio_auth_token
      
      # Monitoring Configuration
      SENTRY_DSN_FILE: /run/secrets/sentry_dsn
      NEW_RELIC_LICENSE_KEY_FILE: /run/secrets/new_relic_license_key
      DATADOG_API_KEY_FILE: /run/secrets/datadog_api_key
      
      # Feature Flags
      FEATURE_AI_CALENDAR_ENABLED: "true"
      FEATURE_BUSINESS_INTELLIGENCE_ENABLED: "true"
      FEATURE_PREDICTIVE_ANALYTICS_ENABLED: "true"
      AI_AGENT_ORCHESTRATOR_ENABLED: "true"
      
      # Performance Settings
      WORKERS: 4
      WORKER_CLASS: uvicorn.workers.UvicornWorker
      WORKER_CONNECTIONS: 1000
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
      TIMEOUT: 30
      KEEPALIVE: 2
      
      # Health Checks
      HEALTH_CHECK_ENABLED: "true"
      HEALTH_CHECK_DATABASE: "true"
      HEALTH_CHECK_REDIS: "true"
      HEALTH_CHECK_EXTERNAL_SERVICES: "true"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ai_calendar_cache:/app/cache
      - ai_calendar_models:/app/models
    ports:
      - "8000:8000"
    networks:
      - ai-calendar-network
    secrets:
      - postgres_password
      - redis_password
      - app_secret_key
      - jwt_secret_key
      - stripe_secret_key
      - sendgrid_api_key
      - twilio_auth_token
      - anthropic_api_key
      - openai_api_key
      - google_ai_api_key
      - sentry_dsn
      - new_relic_license_key
      - datadog_api_key
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "--max-time", "10"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        order: start-first

  # ================================================================================
  # AI Agent Orchestrator Service
  # ================================================================================
  ai-agent-orchestrator:
    build:
      context: ./ai-agents
      dockerfile: Dockerfile.orchestrator
    image: ai-agent-orchestrator:production
    container_name: ai-calendar-agent-orchestrator
    restart: unless-stopped
    environment:
      # AI Configuration
      ANTHROPIC_API_KEY_FILE: /run/secrets/anthropic_api_key
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      GOOGLE_AI_API_KEY_FILE: /run/secrets/google_ai_api_key
      
      # Queue Configuration
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-master:6379/2
      
      # Agent Settings
      AI_AGENT_MAX_CONCURRENT: 10
      AI_AGENT_QUEUE_SIZE: 100
      AI_AGENT_TIMEOUT_SECONDS: 60
      AI_AGENT_RETRY_ATTEMPTS: 2
      
      # Performance Settings
      WORKERS: 2
      CONCURRENCY: 10
    volumes:
      - ai_agent_logs:/app/logs
      - ai_calendar_models:/app/models
    networks:
      - ai-calendar-network
    secrets:
      - anthropic_api_key
      - openai_api_key
      - google_ai_api_key
    depends_on:
      redis-master:
        condition: service_healthy
      ai-calendar-backend:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ================================================================================
  # Celery Worker for Background Tasks
  # ================================================================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.ai-calendar.production
      target: production
    image: ai-business-calendar:production
    container_name: ai-calendar-celery-worker
    restart: unless-stopped
    command: celery -A main.celery worker --loglevel=info --concurrency=4
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://ai_calendar_user:${POSTGRES_PASSWORD}@postgres-primary:5432/ai_business_calendar_prod
      
      # Queue Configuration
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-master:6379/2
      
      # Worker Settings
      CELERY_WORKER_CONCURRENCY: 4
      CELERY_TASK_SOFT_TIME_LIMIT: 300
      CELERY_TASK_TIME_LIMIT: 600
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 1000
      
      # AI Configuration
      ANTHROPIC_API_KEY_FILE: /run/secrets/anthropic_api_key
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
    volumes:
      - ./logs:/app/logs
      - ai_calendar_cache:/app/cache
    networks:
      - ai-calendar-network
    secrets:
      - postgres_password
      - redis_password
      - anthropic_api_key
      - openai_api_key
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ================================================================================
  # Celery Beat Scheduler
  # ================================================================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.ai-calendar.production
      target: production
    image: ai-business-calendar:production
    container_name: ai-calendar-celery-beat
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=info
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://ai_calendar_user:${POSTGRES_PASSWORD}@postgres-primary:5432/ai_business_calendar_prod
      
      # Queue Configuration
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-master:6379/2
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - ai-calendar-network
    secrets:
      - postgres_password
      - redis_password
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ================================================================================
  # Nginx Load Balancer & Reverse Proxy
  # ================================================================================
  nginx:
    image: nginx:alpine
    container_name: ai-calendar-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx-ai-calendar.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ai-calendar-network
    depends_on:
      - ai-calendar-backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ================================================================================
  # Monitoring Stack
  # ================================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-calendar-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus-ai-calendar.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-calendar-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: ai-calendar-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - ai-calendar-network
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ================================================================================
  # Log Aggregation (ELK Stack)
  # ================================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-calendar-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ai-calendar-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-calendar-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_PUBLICBASEURL=https://kibana.your-domain.com
    ports:
      - "5601:5601"
    networks:
      - ai-calendar-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ai-calendar-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/var/log/app:ro
    ports:
      - "5044:5044"
    networks:
      - ai-calendar-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

# ================================================================================
# Named Volumes for Data Persistence
# ================================================================================
volumes:
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-primary
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-replica
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups
  redis_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-master
  ai_calendar_cache:
    driver: local
  ai_calendar_models:
    driver: local
  ai_agent_logs:
    driver: local
  celery_beat_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# ================================================================================
# Secrets Management
# ================================================================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_replica_password:
    file: ./secrets/postgres_replica_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  app_secret_key:
    file: ./secrets/app_secret_key.txt
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt
  stripe_secret_key:
    file: ./secrets/stripe_secret_key.txt
  sendgrid_api_key:
    file: ./secrets/sendgrid_api_key.txt
  twilio_auth_token:
    file: ./secrets/twilio_auth_token.txt
  anthropic_api_key:
    file: ./secrets/anthropic_api_key.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  google_ai_api_key:
    file: ./secrets/google_ai_api_key.txt
  sentry_dsn:
    file: ./secrets/sentry_dsn.txt
  new_relic_license_key:
    file: ./secrets/new_relic_license_key.txt
  datadog_api_key:
    file: ./secrets/datadog_api_key.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

# ================================================================================
# Networks
# ================================================================================
networks:
  ai-calendar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.bridge.name: ai-calendar-br0
      com.docker.network.driver.mtu: 1500