apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: {{NAMESPACE}}
  labels:
    app: bookedbarber-backend
    color: {{COLOR}}
    version: {{VERSION}}
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bookedbarber-backend
      color: {{COLOR}}
  template:
    metadata:
      labels:
        app: bookedbarber-backend
        color: {{COLOR}}
        version: {{VERSION}}
    spec:
      containers:
      - name: backend
        image: {{BACKEND_IMAGE}}
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: jwt-secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: stripe-secret
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: sentry-dsn
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bookedbarber-backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: {{NAMESPACE}}
  labels:
    app: bookedbarber-frontend
    color: {{COLOR}}
    version: {{VERSION}}
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bookedbarber-frontend
      color: {{COLOR}}
  template:
    metadata:
      labels:
        app: bookedbarber-frontend
        color: {{COLOR}}
        version: {{VERSION}}
    spec:
      containers:
      - name: frontend
        image: {{FRONTEND_IMAGE}}
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.bookedbarber.com"
        - name: NEXT_PUBLIC_ENVIRONMENT
          value: "production"
        - name: NEXT_PUBLIC_SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: sentry-frontend-dsn
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: {{NAMESPACE}}
  labels:
    app: bookedbarber-backend
    color: {{COLOR}}
spec:
  selector:
    app: bookedbarber-backend
    color: {{COLOR}}
  ports:
  - port: 80
    targetPort: 8000
    name: http
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: {{NAMESPACE}}
  labels:
    app: bookedbarber-frontend
    color: {{COLOR}}
spec:
  selector:
    app: bookedbarber-frontend
    color: {{COLOR}}
  ports:
  - port: 80
    targetPort: 3000
    name: http
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookedbarber-ingress
  namespace: {{NAMESPACE}}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - bookedbarber.com
    - api.bookedbarber.com
    secretName: bookedbarber-tls
  rules:
  - host: bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  - host: api.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: {{NAMESPACE}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: {{NAMESPACE}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: {{NAMESPACE}}
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: bookedbarber-backend
      color: {{COLOR}}

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: {{NAMESPACE}}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: bookedbarber-frontend
      color: {{COLOR}}