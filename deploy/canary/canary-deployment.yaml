apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: backend-rollout
  namespace: production
  labels:
    app: bookedbarber-backend
spec:
  replicas: 5
  strategy:
    canary:
      steps:
      - setWeight: 10    # Start with 10% traffic
      - pause:
          duration: 5m   # Wait 5 minutes
      - setWeight: 25    # Increase to 25%
      - pause:
          duration: 5m
      - setWeight: 50    # Increase to 50%
      - pause:
          duration: 10m  # Wait longer at 50%
      - setWeight: 75    # Increase to 75%
      - pause:
          duration: 5m
      - setWeight: 100   # Full traffic
      canaryService: backend-canary-service
      stableService: backend-stable-service
      trafficRouting:
        nginx:
          stableIngress: backend-stable-ingress
          annotationPrefix: nginx.ingress.kubernetes.io
          additionalIngressAnnotations:
            canary-by-header: X-Canary
            canary-by-header-value: bookedbarber-canary
      analysis:
        templates:
        - templateName: success-rate
        - templateName: latency
        args:
        - name: service-name
          value: backend-canary-service
        startingStep: 2 # Start analysis after 25% traffic
        interval: 30s
        count: 10
        successCondition: result[0] >= 0.95 && result[1] <= 500
        failureLimit: 3
  selector:
    matchLabels:
      app: bookedbarber-backend
  template:
    metadata:
      labels:
        app: bookedbarber-backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/bookedbarber/backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: jwt-secret
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: stripe-secret
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: bookedbarber-secrets
              key: sentry-dsn
        - name: DEPLOYMENT_TYPE
          value: "canary"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: backend-stable-service
  namespace: production
  labels:
    app: bookedbarber-backend
    type: stable
spec:
  selector:
    app: bookedbarber-backend
  ports:
  - port: 80
    targetPort: 8000
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: backend-canary-service
  namespace: production
  labels:
    app: bookedbarber-backend
    type: canary
spec:
  selector:
    app: bookedbarber-backend
  ports:
  - port: 80
    targetPort: 8000
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-stable-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.bookedbarber.com
    secretName: backend-tls
  rules:
  - host: api.bookedbarber.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-stable-service
            port:
              number: 80

---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: production
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 30s
    count: 10
    successCondition: result[0] >= 0.95
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus.monitoring:9090
        query: |
          sum(rate(http_requests_total{service="{{args.service-name}}",code!~"5.."}[2m])) /
          sum(rate(http_requests_total{service="{{args.service-name}}"}[2m]))

---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: latency
  namespace: production
spec:
  args:
  - name: service-name
  metrics:
  - name: latency
    interval: 30s
    count: 10
    successCondition: result[0] <= 500
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus.monitoring:9090
        query: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket{service="{{args.service-name}}"}[2m])) by (le)
          ) * 1000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canary-deployment-config
  namespace: production
data:
  canary-steps.yaml: |
    steps:
      - name: "10% Traffic"
        weight: 10
        duration: "5m"
        success_criteria:
          - metric: "error_rate"
            threshold: "< 1%"
          - metric: "latency_p95"
            threshold: "< 500ms"
      - name: "25% Traffic"
        weight: 25
        duration: "5m"
        success_criteria:
          - metric: "error_rate"
            threshold: "< 1%"
          - metric: "latency_p95"
            threshold: "< 500ms"
      - name: "50% Traffic"
        weight: 50
        duration: "10m"
        success_criteria:
          - metric: "error_rate"
            threshold: "< 1%"
          - metric: "latency_p95"
            threshold: "< 500ms"
          - metric: "cpu_usage"
            threshold: "< 70%"
          - metric: "memory_usage"
            threshold: "< 80%"
      - name: "75% Traffic"
        weight: 75
        duration: "5m"
        success_criteria:
          - metric: "error_rate"
            threshold: "< 1%"
          - metric: "latency_p95"
            threshold: "< 500ms"
      - name: "100% Traffic"
        weight: 100
        duration: "complete"
        
  rollback-criteria.yaml: |
    automatic_rollback:
      enabled: true
      conditions:
        - metric: "error_rate"
          threshold: "> 5%"
          duration: "2m"
        - metric: "latency_p95"
          threshold: "> 1000ms"
          duration: "3m"
        - metric: "availability"
          threshold: "< 99%"
          duration: "1m"
    
    manual_rollback:
      enabled: true
      webhook: "https://api.bookedbarber.com/webhooks/rollback"