import axios from 'axios'

// Mock axios before importing the module that uses it
jest.mock('axios', () => ({
  create: jest.fn(() => ({
    interceptors: {
      request: { use: jest.fn((success, error) => ({ fulfilled: success, rejected: error })) },
      response: { use: jest.fn((success, error) => ({ fulfilled: success, rejected: error })) },
    },
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
  })),
}))

import { apiClient } from '@/lib/api/client'

const mockedAxios = axios as jest.Mocked<typeof axios>

describe('API Client', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    localStorage.clear()
  })

  it('should create axios instance with correct base URL', () => {
    expect(mockedAxios.create).toHaveBeenCalledWith({
      baseURL: 'http://localhost:8000/api/v1',
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })

  it('should add authorization header when token exists', async () => {
    const mockToken = 'test-token'
    localStorage.setItem('access_token', mockToken)

    // Create a mock instance
    const mockInstance = {
      interceptors: {
        request: { use: jest.fn() },
        response: { use: jest.fn() },
      },
    }

    // Get the request interceptor
    const requestInterceptor = (apiClient.interceptors.request as any).handlers[0]
    
    const config = { headers: {} }
    const modifiedConfig = await requestInterceptor.fulfilled(config)

    expect(modifiedConfig.headers.Authorization).toBe(`Bearer ${mockToken}`)
  })

  it('should not add authorization header when no token exists', async () => {
    // Get the request interceptor
    const requestInterceptor = (apiClient.interceptors.request as any).handlers[0]
    
    const config = { headers: {} }
    const modifiedConfig = await requestInterceptor.fulfilled(config)

    expect(modifiedConfig.headers.Authorization).toBeUndefined()
  })

  it('should handle 401 responses by clearing token and redirecting', async () => {
    const mockError = {
      response: { status: 401 },
      config: {},
    }

    // Mock window.location.href setter
    Object.defineProperty(window, 'location', {
      value: { href: '/' },
      writable: true,
    })

    // Get the response interceptor error handler
    const responseInterceptor = (apiClient.interceptors.response as any).handlers[0]
    
    localStorage.setItem('access_token', 'test-token')
    localStorage.setItem('refresh_token', 'test-refresh')

    try {
      await responseInterceptor.rejected(mockError)
    } catch (error) {
      expect(error).toBe(mockError)
    }

    expect(localStorage.getItem('access_token')).toBeNull()
    expect(localStorage.getItem('refresh_token')).toBeNull()
    expect(window.location.href).toBe('/login')
  })

  it('should pass through non-401 errors', async () => {
    const mockError = {
      response: { status: 500 },
      config: {},
    }

    // Get the response interceptor error handler
    const responseInterceptor = (apiClient.interceptors.response as any).handlers[0]

    try {
      await responseInterceptor.rejected(mockError)
    } catch (error) {
      expect(error).toBe(mockError)
    }
  })
})