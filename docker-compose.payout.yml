version: '3.8'

services:
  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: sixfb_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL database (if not using external DB)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: sixfb_postgres
  #   environment:
  #     POSTGRES_DB: sixfb_booking
  #     POSTGRES_USER: sixfb_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U sixfb_user -d sixfb_booking"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: sixfb_celery_beat
    command: celery -A config.celery_config:celery_app beat -l info --scheduler redbeat.RedBeatScheduler
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # High-priority payout worker (handles urgent payouts)
  celery-payout-worker-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: sixfb_payout_worker_1
    command: celery -A config.celery_config:celery_app worker -Q payouts,high_priority -n payout-worker-1@%h -c 2 --max-tasks-per-child=100
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SQUARE_ACCESS_TOKEN=${SQUARE_ACCESS_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Second payout worker for redundancy
  celery-payout-worker-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: sixfb_payout_worker_2
    command: celery -A config.celery_config:celery_app worker -Q payouts,high_priority -n payout-worker-2@%h -c 2 --max-tasks-per-child=100
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SQUARE_ACCESS_TOKEN=${SQUARE_ACCESS_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Default worker for general tasks
  celery-default-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: sixfb_default_worker
    command: celery -A config.celery_config:celery_app worker -Q default,low_priority -n default-worker@%h -c 4
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Flower monitoring dashboard
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: sixfb_flower
    command: celery -A config.celery_config:celery_app flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - flower_data:/data
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sixfb_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sixfb_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Alert manager for notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: sixfb_alertmanager
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    restart: unless-stopped

  # Custom payout monitoring service
  payout-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile.monitor
    container_name: sixfb_payout_monitor
    command: python -m tasks.payout_monitoring
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  flower_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  default:
    name: sixfb_network
